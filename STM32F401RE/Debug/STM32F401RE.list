
STM32F401RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08003784  08003784  00013784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003874  08003874  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08003874  08003874  00013874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800387c  0800387c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800387c  0800387c  0001387c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003880  08003880  00013880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000078  080038fc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  080038fc  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e27  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001871  00000000  00000000  00029ecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a30  00000000  00000000  0002b740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  0002c170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016274  00000000  00000000  0002cad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aca9  00000000  00000000  00042d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b3f9  00000000  00000000  0004d9f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d8dee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e14  00000000  00000000  000d8e40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800376c 	.word	0x0800376c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800376c 	.word	0x0800376c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <CLCD_Delay>:
#include "CLCD.h"


//************************ Low Level Function *****************************************//
static void CLCD_Delay(uint16_t Time)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 800058e:	88fb      	ldrh	r3, [r7, #6]
 8000590:	4618      	mov	r0, r3
 8000592:	f001 f8db 	bl	800174c <HAL_Delay>
	
}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}

0800059e <CLCD_Write8>:
static void CLCD_Write8(CLCD_Name* LCD, uint8_t Data, uint8_t Mode)
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	b082      	sub	sp, #8
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
 80005a6:	460b      	mov	r3, r1
 80005a8:	70fb      	strb	r3, [r7, #3]
 80005aa:	4613      	mov	r3, r2
 80005ac:	70bb      	strb	r3, [r7, #2]
	if(Mode == CLCD_COMMAND)
 80005ae:	78bb      	ldrb	r3, [r7, #2]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d108      	bne.n	80005c6 <CLCD_Write8+0x28>
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_RESET);// RS = 0, write cmd
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	6858      	ldr	r0, [r3, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	891b      	ldrh	r3, [r3, #8]
 80005bc:	2200      	movs	r2, #0
 80005be:	4619      	mov	r1, r3
 80005c0:	f001 fb96 	bl	8001cf0 <HAL_GPIO_WritePin>
 80005c4:	e00a      	b.n	80005dc <CLCD_Write8+0x3e>
	}
	else if(Mode == CLCD_DATA)
 80005c6:	78bb      	ldrb	r3, [r7, #2]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d107      	bne.n	80005dc <CLCD_Write8+0x3e>
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_SET);// RS = 1, write data
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	6858      	ldr	r0, [r3, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	891b      	ldrh	r3, [r3, #8]
 80005d4:	2201      	movs	r2, #1
 80005d6:	4619      	mov	r1, r3
 80005d8:	f001 fb8a 	bl	8001cf0 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD->D0_PORT, LCD->D0_PIN, Data&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	6958      	ldr	r0, [r3, #20]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	8b19      	ldrh	r1, [r3, #24]
 80005e4:	78fb      	ldrb	r3, [r7, #3]
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	461a      	mov	r2, r3
 80005ee:	f001 fb7f 	bl	8001cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D1_PORT, LCD->D1_PIN, Data>>1&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	69d8      	ldr	r0, [r3, #28]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	8c19      	ldrh	r1, [r3, #32]
 80005fa:	78fb      	ldrb	r3, [r7, #3]
 80005fc:	085b      	lsrs	r3, r3, #1
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	f003 0301 	and.w	r3, r3, #1
 8000604:	b2db      	uxtb	r3, r3
 8000606:	461a      	mov	r2, r3
 8000608:	f001 fb72 	bl	8001cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D2_PORT, LCD->D2_PIN, Data>>2&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 8000614:	78fb      	ldrb	r3, [r7, #3]
 8000616:	089b      	lsrs	r3, r3, #2
 8000618:	b2db      	uxtb	r3, r3
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	b2db      	uxtb	r3, r3
 8000620:	461a      	mov	r2, r3
 8000622:	f001 fb65 	bl	8001cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D3_PORT, LCD->D3_PIN, Data>>3&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	8e19      	ldrh	r1, [r3, #48]	; 0x30
 800062e:	78fb      	ldrb	r3, [r7, #3]
 8000630:	08db      	lsrs	r3, r3, #3
 8000632:	b2db      	uxtb	r3, r3
 8000634:	f003 0301 	and.w	r3, r3, #1
 8000638:	b2db      	uxtb	r3, r3
 800063a:	461a      	mov	r2, r3
 800063c:	f001 fb58 	bl	8001cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D4_PORT, LCD->D4_PIN, Data>>4&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 8000648:	78fb      	ldrb	r3, [r7, #3]
 800064a:	091b      	lsrs	r3, r3, #4
 800064c:	b2db      	uxtb	r3, r3
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	b2db      	uxtb	r3, r3
 8000654:	461a      	mov	r2, r3
 8000656:	f001 fb4b 	bl	8001cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D5_PORT, LCD->D5_PIN, Data>>5&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 8000664:	78fb      	ldrb	r3, [r7, #3]
 8000666:	095b      	lsrs	r3, r3, #5
 8000668:	b2db      	uxtb	r3, r3
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	b2db      	uxtb	r3, r3
 8000670:	461a      	mov	r2, r3
 8000672:	f001 fb3d 	bl	8001cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D6_PORT, LCD->D6_PIN, Data>>6&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
 8000680:	78fb      	ldrb	r3, [r7, #3]
 8000682:	099b      	lsrs	r3, r3, #6
 8000684:	b2db      	uxtb	r3, r3
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	b2db      	uxtb	r3, r3
 800068c:	461a      	mov	r2, r3
 800068e:	f001 fb2f 	bl	8001cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D7_PORT, LCD->D7_PIN, Data>>7&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 800069c:	78fb      	ldrb	r3, [r7, #3]
 800069e:	09db      	lsrs	r3, r3, #7
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	461a      	mov	r2, r3
 80006a4:	f001 fb24 	bl	8001cf0 <HAL_GPIO_WritePin>
	
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	68d8      	ldr	r0, [r3, #12]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	8a1b      	ldrh	r3, [r3, #16]
 80006b0:	2200      	movs	r2, #0
 80006b2:	4619      	mov	r1, r3
 80006b4:	f001 fb1c 	bl	8001cf0 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 80006b8:	2001      	movs	r0, #1
 80006ba:	f7ff ff63 	bl	8000584 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_SET);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	68d8      	ldr	r0, [r3, #12]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	8a1b      	ldrh	r3, [r3, #16]
 80006c6:	2201      	movs	r2, #1
 80006c8:	4619      	mov	r1, r3
 80006ca:	f001 fb11 	bl	8001cf0 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 80006ce:	2001      	movs	r0, #1
 80006d0:	f7ff ff58 	bl	8000584 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	68d8      	ldr	r0, [r3, #12]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	8a1b      	ldrh	r3, [r3, #16]
 80006dc:	2200      	movs	r2, #0
 80006de:	4619      	mov	r1, r3
 80006e0:	f001 fb06 	bl	8001cf0 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 80006e4:	2001      	movs	r0, #1
 80006e6:	f7ff ff4d 	bl	8000584 <CLCD_Delay>
}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <CLCD_Write4>:
static void CLCD_Write4(CLCD_Name* LCD, uint8_t Data, uint8_t Mode)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b084      	sub	sp, #16
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
 80006fa:	460b      	mov	r3, r1
 80006fc:	70fb      	strb	r3, [r7, #3]
 80006fe:	4613      	mov	r3, r2
 8000700:	70bb      	strb	r3, [r7, #2]
	uint8_t Data_H = Data >>4;
 8000702:	78fb      	ldrb	r3, [r7, #3]
 8000704:	091b      	lsrs	r3, r3, #4
 8000706:	73fb      	strb	r3, [r7, #15]
	uint8_t Data_L = Data;
 8000708:	78fb      	ldrb	r3, [r7, #3]
 800070a:	73bb      	strb	r3, [r7, #14]
	if(Mode == CLCD_COMMAND)
 800070c:	78bb      	ldrb	r3, [r7, #2]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d108      	bne.n	8000724 <CLCD_Write4+0x32>
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_RESET);// RS = 0, write cmd
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6858      	ldr	r0, [r3, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	891b      	ldrh	r3, [r3, #8]
 800071a:	2200      	movs	r2, #0
 800071c:	4619      	mov	r1, r3
 800071e:	f001 fae7 	bl	8001cf0 <HAL_GPIO_WritePin>
 8000722:	e00a      	b.n	800073a <CLCD_Write4+0x48>
	}
	else if(Mode == CLCD_DATA)
 8000724:	78bb      	ldrb	r3, [r7, #2]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d107      	bne.n	800073a <CLCD_Write4+0x48>
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_SET);// RS = 1, write data
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	6858      	ldr	r0, [r3, #4]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	891b      	ldrh	r3, [r3, #8]
 8000732:	2201      	movs	r2, #1
 8000734:	4619      	mov	r1, r3
 8000736:	f001 fadb 	bl	8001cf0 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD->D4_PORT, LCD->D4_PIN, Data_H&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 8000742:	7bfb      	ldrb	r3, [r7, #15]
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	b2db      	uxtb	r3, r3
 800074a:	461a      	mov	r2, r3
 800074c:	f001 fad0 	bl	8001cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D5_PORT, LCD->D5_PIN, Data_H>>1&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 800075a:	7bfb      	ldrb	r3, [r7, #15]
 800075c:	085b      	lsrs	r3, r3, #1
 800075e:	b2db      	uxtb	r3, r3
 8000760:	f003 0301 	and.w	r3, r3, #1
 8000764:	b2db      	uxtb	r3, r3
 8000766:	461a      	mov	r2, r3
 8000768:	f001 fac2 	bl	8001cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D6_PORT, LCD->D6_PIN, Data_H>>2&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	089b      	lsrs	r3, r3, #2
 800077a:	b2db      	uxtb	r3, r3
 800077c:	f003 0301 	and.w	r3, r3, #1
 8000780:	b2db      	uxtb	r3, r3
 8000782:	461a      	mov	r2, r3
 8000784:	f001 fab4 	bl	8001cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D7_PORT, LCD->D7_PIN, Data_H>>3&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	08db      	lsrs	r3, r3, #3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	b2db      	uxtb	r3, r3
 800079e:	461a      	mov	r2, r3
 80007a0:	f001 faa6 	bl	8001cf0 <HAL_GPIO_WritePin>
	
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	68d8      	ldr	r0, [r3, #12]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	8a1b      	ldrh	r3, [r3, #16]
 80007ac:	2200      	movs	r2, #0
 80007ae:	4619      	mov	r1, r3
 80007b0:	f001 fa9e 	bl	8001cf0 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 80007b4:	2001      	movs	r0, #1
 80007b6:	f7ff fee5 	bl	8000584 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_SET);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	68d8      	ldr	r0, [r3, #12]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	8a1b      	ldrh	r3, [r3, #16]
 80007c2:	2201      	movs	r2, #1
 80007c4:	4619      	mov	r1, r3
 80007c6:	f001 fa93 	bl	8001cf0 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 80007ca:	2001      	movs	r0, #1
 80007cc:	f7ff feda 	bl	8000584 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	68d8      	ldr	r0, [r3, #12]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	8a1b      	ldrh	r3, [r3, #16]
 80007d8:	2200      	movs	r2, #0
 80007da:	4619      	mov	r1, r3
 80007dc:	f001 fa88 	bl	8001cf0 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 80007e0:	2001      	movs	r0, #1
 80007e2:	f7ff fecf 	bl	8000584 <CLCD_Delay>
	
	HAL_GPIO_WritePin(LCD->D4_PORT, LCD->D4_PIN, Data_L&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 80007ee:	7bbb      	ldrb	r3, [r7, #14]
 80007f0:	f003 0301 	and.w	r3, r3, #1
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	461a      	mov	r2, r3
 80007f8:	f001 fa7a 	bl	8001cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D5_PORT, LCD->D5_PIN, Data_L>>1&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 8000806:	7bbb      	ldrb	r3, [r7, #14]
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	b2db      	uxtb	r3, r3
 800080c:	f003 0301 	and.w	r3, r3, #1
 8000810:	b2db      	uxtb	r3, r3
 8000812:	461a      	mov	r2, r3
 8000814:	f001 fa6c 	bl	8001cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D6_PORT, LCD->D6_PIN, Data_L>>2&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
 8000822:	7bbb      	ldrb	r3, [r7, #14]
 8000824:	089b      	lsrs	r3, r3, #2
 8000826:	b2db      	uxtb	r3, r3
 8000828:	f003 0301 	and.w	r3, r3, #1
 800082c:	b2db      	uxtb	r3, r3
 800082e:	461a      	mov	r2, r3
 8000830:	f001 fa5e 	bl	8001cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D7_PORT, LCD->D7_PIN, Data_L>>3&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 800083e:	7bbb      	ldrb	r3, [r7, #14]
 8000840:	08db      	lsrs	r3, r3, #3
 8000842:	b2db      	uxtb	r3, r3
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	b2db      	uxtb	r3, r3
 800084a:	461a      	mov	r2, r3
 800084c:	f001 fa50 	bl	8001cf0 <HAL_GPIO_WritePin>
	
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	68d8      	ldr	r0, [r3, #12]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	8a1b      	ldrh	r3, [r3, #16]
 8000858:	2200      	movs	r2, #0
 800085a:	4619      	mov	r1, r3
 800085c:	f001 fa48 	bl	8001cf0 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8000860:	2001      	movs	r0, #1
 8000862:	f7ff fe8f 	bl	8000584 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_SET);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	68d8      	ldr	r0, [r3, #12]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	8a1b      	ldrh	r3, [r3, #16]
 800086e:	2201      	movs	r2, #1
 8000870:	4619      	mov	r1, r3
 8000872:	f001 fa3d 	bl	8001cf0 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8000876:	2001      	movs	r0, #1
 8000878:	f7ff fe84 	bl	8000584 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	68d8      	ldr	r0, [r3, #12]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	8a1b      	ldrh	r3, [r3, #16]
 8000884:	2200      	movs	r2, #0
 8000886:	4619      	mov	r1, r3
 8000888:	f001 fa32 	bl	8001cf0 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 800088c:	2001      	movs	r0, #1
 800088e:	f7ff fe79 	bl	8000584 <CLCD_Delay>
}
 8000892:	bf00      	nop
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <CLCD_4BIT_Init>:

void CLCD_4BIT_Init(CLCD_Name* LCD, uint8_t Colum, uint8_t Row,
									GPIO_TypeDef* RS_PORT, uint16_t RS_PIN, GPIO_TypeDef* EN_PORT, uint16_t EN_PIN,
									GPIO_TypeDef* D4_PORT, uint16_t D4_PIN, GPIO_TypeDef* D5_PORT, uint16_t D5_PIN,
									GPIO_TypeDef* D6_PORT, uint16_t D6_PIN, GPIO_TypeDef* D7_PORT, uint16_t D7_PIN)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b084      	sub	sp, #16
 800089e:	af00      	add	r7, sp, #0
 80008a0:	60f8      	str	r0, [r7, #12]
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	460b      	mov	r3, r1
 80008a6:	72fb      	strb	r3, [r7, #11]
 80008a8:	4613      	mov	r3, r2
 80008aa:	72bb      	strb	r3, [r7, #10]
	LCD->MODE = LCD_4BITMODE;
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]
	LCD->COLUMS = Colum;
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	7afa      	ldrb	r2, [r7, #11]
 80008b6:	705a      	strb	r2, [r3, #1]
	LCD->ROWS = Row;
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	7aba      	ldrb	r2, [r7, #10]
 80008bc:	709a      	strb	r2, [r3, #2]
	LCD->RS_PORT = RS_PORT;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	687a      	ldr	r2, [r7, #4]
 80008c2:	605a      	str	r2, [r3, #4]
	LCD->RS_PIN = RS_PIN;
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	8b3a      	ldrh	r2, [r7, #24]
 80008c8:	811a      	strh	r2, [r3, #8]
	LCD->EN_PORT = EN_PORT;
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	69fa      	ldr	r2, [r7, #28]
 80008ce:	60da      	str	r2, [r3, #12]
	LCD->EN_PIN = EN_PIN;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	8c3a      	ldrh	r2, [r7, #32]
 80008d4:	821a      	strh	r2, [r3, #16]
	LCD->D4_PORT = D4_PORT;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008da:	635a      	str	r2, [r3, #52]	; 0x34
	LCD->D4_PIN = D4_PIN;
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80008e0:	871a      	strh	r2, [r3, #56]	; 0x38
	LCD->D5_PORT = D5_PORT;
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008e6:	63da      	str	r2, [r3, #60]	; 0x3c
	LCD->D5_PIN = D5_PIN;
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80008ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	LCD->D6_PORT = D6_PORT;
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008f4:	645a      	str	r2, [r3, #68]	; 0x44
	LCD->D6_PIN = D6_PIN;
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80008fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	LCD->D7_PORT = D7_PORT;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000902:	64da      	str	r2, [r3, #76]	; 0x4c
	LCD->D7_PIN = D7_PIN;
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800090a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	2228      	movs	r2, #40	; 0x28
 8000912:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	2206      	movs	r2, #6
 800091a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	220c      	movs	r2, #12
 8000922:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	2214      	movs	r2, #20
 800092a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	
	CLCD_Delay(50);
 800092e:	2032      	movs	r0, #50	; 0x32
 8000930:	f7ff fe28 	bl	8000584 <CLCD_Delay>
	CLCD_Write4(LCD, 0x33, CLCD_COMMAND);
 8000934:	2200      	movs	r2, #0
 8000936:	2133      	movs	r1, #51	; 0x33
 8000938:	68f8      	ldr	r0, [r7, #12]
 800093a:	f7ff feda 	bl	80006f2 <CLCD_Write4>
	CLCD_Delay(5);
 800093e:	2005      	movs	r0, #5
 8000940:	f7ff fe20 	bl	8000584 <CLCD_Delay>
	CLCD_Write4(LCD, 0x33, CLCD_COMMAND);
 8000944:	2200      	movs	r2, #0
 8000946:	2133      	movs	r1, #51	; 0x33
 8000948:	68f8      	ldr	r0, [r7, #12]
 800094a:	f7ff fed2 	bl	80006f2 <CLCD_Write4>
	CLCD_Delay(5);
 800094e:	2005      	movs	r0, #5
 8000950:	f7ff fe18 	bl	8000584 <CLCD_Delay>
	CLCD_Write4(LCD, 0x32, CLCD_COMMAND);
 8000954:	2200      	movs	r2, #0
 8000956:	2132      	movs	r1, #50	; 0x32
 8000958:	68f8      	ldr	r0, [r7, #12]
 800095a:	f7ff feca 	bl	80006f2 <CLCD_Write4>
	CLCD_Delay(5);
 800095e:	2005      	movs	r0, #5
 8000960:	f7ff fe10 	bl	8000584 <CLCD_Delay>
	
	CLCD_Write4(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800096a:	2200      	movs	r2, #0
 800096c:	4619      	mov	r1, r3
 800096e:	68f8      	ldr	r0, [r7, #12]
 8000970:	f7ff febf 	bl	80006f2 <CLCD_Write4>
	CLCD_Write4(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800097a:	2200      	movs	r2, #0
 800097c:	4619      	mov	r1, r3
 800097e:	68f8      	ldr	r0, [r7, #12]
 8000980:	f7ff feb7 	bl	80006f2 <CLCD_Write4>
	CLCD_Write4(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800098a:	2200      	movs	r2, #0
 800098c:	4619      	mov	r1, r3
 800098e:	68f8      	ldr	r0, [r7, #12]
 8000990:	f7ff feaf 	bl	80006f2 <CLCD_Write4>
	CLCD_Write4(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800099a:	2200      	movs	r2, #0
 800099c:	4619      	mov	r1, r3
 800099e:	68f8      	ldr	r0, [r7, #12]
 80009a0:	f7ff fea7 	bl	80006f2 <CLCD_Write4>
	
	CLCD_Write4(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2101      	movs	r1, #1
 80009a8:	68f8      	ldr	r0, [r7, #12]
 80009aa:	f7ff fea2 	bl	80006f2 <CLCD_Write4>
	CLCD_Write4(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2102      	movs	r1, #2
 80009b2:	68f8      	ldr	r0, [r7, #12]
 80009b4:	f7ff fe9d 	bl	80006f2 <CLCD_Write4>
}
 80009b8:	bf00      	nop
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <CLCD_SetCursor>:
void CLCD_SetCursor(CLCD_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	460b      	mov	r3, r1
 80009ca:	70fb      	strb	r3, [r7, #3]
 80009cc:	4613      	mov	r3, r2
 80009ce:	70bb      	strb	r3, [r7, #2]
	
	uint8_t DRAM_ADDRESS = 0x00;
 80009d0:	2300      	movs	r3, #0
 80009d2:	73fb      	strb	r3, [r7, #15]
	uint8_t DRAM_OFFSET[4] = {0x00, 0x40, 0x14, 0x54};
 80009d4:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <CLCD_SetCursor+0x8c>)
 80009d6:	60bb      	str	r3, [r7, #8]
	if(Xpos >= LCD->COLUMS)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	785b      	ldrb	r3, [r3, #1]
 80009dc:	78fa      	ldrb	r2, [r7, #3]
 80009de:	429a      	cmp	r2, r3
 80009e0:	d303      	bcc.n	80009ea <CLCD_SetCursor+0x2a>
	{
		Xpos = LCD->COLUMS - 1;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	785b      	ldrb	r3, [r3, #1]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	789b      	ldrb	r3, [r3, #2]
 80009ee:	78ba      	ldrb	r2, [r7, #2]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d303      	bcc.n	80009fc <CLCD_SetCursor+0x3c>
	{
		Ypos = LCD->ROWS -1;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	789b      	ldrb	r3, [r3, #2]
 80009f8:	3b01      	subs	r3, #1
 80009fa:	70bb      	strb	r3, [r7, #2]
	}
	DRAM_ADDRESS = DRAM_OFFSET[Ypos] + Xpos;
 80009fc:	78bb      	ldrb	r3, [r7, #2]
 80009fe:	3310      	adds	r3, #16
 8000a00:	443b      	add	r3, r7
 8000a02:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000a06:	78fb      	ldrb	r3, [r7, #3]
 8000a08:	4413      	add	r3, r2
 8000a0a:	73fb      	strb	r3, [r7, #15]
	if(LCD->MODE == LCD_8BITMODE)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b10      	cmp	r3, #16
 8000a12:	d109      	bne.n	8000a28 <CLCD_SetCursor+0x68>
	{
		CLCD_Write8(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8000a14:	7bfb      	ldrb	r3, [r7, #15]
 8000a16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	4619      	mov	r1, r3
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f7ff fdbc 	bl	800059e <CLCD_Write8>
	}
	else if(LCD->MODE == LCD_4BITMODE)
	{
		CLCD_Write4(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
	}
}
 8000a26:	e00c      	b.n	8000a42 <CLCD_SetCursor+0x82>
	else if(LCD->MODE == LCD_4BITMODE)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d108      	bne.n	8000a42 <CLCD_SetCursor+0x82>
		CLCD_Write4(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	2200      	movs	r2, #0
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f7ff fe58 	bl	80006f2 <CLCD_Write4>
}
 8000a42:	bf00      	nop
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	54144000 	.word	0x54144000

08000a50 <CLCD_WriteChar>:
void CLCD_WriteChar(CLCD_Name* LCD, char character)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	460b      	mov	r3, r1
 8000a5a:	70fb      	strb	r3, [r7, #3]
	if(LCD->MODE == LCD_8BITMODE)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b10      	cmp	r3, #16
 8000a62:	d106      	bne.n	8000a72 <CLCD_WriteChar+0x22>
	{
		CLCD_Write8(LCD, character, CLCD_DATA);
 8000a64:	78fb      	ldrb	r3, [r7, #3]
 8000a66:	2201      	movs	r2, #1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f7ff fd97 	bl	800059e <CLCD_Write8>
	}
	else if(LCD->MODE == LCD_4BITMODE)
	{
		CLCD_Write4(LCD, character, CLCD_DATA);
	}
}
 8000a70:	e009      	b.n	8000a86 <CLCD_WriteChar+0x36>
	else if(LCD->MODE == LCD_4BITMODE)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d105      	bne.n	8000a86 <CLCD_WriteChar+0x36>
		CLCD_Write4(LCD, character, CLCD_DATA);
 8000a7a:	78fb      	ldrb	r3, [r7, #3]
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	4619      	mov	r1, r3
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f7ff fe36 	bl	80006f2 <CLCD_Write4>
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <CLCD_WriteString>:
void CLCD_WriteString(CLCD_Name* LCD, char *String)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_WriteChar(LCD, *String++);
 8000a98:	e007      	b.n	8000aaa <CLCD_WriteString+0x1c>
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	1c5a      	adds	r2, r3, #1
 8000a9e:	603a      	str	r2, [r7, #0]
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff ffd3 	bl	8000a50 <CLCD_WriteChar>
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d1f3      	bne.n	8000a9a <CLCD_WriteString+0xc>
}
 8000ab2:	bf00      	nop
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <CLCD_Clear>:
void CLCD_Clear(CLCD_Name* LCD)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
	if(LCD->MODE == LCD_8BITMODE)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b10      	cmp	r3, #16
 8000aca:	d105      	bne.n	8000ad8 <CLCD_Clear+0x1c>
	{
		CLCD_Write8(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2101      	movs	r1, #1
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff fd64 	bl	800059e <CLCD_Write8>
 8000ad6:	e008      	b.n	8000aea <CLCD_Clear+0x2e>
	}
	else if(LCD->MODE == LCD_4BITMODE)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d104      	bne.n	8000aea <CLCD_Clear+0x2e>
	{
		CLCD_Write4(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff fe04 	bl	80006f2 <CLCD_Write4>
	}
	CLCD_Delay(5);
 8000aea:	2005      	movs	r0, #5
 8000aec:	f7ff fd4a 	bl	8000584 <CLCD_Delay>
}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <CLCD_CursorOn>:
		CLCD_Write4(LCD, LCD_RETURNHOME, CLCD_COMMAND);
	}
	CLCD_Delay(5);
}
void CLCD_CursorOn(CLCD_Name* LCD)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	LCD->DISPLAYCTRL |= LCD_CURSORON;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000b06:	f043 0302 	orr.w	r3, r3, #2
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	if(LCD->MODE == LCD_8BITMODE)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b10      	cmp	r3, #16
 8000b18:	d108      	bne.n	8000b2c <CLCD_CursorOn+0x34>
	{
		CLCD_Write8(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000b20:	2200      	movs	r2, #0
 8000b22:	4619      	mov	r1, r3
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff fd3a 	bl	800059e <CLCD_Write8>
	}
	else if(LCD->MODE == LCD_4BITMODE)
	{
		CLCD_Write4(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
	}
}
 8000b2a:	e00b      	b.n	8000b44 <CLCD_CursorOn+0x4c>
	else if(LCD->MODE == LCD_4BITMODE)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d107      	bne.n	8000b44 <CLCD_CursorOn+0x4c>
		CLCD_Write4(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f7ff fdd7 	bl	80006f2 <CLCD_Write4>
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <check_clm>:

CLCD_Name LCD1;
uint8_t Count;
char LCD_send[16];
int check_clm(uint16_t pin_var)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	80fb      	strh	r3, [r7, #6]
	int clm;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);		//Set all columns to logic 1 ie connected to Vcc
 8000b56:	2201      	movs	r2, #1
 8000b58:	21f0      	movs	r1, #240	; 0xf0
 8000b5a:	482c      	ldr	r0, [pc, #176]	; (8000c0c <check_clm+0xc0>)
 8000b5c:	f001 f8c8 	bl	8001cf0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);						//set first column to Gnd
 8000b60:	2200      	movs	r2, #0
 8000b62:	2110      	movs	r1, #16
 8000b64:	4829      	ldr	r0, [pc, #164]	; (8000c0c <check_clm+0xc0>)
 8000b66:	f001 f8c3 	bl	8001cf0 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, pin_var) == 0)
 8000b6a:	88fb      	ldrh	r3, [r7, #6]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4827      	ldr	r0, [pc, #156]	; (8000c0c <check_clm+0xc0>)
 8000b70:	f001 f8a6 	bl	8001cc0 <HAL_GPIO_ReadPin>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d101      	bne.n	8000b7e <check_clm+0x32>
		clm = 1;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000b7e:	2201      	movs	r2, #1
 8000b80:	2110      	movs	r1, #16
 8000b82:	4822      	ldr	r0, [pc, #136]	; (8000c0c <check_clm+0xc0>)
 8000b84:	f001 f8b4 	bl	8001cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);						//set second column to Gnd
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2120      	movs	r1, #32
 8000b8c:	481f      	ldr	r0, [pc, #124]	; (8000c0c <check_clm+0xc0>)
 8000b8e:	f001 f8af 	bl	8001cf0 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, pin_var) == 0)
 8000b92:	88fb      	ldrh	r3, [r7, #6]
 8000b94:	4619      	mov	r1, r3
 8000b96:	481d      	ldr	r0, [pc, #116]	; (8000c0c <check_clm+0xc0>)
 8000b98:	f001 f892 	bl	8001cc0 <HAL_GPIO_ReadPin>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d101      	bne.n	8000ba6 <check_clm+0x5a>
		clm = 2;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	2120      	movs	r1, #32
 8000baa:	4818      	ldr	r0, [pc, #96]	; (8000c0c <check_clm+0xc0>)
 8000bac:	f001 f8a0 	bl	8001cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);						//set third column to Gnd
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2140      	movs	r1, #64	; 0x40
 8000bb4:	4815      	ldr	r0, [pc, #84]	; (8000c0c <check_clm+0xc0>)
 8000bb6:	f001 f89b 	bl	8001cf0 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, pin_var) == 0)
 8000bba:	88fb      	ldrh	r3, [r7, #6]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4813      	ldr	r0, [pc, #76]	; (8000c0c <check_clm+0xc0>)
 8000bc0:	f001 f87e 	bl	8001cc0 <HAL_GPIO_ReadPin>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d101      	bne.n	8000bce <check_clm+0x82>
		clm = 3;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2140      	movs	r1, #64	; 0x40
 8000bd2:	480e      	ldr	r0, [pc, #56]	; (8000c0c <check_clm+0xc0>)
 8000bd4:	f001 f88c 	bl	8001cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);						//set fourth column to Gnd
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2180      	movs	r1, #128	; 0x80
 8000bdc:	480b      	ldr	r0, [pc, #44]	; (8000c0c <check_clm+0xc0>)
 8000bde:	f001 f887 	bl	8001cf0 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, pin_var) == 0)
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	4619      	mov	r1, r3
 8000be6:	4809      	ldr	r0, [pc, #36]	; (8000c0c <check_clm+0xc0>)
 8000be8:	f001 f86a 	bl	8001cc0 <HAL_GPIO_ReadPin>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d101      	bne.n	8000bf6 <check_clm+0xaa>
		clm = 4;
 8000bf2:	2304      	movs	r3, #4
 8000bf4:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);		//Set all columns to logic 0 ie connected to GND
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	21f0      	movs	r1, #240	; 0xf0
 8000bfa:	4804      	ldr	r0, [pc, #16]	; (8000c0c <check_clm+0xc0>)
 8000bfc:	f001 f878 	bl	8001cf0 <HAL_GPIO_WritePin>
	return clm;
 8000c00:	68fb      	ldr	r3, [r7, #12]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40020400 	.word	0x40020400

08000c10 <key_press>:

unsigned char key_press(void)
{
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	b087      	sub	sp, #28
 8000c14:	af00      	add	r7, sp, #0
	int clm_var;
	unsigned char key_arr[4][4] = {{'1', '2', '3', 'A'},{'4', '5', '6', 'B'},{'7', '8', '9', 'C'},{'*', '0', '=', 'D'}};
 8000c16:	4b29      	ldr	r3, [pc, #164]	; (8000cbc <key_press+0xac>)
 8000c18:	1d3c      	adds	r4, r7, #4
 8000c1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 0)
 8000c20:	2101      	movs	r1, #1
 8000c22:	4827      	ldr	r0, [pc, #156]	; (8000cc0 <key_press+0xb0>)
 8000c24:	f001 f84c 	bl	8001cc0 <HAL_GPIO_ReadPin>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d10a      	bne.n	8000c44 <key_press+0x34>
	{
		clm_var = check_clm(GPIO_PIN_0);
 8000c2e:	2001      	movs	r0, #1
 8000c30:	f7ff ff8c 	bl	8000b4c <check_clm>
 8000c34:	6178      	str	r0, [r7, #20]
		return key_arr[0][clm_var-1];
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	3318      	adds	r3, #24
 8000c3c:	443b      	add	r3, r7
 8000c3e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000c42:	e036      	b.n	8000cb2 <key_press+0xa2>
	}
	else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 0)
 8000c44:	2102      	movs	r1, #2
 8000c46:	481e      	ldr	r0, [pc, #120]	; (8000cc0 <key_press+0xb0>)
 8000c48:	f001 f83a 	bl	8001cc0 <HAL_GPIO_ReadPin>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d10a      	bne.n	8000c68 <key_press+0x58>
	{
		clm_var = check_clm(GPIO_PIN_1);
 8000c52:	2002      	movs	r0, #2
 8000c54:	f7ff ff7a 	bl	8000b4c <check_clm>
 8000c58:	6178      	str	r0, [r7, #20]
		return key_arr[1][clm_var-1];
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	3b01      	subs	r3, #1
 8000c5e:	3318      	adds	r3, #24
 8000c60:	443b      	add	r3, r7
 8000c62:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000c66:	e024      	b.n	8000cb2 <key_press+0xa2>
	}
	else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 0)
 8000c68:	2104      	movs	r1, #4
 8000c6a:	4815      	ldr	r0, [pc, #84]	; (8000cc0 <key_press+0xb0>)
 8000c6c:	f001 f828 	bl	8001cc0 <HAL_GPIO_ReadPin>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d10a      	bne.n	8000c8c <key_press+0x7c>
	{
		clm_var = check_clm(GPIO_PIN_2);
 8000c76:	2004      	movs	r0, #4
 8000c78:	f7ff ff68 	bl	8000b4c <check_clm>
 8000c7c:	6178      	str	r0, [r7, #20]
		return key_arr[2][clm_var-1];
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	3b01      	subs	r3, #1
 8000c82:	3318      	adds	r3, #24
 8000c84:	443b      	add	r3, r7
 8000c86:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000c8a:	e012      	b.n	8000cb2 <key_press+0xa2>
	}
	else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == 0)
 8000c8c:	2108      	movs	r1, #8
 8000c8e:	480c      	ldr	r0, [pc, #48]	; (8000cc0 <key_press+0xb0>)
 8000c90:	f001 f816 	bl	8001cc0 <HAL_GPIO_ReadPin>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d10a      	bne.n	8000cb0 <key_press+0xa0>
	{
		clm_var = check_clm(GPIO_PIN_3);
 8000c9a:	2008      	movs	r0, #8
 8000c9c:	f7ff ff56 	bl	8000b4c <check_clm>
 8000ca0:	6178      	str	r0, [r7, #20]
		return key_arr[3][clm_var-1];
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	3318      	adds	r3, #24
 8000ca8:	443b      	add	r3, r7
 8000caa:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000cae:	e000      	b.n	8000cb2 <key_press+0xa2>
	}
	else
		return '\0';
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	371c      	adds	r7, #28
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd90      	pop	{r4, r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	08003784 	.word	0x08003784
 8000cc0:	40020400 	.word	0x40020400

08000cc4 <so_sanh>:
char PW[11]; //Mang de luu mat khau khi nhap tu ban phim
char MK[6] = {'2','2','2','3','3','3'}; //Mang MK cua nguoi dung
int i = 0; //Tang chi so cho mang PW

int so_sanh(char a[],char b[],int n,int m)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b087      	sub	sp, #28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
 8000cd0:	603b      	str	r3, [r7, #0]
	if(n > m || n < m)
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	dc03      	bgt.n	8000ce2 <so_sanh+0x1e>
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	da01      	bge.n	8000ce6 <so_sanh+0x22>
		return 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e015      	b.n	8000d12 <so_sanh+0x4e>
	else
	{
		for(int j=0;j<6;j++)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	e00e      	b.n	8000d0a <so_sanh+0x46>
		{
			if(a[j] != b[j]) return 0;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	781a      	ldrb	r2, [r3, #0]
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	68b9      	ldr	r1, [r7, #8]
 8000cf8:	440b      	add	r3, r1
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d001      	beq.n	8000d04 <so_sanh+0x40>
 8000d00:	2300      	movs	r3, #0
 8000d02:	e006      	b.n	8000d12 <so_sanh+0x4e>
		for(int j=0;j<6;j++)
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	3301      	adds	r3, #1
 8000d08:	617b      	str	r3, [r7, #20]
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	2b05      	cmp	r3, #5
 8000d0e:	dded      	ble.n	8000cec <so_sanh+0x28>
		}
		return 1;
 8000d10:	2301      	movs	r3, #1
	}
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	371c      	adds	r7, #28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
	...

08000d20 <ktao>:

void ktao()
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
	for(int j=0;j<11;j++) PW[j] = 'z';
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	e007      	b.n	8000d3c <ktao+0x1c>
 8000d2c:	4a08      	ldr	r2, [pc, #32]	; (8000d50 <ktao+0x30>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	227a      	movs	r2, #122	; 0x7a
 8000d34:	701a      	strb	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b0a      	cmp	r3, #10
 8000d40:	ddf4      	ble.n	8000d2c <ktao+0xc>
}
 8000d42:	bf00      	nop
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	2000018c 	.word	0x2000018c

08000d54 <Disp_pass_key>:

void Disp_pass_key(char key_var)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
	if(key_var != '\0')
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d023      	beq.n	8000dac <Disp_pass_key+0x58>
	{
		if(key_var == 'D'){
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	2b44      	cmp	r3, #68	; 0x44
 8000d68:	d11c      	bne.n	8000da4 <Disp_pass_key+0x50>
			CLCD_SetCursor(&LCD1, 0, 1);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4811      	ldr	r0, [pc, #68]	; (8000db4 <Disp_pass_key+0x60>)
 8000d70:	f7ff fe26 	bl	80009c0 <CLCD_SetCursor>
			for(int k = 0;k<i;k++)
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	e006      	b.n	8000d88 <Disp_pass_key+0x34>
			{
				CLCD_WriteChar(&LCD1,' ');
 8000d7a:	2120      	movs	r1, #32
 8000d7c:	480d      	ldr	r0, [pc, #52]	; (8000db4 <Disp_pass_key+0x60>)
 8000d7e:	f7ff fe67 	bl	8000a50 <CLCD_WriteChar>
			for(int k = 0;k<i;k++)
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	3301      	adds	r3, #1
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <Disp_pass_key+0x64>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	68fa      	ldr	r2, [r7, #12]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	dbf3      	blt.n	8000d7a <Disp_pass_key+0x26>
			}
			CLCD_SetCursor(&LCD1, 0, 1);
 8000d92:	2201      	movs	r2, #1
 8000d94:	2100      	movs	r1, #0
 8000d96:	4807      	ldr	r0, [pc, #28]	; (8000db4 <Disp_pass_key+0x60>)
 8000d98:	f7ff fe12 	bl	80009c0 <CLCD_SetCursor>
			i = 0;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <Disp_pass_key+0x64>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
		}
		else{
			CLCD_WriteChar(&LCD1,'*');
		}
	}
}
 8000da2:	e003      	b.n	8000dac <Disp_pass_key+0x58>
			CLCD_WriteChar(&LCD1,'*');
 8000da4:	212a      	movs	r1, #42	; 0x2a
 8000da6:	4803      	ldr	r0, [pc, #12]	; (8000db4 <Disp_pass_key+0x60>)
 8000da8:	f7ff fe52 	bl	8000a50 <CLCD_WriteChar>
}
 8000dac:	bf00      	nop
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000124 	.word	0x20000124
 8000db8:	20000198 	.word	0x20000198

08000dbc <check>:

void check(char key_var,int *cnt){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	71fb      	strb	r3, [r7, #7]
	if(key_var != '\0')
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f000 80ac 	beq.w	8000f28 <check+0x16c>
	{
		if(key_var >= '0' && key_var <= '9')
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	2b2f      	cmp	r3, #47	; 0x2f
 8000dd4:	d90c      	bls.n	8000df0 <check+0x34>
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	2b39      	cmp	r3, #57	; 0x39
 8000dda:	d809      	bhi.n	8000df0 <check+0x34>
		{
			PW[i] = key_var;
 8000ddc:	4b54      	ldr	r3, [pc, #336]	; (8000f30 <check+0x174>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4954      	ldr	r1, [pc, #336]	; (8000f34 <check+0x178>)
 8000de2:	79fa      	ldrb	r2, [r7, #7]
 8000de4:	54ca      	strb	r2, [r1, r3]
			i++;
 8000de6:	4b52      	ldr	r3, [pc, #328]	; (8000f30 <check+0x174>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	3301      	adds	r3, #1
 8000dec:	4a50      	ldr	r2, [pc, #320]	; (8000f30 <check+0x174>)
 8000dee:	6013      	str	r3, [r2, #0]
		}
		if(key_var == '*')
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	2b2a      	cmp	r3, #42	; 0x2a
 8000df4:	f040 8098 	bne.w	8000f28 <check+0x16c>
		{
			if(so_sanh(PW,MK,i,6) == 1)
 8000df8:	4b4d      	ldr	r3, [pc, #308]	; (8000f30 <check+0x174>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	2306      	movs	r3, #6
 8000dfe:	494e      	ldr	r1, [pc, #312]	; (8000f38 <check+0x17c>)
 8000e00:	484c      	ldr	r0, [pc, #304]	; (8000f34 <check+0x178>)
 8000e02:	f7ff ff5f 	bl	8000cc4 <so_sanh>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d150      	bne.n	8000eae <check+0xf2>
			{
				CLCD_Clear(&LCD1);
 8000e0c:	484b      	ldr	r0, [pc, #300]	; (8000f3c <check+0x180>)
 8000e0e:	f7ff fe55 	bl	8000abc <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	4849      	ldr	r0, [pc, #292]	; (8000f3c <check+0x180>)
 8000e18:	f7ff fdd2 	bl	80009c0 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "DA MO KHOA!");
 8000e1c:	4948      	ldr	r1, [pc, #288]	; (8000f40 <check+0x184>)
 8000e1e:	4847      	ldr	r0, [pc, #284]	; (8000f3c <check+0x180>)
 8000e20:	f7ff fe35 	bl	8000a8e <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8000e24:	2201      	movs	r2, #1
 8000e26:	2100      	movs	r1, #0
 8000e28:	4844      	ldr	r0, [pc, #272]	; (8000f3c <check+0x180>)
 8000e2a:	f7ff fdc9 	bl	80009c0 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "OPENED!");
 8000e2e:	4945      	ldr	r1, [pc, #276]	; (8000f44 <check+0x188>)
 8000e30:	4842      	ldr	r0, [pc, #264]	; (8000f3c <check+0x180>)
 8000e32:	f7ff fe2c 	bl	8000a8e <CLCD_WriteString>
				HAL_Delay(1000);
 8000e36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e3a:	f000 fc87 	bl	800174c <HAL_Delay>
				CLCD_Clear(&LCD1);
 8000e3e:	483f      	ldr	r0, [pc, #252]	; (8000f3c <check+0x180>)
 8000e40:	f7ff fe3c 	bl	8000abc <CLCD_Clear>
				CLCD_WriteString(&LCD1, "XIN CHAO!!!");
 8000e44:	4940      	ldr	r1, [pc, #256]	; (8000f48 <check+0x18c>)
 8000e46:	483d      	ldr	r0, [pc, #244]	; (8000f3c <check+0x180>)
 8000e48:	f7ff fe21 	bl	8000a8e <CLCD_WriteString>
				ktao();
 8000e4c:	f7ff ff68 	bl	8000d20 <ktao>
				i = 0;
 8000e50:	4b37      	ldr	r3, [pc, #220]	; (8000f30 <check+0x174>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
				HAL_Delay(5000);
 8000e56:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e5a:	f000 fc77 	bl	800174c <HAL_Delay>
				//Sao khi da mo khoa thanh cong
				CLCD_Clear(&LCD1);
 8000e5e:	4837      	ldr	r0, [pc, #220]	; (8000f3c <check+0x180>)
 8000e60:	f7ff fe2c 	bl	8000abc <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2100      	movs	r1, #0
 8000e68:	4834      	ldr	r0, [pc, #208]	; (8000f3c <check+0x180>)
 8000e6a:	f7ff fda9 	bl	80009c0 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "!!!WELCOME!!!");
 8000e6e:	4937      	ldr	r1, [pc, #220]	; (8000f4c <check+0x190>)
 8000e70:	4832      	ldr	r0, [pc, #200]	; (8000f3c <check+0x180>)
 8000e72:	f7ff fe0c 	bl	8000a8e <CLCD_WriteString>
				HAL_Delay(1000);
 8000e76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e7a:	f000 fc67 	bl	800174c <HAL_Delay>
				CLCD_Clear(&LCD1);
 8000e7e:	482f      	ldr	r0, [pc, #188]	; (8000f3c <check+0x180>)
 8000e80:	f7ff fe1c 	bl	8000abc <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2100      	movs	r1, #0
 8000e88:	482c      	ldr	r0, [pc, #176]	; (8000f3c <check+0x180>)
 8000e8a:	f7ff fd99 	bl	80009c0 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "ENTER PASSWORD:");
 8000e8e:	4930      	ldr	r1, [pc, #192]	; (8000f50 <check+0x194>)
 8000e90:	482a      	ldr	r0, [pc, #168]	; (8000f3c <check+0x180>)
 8000e92:	f7ff fdfc 	bl	8000a8e <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8000e96:	2201      	movs	r2, #1
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4828      	ldr	r0, [pc, #160]	; (8000f3c <check+0x180>)
 8000e9c:	f7ff fd90 	bl	80009c0 <CLCD_SetCursor>
				CLCD_CursorOn(&LCD1);
 8000ea0:	4826      	ldr	r0, [pc, #152]	; (8000f3c <check+0x180>)
 8000ea2:	f7ff fe29 	bl	8000af8 <CLCD_CursorOn>
				*cnt = 0;
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
				return;
 8000eac:	e03c      	b.n	8000f28 <check+0x16c>
			}
			else
			{
				*cnt += 1;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	1c5a      	adds	r2, r3, #1
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	601a      	str	r2, [r3, #0]
				CLCD_Clear(&LCD1);
 8000eb8:	4820      	ldr	r0, [pc, #128]	; (8000f3c <check+0x180>)
 8000eba:	f7ff fdff 	bl	8000abc <CLCD_Clear>
				CLCD_WriteString(&LCD1, "INCORRECT!");
 8000ebe:	4925      	ldr	r1, [pc, #148]	; (8000f54 <check+0x198>)
 8000ec0:	481e      	ldr	r0, [pc, #120]	; (8000f3c <check+0x180>)
 8000ec2:	f7ff fde4 	bl	8000a8e <CLCD_WriteString>
				ktao();
 8000ec6:	f7ff ff2b 	bl	8000d20 <ktao>
				sprintf(LCD_send, " Dem:%d", *cnt);
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	4921      	ldr	r1, [pc, #132]	; (8000f58 <check+0x19c>)
 8000ed2:	4822      	ldr	r0, [pc, #136]	; (8000f5c <check+0x1a0>)
 8000ed4:	f001 ffdc 	bl	8002e90 <siprintf>
				CLCD_WriteString(&LCD1, LCD_send);
 8000ed8:	4920      	ldr	r1, [pc, #128]	; (8000f5c <check+0x1a0>)
 8000eda:	4818      	ldr	r0, [pc, #96]	; (8000f3c <check+0x180>)
 8000edc:	f7ff fdd7 	bl	8000a8e <CLCD_WriteString>
				if(*cnt == 3)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b03      	cmp	r3, #3
 8000ee6:	d108      	bne.n	8000efa <check+0x13e>
				{
					CLCD_SetCursor(&LCD1, 0, 1);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	2100      	movs	r1, #0
 8000eec:	4813      	ldr	r0, [pc, #76]	; (8000f3c <check+0x180>)
 8000eee:	f7ff fd67 	bl	80009c0 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "CANH BAO MUC 3");
 8000ef2:	491b      	ldr	r1, [pc, #108]	; (8000f60 <check+0x1a4>)
 8000ef4:	4811      	ldr	r0, [pc, #68]	; (8000f3c <check+0x180>)
 8000ef6:	f7ff fdca 	bl	8000a8e <CLCD_WriteString>
				}
				i = 0;
 8000efa:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <check+0x174>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
				HAL_Delay(1000);
 8000f00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f04:	f000 fc22 	bl	800174c <HAL_Delay>
				if(*cnt < 3){
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	dc0b      	bgt.n	8000f28 <check+0x16c>
					CLCD_Clear(&LCD1);
 8000f10:	480a      	ldr	r0, [pc, #40]	; (8000f3c <check+0x180>)
 8000f12:	f7ff fdd3 	bl	8000abc <CLCD_Clear>
					CLCD_WriteString(&LCD1, "ENTER AGAIN:");
 8000f16:	4913      	ldr	r1, [pc, #76]	; (8000f64 <check+0x1a8>)
 8000f18:	4808      	ldr	r0, [pc, #32]	; (8000f3c <check+0x180>)
 8000f1a:	f7ff fdb8 	bl	8000a8e <CLCD_WriteString>
					CLCD_SetCursor(&LCD1, 0, 1);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	2100      	movs	r1, #0
 8000f22:	4806      	ldr	r0, [pc, #24]	; (8000f3c <check+0x180>)
 8000f24:	f7ff fd4c 	bl	80009c0 <CLCD_SetCursor>
				}
			}
		}
	}
}
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000198 	.word	0x20000198
 8000f34:	2000018c 	.word	0x2000018c
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	20000124 	.word	0x20000124
 8000f40:	08003794 	.word	0x08003794
 8000f44:	080037a0 	.word	0x080037a0
 8000f48:	080037a8 	.word	0x080037a8
 8000f4c:	080037b4 	.word	0x080037b4
 8000f50:	080037c4 	.word	0x080037c4
 8000f54:	080037d4 	.word	0x080037d4
 8000f58:	080037e0 	.word	0x080037e0
 8000f5c:	2000017c 	.word	0x2000017c
 8000f60:	080037e8 	.word	0x080037e8
 8000f64:	080037f8 	.word	0x080037f8

08000f68 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000f70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f74:	4803      	ldr	r0, [pc, #12]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000f76:	f000 fed4 	bl	8001d22 <HAL_GPIO_TogglePin>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40020800 	.word	0x40020800

08000f88 <main>:


int main(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08e      	sub	sp, #56	; 0x38
 8000f8c:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE BEGIN 1 */
	char var1; //luu ky tu tuong ung tren KeyPAD
	int cnt = 0; //Dem xem so lan da nhap mat khau sai
 8000f8e:	2300      	movs	r3, #0
 8000f90:	603b      	str	r3, [r7, #0]



  HAL_Init();
 8000f92:	f000 fb69 	bl	8001668 <HAL_Init>


  SystemClock_Config();
 8000f96:	f000 f8d1 	bl	800113c <SystemClock_Config>


  MX_GPIO_Init();
 8000f9a:	f000 f9c9 	bl	8001330 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f9e:	f000 f92d 	bl	80011fc <MX_TIM2_Init>
  MX_TIM4_Init();
 8000fa2:	f000 f977 	bl	8001294 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start_IT(&htim2);
 8000fa6:	485c      	ldr	r0, [pc, #368]	; (8001118 <main+0x190>)
 8000fa8:	f001 fb4a 	bl	8002640 <HAL_TIM_Base_Start_IT>
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	210f      	movs	r1, #15
 8000fb0:	485a      	ldr	r0, [pc, #360]	; (800111c <main+0x194>)
 8000fb2:	f000 fe9d 	bl	8001cf0 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	21f0      	movs	r1, #240	; 0xf0
 8000fba:	4858      	ldr	r0, [pc, #352]	; (800111c <main+0x194>)
 8000fbc:	f000 fe98 	bl	8001cf0 <HAL_GPIO_WritePin>
  	CLCD_4BIT_Init(&LCD1, 16, 2, CS_GPIO_Port, CS_Pin, EN_GPIO_Port, EN_Pin,
 8000fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc4:	930a      	str	r3, [sp, #40]	; 0x28
 8000fc6:	4b56      	ldr	r3, [pc, #344]	; (8001120 <main+0x198>)
 8000fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8000fca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fce:	9308      	str	r3, [sp, #32]
 8000fd0:	4b53      	ldr	r3, [pc, #332]	; (8001120 <main+0x198>)
 8000fd2:	9307      	str	r3, [sp, #28]
 8000fd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fd8:	9306      	str	r3, [sp, #24]
 8000fda:	4b51      	ldr	r3, [pc, #324]	; (8001120 <main+0x198>)
 8000fdc:	9305      	str	r3, [sp, #20]
 8000fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fe2:	9304      	str	r3, [sp, #16]
 8000fe4:	4b4d      	ldr	r3, [pc, #308]	; (800111c <main+0x194>)
 8000fe6:	9303      	str	r3, [sp, #12]
 8000fe8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fec:	9302      	str	r3, [sp, #8]
 8000fee:	4b4c      	ldr	r3, [pc, #304]	; (8001120 <main+0x198>)
 8000ff0:	9301      	str	r3, [sp, #4]
 8000ff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	4b49      	ldr	r3, [pc, #292]	; (8001120 <main+0x198>)
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	2110      	movs	r1, #16
 8000ffe:	4849      	ldr	r0, [pc, #292]	; (8001124 <main+0x19c>)
 8001000:	f7ff fc4b 	bl	800089a <CLCD_4BIT_Init>
  										D4_GPIO_Port, D4_Pin, D5_GPIO_Port, D5_Pin,
  										D6_GPIO_Port, D6_Pin, D7_GPIO_Port, D7_Pin);
  	CLCD_SetCursor(&LCD1, 0, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	2100      	movs	r1, #0
 8001008:	4846      	ldr	r0, [pc, #280]	; (8001124 <main+0x19c>)
 800100a:	f7ff fcd9 	bl	80009c0 <CLCD_SetCursor>
  	CLCD_WriteString(&LCD1, "WELCOME!!!");
 800100e:	4946      	ldr	r1, [pc, #280]	; (8001128 <main+0x1a0>)
 8001010:	4844      	ldr	r0, [pc, #272]	; (8001124 <main+0x19c>)
 8001012:	f7ff fd3c 	bl	8000a8e <CLCD_WriteString>
  	HAL_Delay(2000);
 8001016:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800101a:	f000 fb97 	bl	800174c <HAL_Delay>
  	CLCD_Clear(&LCD1);
 800101e:	4841      	ldr	r0, [pc, #260]	; (8001124 <main+0x19c>)
 8001020:	f7ff fd4c 	bl	8000abc <CLCD_Clear>
  	CLCD_SetCursor(&LCD1, 0, 0);
 8001024:	2200      	movs	r2, #0
 8001026:	2100      	movs	r1, #0
 8001028:	483e      	ldr	r0, [pc, #248]	; (8001124 <main+0x19c>)
 800102a:	f7ff fcc9 	bl	80009c0 <CLCD_SetCursor>
  	CLCD_WriteString(&LCD1, "ENTER PASSWORD:");
 800102e:	493f      	ldr	r1, [pc, #252]	; (800112c <main+0x1a4>)
 8001030:	483c      	ldr	r0, [pc, #240]	; (8001124 <main+0x19c>)
 8001032:	f7ff fd2c 	bl	8000a8e <CLCD_WriteString>
  	CLCD_SetCursor(&LCD1, 0, 1);
 8001036:	2201      	movs	r2, #1
 8001038:	2100      	movs	r1, #0
 800103a:	483a      	ldr	r0, [pc, #232]	; (8001124 <main+0x19c>)
 800103c:	f7ff fcc0 	bl	80009c0 <CLCD_SetCursor>
  	CLCD_CursorOn(&LCD1);
 8001040:	4838      	ldr	r0, [pc, #224]	; (8001124 <main+0x19c>)
 8001042:	f7ff fd59 	bl	8000af8 <CLCD_CursorOn>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  var1 = key_press();
 8001046:	f7ff fde3 	bl	8000c10 <key_press>
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	  	Disp_pass_key(var1);
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fe7f 	bl	8000d54 <Disp_pass_key>
	  	check(var1,&cnt);
 8001056:	463a      	mov	r2, r7
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	4611      	mov	r1, r2
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fead 	bl	8000dbc <check>
	  	if(cnt == 3)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	2b03      	cmp	r3, #3
 8001066:	d152      	bne.n	800110e <main+0x186>
	  	{
	  		HAL_Delay(500);
 8001068:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800106c:	f000 fb6e 	bl	800174c <HAL_Delay>
	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8001070:	2201      	movs	r2, #1
 8001072:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001076:	482e      	ldr	r0, [pc, #184]	; (8001130 <main+0x1a8>)
 8001078:	f000 fe3a 	bl	8001cf0 <HAL_GPIO_WritePin>
	  		HAL_Delay(3000);
 800107c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001080:	f000 fb64 	bl	800174c <HAL_Delay>
	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800108a:	4829      	ldr	r0, [pc, #164]	; (8001130 <main+0x1a8>)
 800108c:	f000 fe30 	bl	8001cf0 <HAL_GPIO_WritePin>
	  		CLCD_Clear(&LCD1);
 8001090:	4824      	ldr	r0, [pc, #144]	; (8001124 <main+0x19c>)
 8001092:	f7ff fd13 	bl	8000abc <CLCD_Clear>
	  		CLCD_SetCursor(&LCD1, 0, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2100      	movs	r1, #0
 800109a:	4822      	ldr	r0, [pc, #136]	; (8001124 <main+0x19c>)
 800109c:	f7ff fc90 	bl	80009c0 <CLCD_SetCursor>
	  		CLCD_WriteString(&LCD1, "CO KE DOT NHAP!");
 80010a0:	4924      	ldr	r1, [pc, #144]	; (8001134 <main+0x1ac>)
 80010a2:	4820      	ldr	r0, [pc, #128]	; (8001124 <main+0x19c>)
 80010a4:	f7ff fcf3 	bl	8000a8e <CLCD_WriteString>
	  		CLCD_SetCursor(&LCD1, 0, 1);
 80010a8:	2201      	movs	r2, #1
 80010aa:	2100      	movs	r1, #0
 80010ac:	481d      	ldr	r0, [pc, #116]	; (8001124 <main+0x19c>)
 80010ae:	f7ff fc87 	bl	80009c0 <CLCD_SetCursor>
	  		CLCD_WriteString(&LCD1, "WARNING!!!");
 80010b2:	4921      	ldr	r1, [pc, #132]	; (8001138 <main+0x1b0>)
 80010b4:	481b      	ldr	r0, [pc, #108]	; (8001124 <main+0x19c>)
 80010b6:	f7ff fcea 	bl	8000a8e <CLCD_WriteString>
	  		HAL_Delay(2000);
 80010ba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010be:	f000 fb45 	bl	800174c <HAL_Delay>
	  		//Sau khi thong bao co ke dot nhap:
	  		CLCD_Clear(&LCD1);
 80010c2:	4818      	ldr	r0, [pc, #96]	; (8001124 <main+0x19c>)
 80010c4:	f7ff fcfa 	bl	8000abc <CLCD_Clear>
	  		CLCD_SetCursor(&LCD1, 0, 0);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2100      	movs	r1, #0
 80010cc:	4815      	ldr	r0, [pc, #84]	; (8001124 <main+0x19c>)
 80010ce:	f7ff fc77 	bl	80009c0 <CLCD_SetCursor>
	  		CLCD_WriteString(&LCD1, "WELCOME!!!");
 80010d2:	4915      	ldr	r1, [pc, #84]	; (8001128 <main+0x1a0>)
 80010d4:	4813      	ldr	r0, [pc, #76]	; (8001124 <main+0x19c>)
 80010d6:	f7ff fcda 	bl	8000a8e <CLCD_WriteString>
	  	  	HAL_Delay(2000);
 80010da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010de:	f000 fb35 	bl	800174c <HAL_Delay>
	  		CLCD_Clear(&LCD1);
 80010e2:	4810      	ldr	r0, [pc, #64]	; (8001124 <main+0x19c>)
 80010e4:	f7ff fcea 	bl	8000abc <CLCD_Clear>
	  		CLCD_SetCursor(&LCD1, 0, 0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2100      	movs	r1, #0
 80010ec:	480d      	ldr	r0, [pc, #52]	; (8001124 <main+0x19c>)
 80010ee:	f7ff fc67 	bl	80009c0 <CLCD_SetCursor>
	  		CLCD_WriteString(&LCD1, "ENTER PASSWORD:");
 80010f2:	490e      	ldr	r1, [pc, #56]	; (800112c <main+0x1a4>)
 80010f4:	480b      	ldr	r0, [pc, #44]	; (8001124 <main+0x19c>)
 80010f6:	f7ff fcca 	bl	8000a8e <CLCD_WriteString>
	  		CLCD_SetCursor(&LCD1, 0, 1);
 80010fa:	2201      	movs	r2, #1
 80010fc:	2100      	movs	r1, #0
 80010fe:	4809      	ldr	r0, [pc, #36]	; (8001124 <main+0x19c>)
 8001100:	f7ff fc5e 	bl	80009c0 <CLCD_SetCursor>
	  		CLCD_CursorOn(&LCD1);
 8001104:	4807      	ldr	r0, [pc, #28]	; (8001124 <main+0x19c>)
 8001106:	f7ff fcf7 	bl	8000af8 <CLCD_CursorOn>
	  		cnt = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	603b      	str	r3, [r7, #0]
	  	}
	  	HAL_Delay(175);
 800110e:	20af      	movs	r0, #175	; 0xaf
 8001110:	f000 fb1c 	bl	800174c <HAL_Delay>
	  var1 = key_press();
 8001114:	e797      	b.n	8001046 <main+0xbe>
 8001116:	bf00      	nop
 8001118:	20000094 	.word	0x20000094
 800111c:	40020400 	.word	0x40020400
 8001120:	40020000 	.word	0x40020000
 8001124:	20000124 	.word	0x20000124
 8001128:	08003808 	.word	0x08003808
 800112c:	080037c4 	.word	0x080037c4
 8001130:	40020800 	.word	0x40020800
 8001134:	08003814 	.word	0x08003814
 8001138:	08003824 	.word	0x08003824

0800113c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b094      	sub	sp, #80	; 0x50
 8001140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001142:	f107 0320 	add.w	r3, r7, #32
 8001146:	2230      	movs	r2, #48	; 0x30
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f001 fe98 	bl	8002e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <SystemClock_Config+0xb8>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	4a22      	ldr	r2, [pc, #136]	; (80011f4 <SystemClock_Config+0xb8>)
 800116a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116e:	6413      	str	r3, [r2, #64]	; 0x40
 8001170:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <SystemClock_Config+0xb8>)
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800117c:	2300      	movs	r3, #0
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <SystemClock_Config+0xbc>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001188:	4a1b      	ldr	r2, [pc, #108]	; (80011f8 <SystemClock_Config+0xbc>)
 800118a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <SystemClock_Config+0xbc>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800119c:	2302      	movs	r3, #2
 800119e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a0:	2301      	movs	r3, #1
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a4:	2310      	movs	r3, #16
 80011a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ac:	f107 0320 	add.w	r3, r7, #32
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 fdd1 	bl	8001d58 <HAL_RCC_OscConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80011bc:	f000 f944 	bl	8001448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c0:	230f      	movs	r3, #15
 80011c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011c4:	2300      	movs	r3, #0
 80011c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011d4:	f107 030c 	add.w	r3, r7, #12
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f001 f834 	bl	8002248 <HAL_RCC_ClockConfig>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <SystemClock_Config+0xae>
  {
    Error_Handler();
 80011e6:	f000 f92f 	bl	8001448 <Error_Handler>
  }
}
 80011ea:	bf00      	nop
 80011ec:	3750      	adds	r7, #80	; 0x50
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40007000 	.word	0x40007000

080011fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001202:	f107 0308 	add.w	r3, r7, #8
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001210:	463b      	mov	r3, r7
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001218:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <MX_TIM2_Init+0x94>)
 800121a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800121e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000;
 8001220:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <MX_TIM2_Init+0x94>)
 8001222:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001226:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001228:	4b19      	ldr	r3, [pc, #100]	; (8001290 <MX_TIM2_Init+0x94>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 149;
 800122e:	4b18      	ldr	r3, [pc, #96]	; (8001290 <MX_TIM2_Init+0x94>)
 8001230:	2295      	movs	r2, #149	; 0x95
 8001232:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001234:	4b16      	ldr	r3, [pc, #88]	; (8001290 <MX_TIM2_Init+0x94>)
 8001236:	2200      	movs	r2, #0
 8001238:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800123a:	4b15      	ldr	r3, [pc, #84]	; (8001290 <MX_TIM2_Init+0x94>)
 800123c:	2280      	movs	r2, #128	; 0x80
 800123e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001240:	4813      	ldr	r0, [pc, #76]	; (8001290 <MX_TIM2_Init+0x94>)
 8001242:	f001 f9ad 	bl	80025a0 <HAL_TIM_Base_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800124c:	f000 f8fc 	bl	8001448 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001254:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001256:	f107 0308 	add.w	r3, r7, #8
 800125a:	4619      	mov	r1, r3
 800125c:	480c      	ldr	r0, [pc, #48]	; (8001290 <MX_TIM2_Init+0x94>)
 800125e:	f001 fb59 	bl	8002914 <HAL_TIM_ConfigClockSource>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001268:	f000 f8ee 	bl	8001448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126c:	2300      	movs	r3, #0
 800126e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001270:	2300      	movs	r3, #0
 8001272:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001274:	463b      	mov	r3, r7
 8001276:	4619      	mov	r1, r3
 8001278:	4805      	ldr	r0, [pc, #20]	; (8001290 <MX_TIM2_Init+0x94>)
 800127a:	f001 fd55 	bl	8002d28 <HAL_TIMEx_MasterConfigSynchronization>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001284:	f000 f8e0 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001288:	bf00      	nop
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000094 	.word	0x20000094

08001294 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800129a:	f107 0308 	add.w	r3, r7, #8
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a8:	463b      	mov	r3, r7
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012b0:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <MX_TIM4_Init+0x94>)
 80012b2:	4a1e      	ldr	r2, [pc, #120]	; (800132c <MX_TIM4_Init+0x98>)
 80012b4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16000;
 80012b6:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <MX_TIM4_Init+0x94>)
 80012b8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80012bc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012be:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <MX_TIM4_Init+0x94>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 80012c4:	4b18      	ldr	r3, [pc, #96]	; (8001328 <MX_TIM4_Init+0x94>)
 80012c6:	22c7      	movs	r2, #199	; 0xc7
 80012c8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ca:	4b17      	ldr	r3, [pc, #92]	; (8001328 <MX_TIM4_Init+0x94>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012d0:	4b15      	ldr	r3, [pc, #84]	; (8001328 <MX_TIM4_Init+0x94>)
 80012d2:	2280      	movs	r2, #128	; 0x80
 80012d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80012d6:	4814      	ldr	r0, [pc, #80]	; (8001328 <MX_TIM4_Init+0x94>)
 80012d8:	f001 f962 	bl	80025a0 <HAL_TIM_Base_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80012e2:	f000 f8b1 	bl	8001448 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80012ec:	f107 0308 	add.w	r3, r7, #8
 80012f0:	4619      	mov	r1, r3
 80012f2:	480d      	ldr	r0, [pc, #52]	; (8001328 <MX_TIM4_Init+0x94>)
 80012f4:	f001 fb0e 	bl	8002914 <HAL_TIM_ConfigClockSource>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80012fe:	f000 f8a3 	bl	8001448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001302:	2300      	movs	r3, #0
 8001304:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001306:	2300      	movs	r3, #0
 8001308:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800130a:	463b      	mov	r3, r7
 800130c:	4619      	mov	r1, r3
 800130e:	4806      	ldr	r0, [pc, #24]	; (8001328 <MX_TIM4_Init+0x94>)
 8001310:	f001 fd0a 	bl	8002d28 <HAL_TIMEx_MasterConfigSynchronization>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800131a:	f000 f895 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800131e:	bf00      	nop
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200000dc 	.word	0x200000dc
 800132c:	40000800 	.word	0x40000800

08001330 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001336:	f107 030c 	add.w	r3, r7, #12
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
 8001344:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	4b3b      	ldr	r3, [pc, #236]	; (8001438 <MX_GPIO_Init+0x108>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a3a      	ldr	r2, [pc, #232]	; (8001438 <MX_GPIO_Init+0x108>)
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b38      	ldr	r3, [pc, #224]	; (8001438 <MX_GPIO_Init+0x108>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	4b34      	ldr	r3, [pc, #208]	; (8001438 <MX_GPIO_Init+0x108>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a33      	ldr	r2, [pc, #204]	; (8001438 <MX_GPIO_Init+0x108>)
 800136c:	f043 0302 	orr.w	r3, r3, #2
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b31      	ldr	r3, [pc, #196]	; (8001438 <MX_GPIO_Init+0x108>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	603b      	str	r3, [r7, #0]
 8001382:	4b2d      	ldr	r3, [pc, #180]	; (8001438 <MX_GPIO_Init+0x108>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a2c      	ldr	r2, [pc, #176]	; (8001438 <MX_GPIO_Init+0x108>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b2a      	ldr	r3, [pc, #168]	; (8001438 <MX_GPIO_Init+0x108>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	603b      	str	r3, [r7, #0]
 8001398:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_12, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80013a0:	4826      	ldr	r0, [pc, #152]	; (800143c <MX_GPIO_Init+0x10c>)
 80013a2:	f000 fca5 	bl	8001cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80013a6:	2200      	movs	r2, #0
 80013a8:	f248 01f0 	movw	r1, #33008	; 0x80f0
 80013ac:	4824      	ldr	r0, [pc, #144]	; (8001440 <MX_GPIO_Init+0x110>)
 80013ae:	f000 fc9f 	bl	8001cf0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80013b2:	2200      	movs	r2, #0
 80013b4:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80013b8:	4822      	ldr	r0, [pc, #136]	; (8001444 <MX_GPIO_Init+0x114>)
 80013ba:	f000 fc99 	bl	8001cf0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 80013be:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80013c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c4:	2301      	movs	r3, #1
 80013c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d0:	f107 030c 	add.w	r3, r7, #12
 80013d4:	4619      	mov	r1, r3
 80013d6:	4819      	ldr	r0, [pc, #100]	; (800143c <MX_GPIO_Init+0x10c>)
 80013d8:	f000 faee 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80013dc:	230f      	movs	r3, #15
 80013de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e0:	2300      	movs	r3, #0
 80013e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	4619      	mov	r1, r3
 80013ee:	4814      	ldr	r0, [pc, #80]	; (8001440 <MX_GPIO_Init+0x110>)
 80013f0:	f000 fae2 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80013f4:	f248 03f0 	movw	r3, #33008	; 0x80f0
 80013f8:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fa:	2301      	movs	r3, #1
 80013fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	2300      	movs	r3, #0
 8001404:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001406:	f107 030c 	add.w	r3, r7, #12
 800140a:	4619      	mov	r1, r3
 800140c:	480c      	ldr	r0, [pc, #48]	; (8001440 <MX_GPIO_Init+0x110>)
 800140e:	f000 fad3 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001412:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001416:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001418:	2301      	movs	r3, #1
 800141a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001420:	2300      	movs	r3, #0
 8001422:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	4619      	mov	r1, r3
 800142a:	4806      	ldr	r0, [pc, #24]	; (8001444 <MX_GPIO_Init+0x114>)
 800142c:	f000 fac4 	bl	80019b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001430:	bf00      	nop
 8001432:	3720      	adds	r7, #32
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40023800 	.word	0x40023800
 800143c:	40020800 	.word	0x40020800
 8001440:	40020400 	.word	0x40020400
 8001444:	40020000 	.word	0x40020000

08001448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800144c:	b672      	cpsid	i
}
 800144e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001450:	e7fe      	b.n	8001450 <Error_Handler+0x8>
	...

08001454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <HAL_MspInit+0x4c>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	4a0f      	ldr	r2, [pc, #60]	; (80014a0 <HAL_MspInit+0x4c>)
 8001464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001468:	6453      	str	r3, [r2, #68]	; 0x44
 800146a:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <HAL_MspInit+0x4c>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	603b      	str	r3, [r7, #0]
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <HAL_MspInit+0x4c>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	4a08      	ldr	r2, [pc, #32]	; (80014a0 <HAL_MspInit+0x4c>)
 8001480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001484:	6413      	str	r3, [r2, #64]	; 0x40
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_MspInit+0x4c>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800

080014a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014b4:	d116      	bne.n	80014e4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	4b16      	ldr	r3, [pc, #88]	; (8001514 <HAL_TIM_Base_MspInit+0x70>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	4a15      	ldr	r2, [pc, #84]	; (8001514 <HAL_TIM_Base_MspInit+0x70>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6413      	str	r3, [r2, #64]	; 0x40
 80014c6:	4b13      	ldr	r3, [pc, #76]	; (8001514 <HAL_TIM_Base_MspInit+0x70>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2100      	movs	r1, #0
 80014d6:	201c      	movs	r0, #28
 80014d8:	f000 fa37 	bl	800194a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014dc:	201c      	movs	r0, #28
 80014de:	f000 fa50 	bl	8001982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80014e2:	e012      	b.n	800150a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <HAL_TIM_Base_MspInit+0x74>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d10d      	bne.n	800150a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <HAL_TIM_Base_MspInit+0x70>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	4a07      	ldr	r2, [pc, #28]	; (8001514 <HAL_TIM_Base_MspInit+0x70>)
 80014f8:	f043 0304 	orr.w	r3, r3, #4
 80014fc:	6413      	str	r3, [r2, #64]	; 0x40
 80014fe:	4b05      	ldr	r3, [pc, #20]	; (8001514 <HAL_TIM_Base_MspInit+0x70>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f003 0304 	and.w	r3, r3, #4
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
}
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800
 8001518:	40000800 	.word	0x40000800

0800151c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001520:	e7fe      	b.n	8001520 <NMI_Handler+0x4>

08001522 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001526:	e7fe      	b.n	8001526 <HardFault_Handler+0x4>

08001528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800152c:	e7fe      	b.n	800152c <MemManage_Handler+0x4>

0800152e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001532:	e7fe      	b.n	8001532 <BusFault_Handler+0x4>

08001534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001538:	e7fe      	b.n	8001538 <UsageFault_Handler+0x4>

0800153a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001568:	f000 f8d0 	bl	800170c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}

08001570 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001574:	4802      	ldr	r0, [pc, #8]	; (8001580 <TIM2_IRQHandler+0x10>)
 8001576:	f001 f8c5 	bl	8002704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000094 	.word	0x20000094

08001584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800158c:	4a14      	ldr	r2, [pc, #80]	; (80015e0 <_sbrk+0x5c>)
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <_sbrk+0x60>)
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <_sbrk+0x64>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d102      	bne.n	80015a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <_sbrk+0x64>)
 80015a2:	4a12      	ldr	r2, [pc, #72]	; (80015ec <_sbrk+0x68>)
 80015a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <_sbrk+0x64>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d207      	bcs.n	80015c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b4:	f001 fc3a 	bl	8002e2c <__errno>
 80015b8:	4603      	mov	r3, r0
 80015ba:	220c      	movs	r2, #12
 80015bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
 80015c2:	e009      	b.n	80015d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <_sbrk+0x64>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ca:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <_sbrk+0x64>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <_sbrk+0x64>)
 80015d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015d6:	68fb      	ldr	r3, [r7, #12]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20018000 	.word	0x20018000
 80015e4:	00000400 	.word	0x00000400
 80015e8:	2000019c 	.word	0x2000019c
 80015ec:	200001b8 	.word	0x200001b8

080015f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <SystemInit+0x20>)
 80015f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015fa:	4a05      	ldr	r2, [pc, #20]	; (8001610 <SystemInit+0x20>)
 80015fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001600:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001614:	f8df d034 	ldr.w	sp, [pc, #52]	; 800164c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001618:	480d      	ldr	r0, [pc, #52]	; (8001650 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800161a:	490e      	ldr	r1, [pc, #56]	; (8001654 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800161c:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001620:	e002      	b.n	8001628 <LoopCopyDataInit>

08001622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001626:	3304      	adds	r3, #4

08001628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800162c:	d3f9      	bcc.n	8001622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162e:	4a0b      	ldr	r2, [pc, #44]	; (800165c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001630:	4c0b      	ldr	r4, [pc, #44]	; (8001660 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001634:	e001      	b.n	800163a <LoopFillZerobss>

08001636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001638:	3204      	adds	r2, #4

0800163a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800163c:	d3fb      	bcc.n	8001636 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800163e:	f7ff ffd7 	bl	80015f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001642:	f001 fbf9 	bl	8002e38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001646:	f7ff fc9f 	bl	8000f88 <main>
  bx  lr    
 800164a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800164c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001654:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001658:	08003884 	.word	0x08003884
  ldr r2, =_sbss
 800165c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001660:	200001b4 	.word	0x200001b4

08001664 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001664:	e7fe      	b.n	8001664 <ADC_IRQHandler>
	...

08001668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800166c:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <HAL_Init+0x40>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a0d      	ldr	r2, [pc, #52]	; (80016a8 <HAL_Init+0x40>)
 8001672:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001676:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <HAL_Init+0x40>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <HAL_Init+0x40>)
 800167e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001682:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <HAL_Init+0x40>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a07      	ldr	r2, [pc, #28]	; (80016a8 <HAL_Init+0x40>)
 800168a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001690:	2003      	movs	r0, #3
 8001692:	f000 f94f 	bl	8001934 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001696:	200f      	movs	r0, #15
 8001698:	f000 f808 	bl	80016ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800169c:	f7ff feda 	bl	8001454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40023c00 	.word	0x40023c00

080016ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_InitTick+0x54>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_InitTick+0x58>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	4619      	mov	r1, r3
 80016be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 f967 	bl	800199e <HAL_SYSTICK_Config>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e00e      	b.n	80016f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b0f      	cmp	r3, #15
 80016de:	d80a      	bhi.n	80016f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e0:	2200      	movs	r2, #0
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	f04f 30ff 	mov.w	r0, #4294967295
 80016e8:	f000 f92f 	bl	800194a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016ec:	4a06      	ldr	r2, [pc, #24]	; (8001708 <HAL_InitTick+0x5c>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	e000      	b.n	80016f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000008 	.word	0x20000008
 8001704:	20000010 	.word	0x20000010
 8001708:	2000000c 	.word	0x2000000c

0800170c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_IncTick+0x20>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_IncTick+0x24>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4413      	add	r3, r2
 800171c:	4a04      	ldr	r2, [pc, #16]	; (8001730 <HAL_IncTick+0x24>)
 800171e:	6013      	str	r3, [r2, #0]
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	20000010 	.word	0x20000010
 8001730:	200001a0 	.word	0x200001a0

08001734 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return uwTick;
 8001738:	4b03      	ldr	r3, [pc, #12]	; (8001748 <HAL_GetTick+0x14>)
 800173a:	681b      	ldr	r3, [r3, #0]
}
 800173c:	4618      	mov	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	200001a0 	.word	0x200001a0

0800174c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001754:	f7ff ffee 	bl	8001734 <HAL_GetTick>
 8001758:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001764:	d005      	beq.n	8001772 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001766:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <HAL_Delay+0x44>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4413      	add	r3, r2
 8001770:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001772:	bf00      	nop
 8001774:	f7ff ffde 	bl	8001734 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	429a      	cmp	r2, r3
 8001782:	d8f7      	bhi.n	8001774 <HAL_Delay+0x28>
  {
  }
}
 8001784:	bf00      	nop
 8001786:	bf00      	nop
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000010 	.word	0x20000010

08001794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b0:	4013      	ands	r3, r2
 80017b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c6:	4a04      	ldr	r2, [pc, #16]	; (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	60d3      	str	r3, [r2, #12]
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <__NVIC_GetPriorityGrouping+0x18>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	f003 0307 	and.w	r3, r3, #7
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	2b00      	cmp	r3, #0
 8001808:	db0b      	blt.n	8001822 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	f003 021f 	and.w	r2, r3, #31
 8001810:	4907      	ldr	r1, [pc, #28]	; (8001830 <__NVIC_EnableIRQ+0x38>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	095b      	lsrs	r3, r3, #5
 8001818:	2001      	movs	r0, #1
 800181a:	fa00 f202 	lsl.w	r2, r0, r2
 800181e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000e100 	.word	0xe000e100

08001834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	6039      	str	r1, [r7, #0]
 800183e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001844:	2b00      	cmp	r3, #0
 8001846:	db0a      	blt.n	800185e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	b2da      	uxtb	r2, r3
 800184c:	490c      	ldr	r1, [pc, #48]	; (8001880 <__NVIC_SetPriority+0x4c>)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	0112      	lsls	r2, r2, #4
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	440b      	add	r3, r1
 8001858:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800185c:	e00a      	b.n	8001874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4908      	ldr	r1, [pc, #32]	; (8001884 <__NVIC_SetPriority+0x50>)
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	3b04      	subs	r3, #4
 800186c:	0112      	lsls	r2, r2, #4
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	440b      	add	r3, r1
 8001872:	761a      	strb	r2, [r3, #24]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000e100 	.word	0xe000e100
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001888:	b480      	push	{r7}
 800188a:	b089      	sub	sp, #36	; 0x24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f1c3 0307 	rsb	r3, r3, #7
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	bf28      	it	cs
 80018a6:	2304      	movcs	r3, #4
 80018a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3304      	adds	r3, #4
 80018ae:	2b06      	cmp	r3, #6
 80018b0:	d902      	bls.n	80018b8 <NVIC_EncodePriority+0x30>
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3b03      	subs	r3, #3
 80018b6:	e000      	b.n	80018ba <NVIC_EncodePriority+0x32>
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	f04f 32ff 	mov.w	r2, #4294967295
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43da      	mvns	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	401a      	ands	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d0:	f04f 31ff 	mov.w	r1, #4294967295
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	fa01 f303 	lsl.w	r3, r1, r3
 80018da:	43d9      	mvns	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	4313      	orrs	r3, r2
         );
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3724      	adds	r7, #36	; 0x24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
	...

080018f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001900:	d301      	bcc.n	8001906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001902:	2301      	movs	r3, #1
 8001904:	e00f      	b.n	8001926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001906:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <SysTick_Config+0x40>)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190e:	210f      	movs	r1, #15
 8001910:	f04f 30ff 	mov.w	r0, #4294967295
 8001914:	f7ff ff8e 	bl	8001834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <SysTick_Config+0x40>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191e:	4b04      	ldr	r3, [pc, #16]	; (8001930 <SysTick_Config+0x40>)
 8001920:	2207      	movs	r2, #7
 8001922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	e000e010 	.word	0xe000e010

08001934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff ff29 	bl	8001794 <__NVIC_SetPriorityGrouping>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800194a:	b580      	push	{r7, lr}
 800194c:	b086      	sub	sp, #24
 800194e:	af00      	add	r7, sp, #0
 8001950:	4603      	mov	r3, r0
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
 8001956:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800195c:	f7ff ff3e 	bl	80017dc <__NVIC_GetPriorityGrouping>
 8001960:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	68b9      	ldr	r1, [r7, #8]
 8001966:	6978      	ldr	r0, [r7, #20]
 8001968:	f7ff ff8e 	bl	8001888 <NVIC_EncodePriority>
 800196c:	4602      	mov	r2, r0
 800196e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001972:	4611      	mov	r1, r2
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff5d 	bl	8001834 <__NVIC_SetPriority>
}
 800197a:	bf00      	nop
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	4603      	mov	r3, r0
 800198a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff31 	bl	80017f8 <__NVIC_EnableIRQ>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff ffa2 	bl	80018f0 <SysTick_Config>
 80019ac:	4603      	mov	r3, r0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b089      	sub	sp, #36	; 0x24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
 80019d2:	e159      	b.n	8001c88 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019d4:	2201      	movs	r2, #1
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	f040 8148 	bne.w	8001c82 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d005      	beq.n	8001a0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d130      	bne.n	8001a6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	2203      	movs	r2, #3
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	68da      	ldr	r2, [r3, #12]
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a40:	2201      	movs	r2, #1
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	091b      	lsrs	r3, r3, #4
 8001a56:	f003 0201 	and.w	r2, r3, #1
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d017      	beq.n	8001aa8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	2203      	movs	r2, #3
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d123      	bne.n	8001afc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	08da      	lsrs	r2, r3, #3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3208      	adds	r2, #8
 8001abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	220f      	movs	r2, #15
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	691a      	ldr	r2, [r3, #16]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	08da      	lsrs	r2, r3, #3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3208      	adds	r2, #8
 8001af6:	69b9      	ldr	r1, [r7, #24]
 8001af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	2203      	movs	r2, #3
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0203 	and.w	r2, r3, #3
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 80a2 	beq.w	8001c82 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	4b57      	ldr	r3, [pc, #348]	; (8001ca0 <HAL_GPIO_Init+0x2e8>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	4a56      	ldr	r2, [pc, #344]	; (8001ca0 <HAL_GPIO_Init+0x2e8>)
 8001b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4e:	4b54      	ldr	r3, [pc, #336]	; (8001ca0 <HAL_GPIO_Init+0x2e8>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b5a:	4a52      	ldr	r2, [pc, #328]	; (8001ca4 <HAL_GPIO_Init+0x2ec>)
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	089b      	lsrs	r3, r3, #2
 8001b60:	3302      	adds	r3, #2
 8001b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	220f      	movs	r2, #15
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a49      	ldr	r2, [pc, #292]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d019      	beq.n	8001bba <HAL_GPIO_Init+0x202>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a48      	ldr	r2, [pc, #288]	; (8001cac <HAL_GPIO_Init+0x2f4>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d013      	beq.n	8001bb6 <HAL_GPIO_Init+0x1fe>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a47      	ldr	r2, [pc, #284]	; (8001cb0 <HAL_GPIO_Init+0x2f8>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d00d      	beq.n	8001bb2 <HAL_GPIO_Init+0x1fa>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a46      	ldr	r2, [pc, #280]	; (8001cb4 <HAL_GPIO_Init+0x2fc>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d007      	beq.n	8001bae <HAL_GPIO_Init+0x1f6>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a45      	ldr	r2, [pc, #276]	; (8001cb8 <HAL_GPIO_Init+0x300>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d101      	bne.n	8001baa <HAL_GPIO_Init+0x1f2>
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	e008      	b.n	8001bbc <HAL_GPIO_Init+0x204>
 8001baa:	2307      	movs	r3, #7
 8001bac:	e006      	b.n	8001bbc <HAL_GPIO_Init+0x204>
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e004      	b.n	8001bbc <HAL_GPIO_Init+0x204>
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e002      	b.n	8001bbc <HAL_GPIO_Init+0x204>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <HAL_GPIO_Init+0x204>
 8001bba:	2300      	movs	r3, #0
 8001bbc:	69fa      	ldr	r2, [r7, #28]
 8001bbe:	f002 0203 	and.w	r2, r2, #3
 8001bc2:	0092      	lsls	r2, r2, #2
 8001bc4:	4093      	lsls	r3, r2
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bcc:	4935      	ldr	r1, [pc, #212]	; (8001ca4 <HAL_GPIO_Init+0x2ec>)
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	089b      	lsrs	r3, r3, #2
 8001bd2:	3302      	adds	r3, #2
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bda:	4b38      	ldr	r3, [pc, #224]	; (8001cbc <HAL_GPIO_Init+0x304>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	43db      	mvns	r3, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bfe:	4a2f      	ldr	r2, [pc, #188]	; (8001cbc <HAL_GPIO_Init+0x304>)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c04:	4b2d      	ldr	r3, [pc, #180]	; (8001cbc <HAL_GPIO_Init+0x304>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c28:	4a24      	ldr	r2, [pc, #144]	; (8001cbc <HAL_GPIO_Init+0x304>)
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c2e:	4b23      	ldr	r3, [pc, #140]	; (8001cbc <HAL_GPIO_Init+0x304>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c52:	4a1a      	ldr	r2, [pc, #104]	; (8001cbc <HAL_GPIO_Init+0x304>)
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c58:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <HAL_GPIO_Init+0x304>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	43db      	mvns	r3, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c7c:	4a0f      	ldr	r2, [pc, #60]	; (8001cbc <HAL_GPIO_Init+0x304>)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3301      	adds	r3, #1
 8001c86:	61fb      	str	r3, [r7, #28]
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	2b0f      	cmp	r3, #15
 8001c8c:	f67f aea2 	bls.w	80019d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c90:	bf00      	nop
 8001c92:	bf00      	nop
 8001c94:	3724      	adds	r7, #36	; 0x24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40013800 	.word	0x40013800
 8001ca8:	40020000 	.word	0x40020000
 8001cac:	40020400 	.word	0x40020400
 8001cb0:	40020800 	.word	0x40020800
 8001cb4:	40020c00 	.word	0x40020c00
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40013c00 	.word	0x40013c00

08001cc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691a      	ldr	r2, [r3, #16]
 8001cd0:	887b      	ldrh	r3, [r7, #2]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d002      	beq.n	8001cde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	73fb      	strb	r3, [r7, #15]
 8001cdc:	e001      	b.n	8001ce2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	807b      	strh	r3, [r7, #2]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d00:	787b      	ldrb	r3, [r7, #1]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d06:	887a      	ldrh	r2, [r7, #2]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d0c:	e003      	b.n	8001d16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d0e:	887b      	ldrh	r3, [r7, #2]
 8001d10:	041a      	lsls	r2, r3, #16
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	619a      	str	r2, [r3, #24]
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b085      	sub	sp, #20
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d34:	887a      	ldrh	r2, [r7, #2]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	041a      	lsls	r2, r3, #16
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	43d9      	mvns	r1, r3
 8001d40:	887b      	ldrh	r3, [r7, #2]
 8001d42:	400b      	ands	r3, r1
 8001d44:	431a      	orrs	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	619a      	str	r2, [r3, #24]
}
 8001d4a:	bf00      	nop
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
	...

08001d58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e267      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d075      	beq.n	8001e62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d76:	4b88      	ldr	r3, [pc, #544]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d00c      	beq.n	8001d9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d82:	4b85      	ldr	r3, [pc, #532]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	d112      	bne.n	8001db4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d8e:	4b82      	ldr	r3, [pc, #520]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d9a:	d10b      	bne.n	8001db4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d9c:	4b7e      	ldr	r3, [pc, #504]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d05b      	beq.n	8001e60 <HAL_RCC_OscConfig+0x108>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d157      	bne.n	8001e60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e242      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dbc:	d106      	bne.n	8001dcc <HAL_RCC_OscConfig+0x74>
 8001dbe:	4b76      	ldr	r3, [pc, #472]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a75      	ldr	r2, [pc, #468]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	e01d      	b.n	8001e08 <HAL_RCC_OscConfig+0xb0>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dd4:	d10c      	bne.n	8001df0 <HAL_RCC_OscConfig+0x98>
 8001dd6:	4b70      	ldr	r3, [pc, #448]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a6f      	ldr	r2, [pc, #444]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001ddc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	4b6d      	ldr	r3, [pc, #436]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a6c      	ldr	r2, [pc, #432]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	e00b      	b.n	8001e08 <HAL_RCC_OscConfig+0xb0>
 8001df0:	4b69      	ldr	r3, [pc, #420]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a68      	ldr	r2, [pc, #416]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dfa:	6013      	str	r3, [r2, #0]
 8001dfc:	4b66      	ldr	r3, [pc, #408]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a65      	ldr	r2, [pc, #404]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d013      	beq.n	8001e38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e10:	f7ff fc90 	bl	8001734 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e18:	f7ff fc8c 	bl	8001734 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b64      	cmp	r3, #100	; 0x64
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e207      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2a:	4b5b      	ldr	r3, [pc, #364]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <HAL_RCC_OscConfig+0xc0>
 8001e36:	e014      	b.n	8001e62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e38:	f7ff fc7c 	bl	8001734 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e40:	f7ff fc78 	bl	8001734 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b64      	cmp	r3, #100	; 0x64
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e1f3      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e52:	4b51      	ldr	r3, [pc, #324]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0xe8>
 8001e5e:	e000      	b.n	8001e62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d063      	beq.n	8001f36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e6e:	4b4a      	ldr	r3, [pc, #296]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00b      	beq.n	8001e92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e7a:	4b47      	ldr	r3, [pc, #284]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d11c      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e86:	4b44      	ldr	r3, [pc, #272]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d116      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e92:	4b41      	ldr	r3, [pc, #260]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d005      	beq.n	8001eaa <HAL_RCC_OscConfig+0x152>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d001      	beq.n	8001eaa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e1c7      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eaa:	4b3b      	ldr	r3, [pc, #236]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	4937      	ldr	r1, [pc, #220]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ebe:	e03a      	b.n	8001f36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d020      	beq.n	8001f0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ec8:	4b34      	ldr	r3, [pc, #208]	; (8001f9c <HAL_RCC_OscConfig+0x244>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ece:	f7ff fc31 	bl	8001734 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ed6:	f7ff fc2d 	bl	8001734 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e1a8      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee8:	4b2b      	ldr	r3, [pc, #172]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0f0      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef4:	4b28      	ldr	r3, [pc, #160]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	4925      	ldr	r1, [pc, #148]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	600b      	str	r3, [r1, #0]
 8001f08:	e015      	b.n	8001f36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f0a:	4b24      	ldr	r3, [pc, #144]	; (8001f9c <HAL_RCC_OscConfig+0x244>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f10:	f7ff fc10 	bl	8001734 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f18:	f7ff fc0c 	bl	8001734 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e187      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f2a:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d036      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d016      	beq.n	8001f78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f4a:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <HAL_RCC_OscConfig+0x248>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f50:	f7ff fbf0 	bl	8001734 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f58:	f7ff fbec 	bl	8001734 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e167      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f6a:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0x200>
 8001f76:	e01b      	b.n	8001fb0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f78:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <HAL_RCC_OscConfig+0x248>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7e:	f7ff fbd9 	bl	8001734 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f84:	e00e      	b.n	8001fa4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f86:	f7ff fbd5 	bl	8001734 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d907      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e150      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	42470000 	.word	0x42470000
 8001fa0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fa4:	4b88      	ldr	r3, [pc, #544]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8001fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1ea      	bne.n	8001f86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 8097 	beq.w	80020ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fc2:	4b81      	ldr	r3, [pc, #516]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10f      	bne.n	8001fee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	4b7d      	ldr	r3, [pc, #500]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	4a7c      	ldr	r2, [pc, #496]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8001fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fde:	4b7a      	ldr	r3, [pc, #488]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fea:	2301      	movs	r3, #1
 8001fec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fee:	4b77      	ldr	r3, [pc, #476]	; (80021cc <HAL_RCC_OscConfig+0x474>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d118      	bne.n	800202c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ffa:	4b74      	ldr	r3, [pc, #464]	; (80021cc <HAL_RCC_OscConfig+0x474>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a73      	ldr	r2, [pc, #460]	; (80021cc <HAL_RCC_OscConfig+0x474>)
 8002000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002006:	f7ff fb95 	bl	8001734 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800200e:	f7ff fb91 	bl	8001734 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e10c      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002020:	4b6a      	ldr	r3, [pc, #424]	; (80021cc <HAL_RCC_OscConfig+0x474>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0f0      	beq.n	800200e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d106      	bne.n	8002042 <HAL_RCC_OscConfig+0x2ea>
 8002034:	4b64      	ldr	r3, [pc, #400]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002038:	4a63      	ldr	r2, [pc, #396]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	6713      	str	r3, [r2, #112]	; 0x70
 8002040:	e01c      	b.n	800207c <HAL_RCC_OscConfig+0x324>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	2b05      	cmp	r3, #5
 8002048:	d10c      	bne.n	8002064 <HAL_RCC_OscConfig+0x30c>
 800204a:	4b5f      	ldr	r3, [pc, #380]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 800204c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204e:	4a5e      	ldr	r2, [pc, #376]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002050:	f043 0304 	orr.w	r3, r3, #4
 8002054:	6713      	str	r3, [r2, #112]	; 0x70
 8002056:	4b5c      	ldr	r3, [pc, #368]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205a:	4a5b      	ldr	r2, [pc, #364]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	6713      	str	r3, [r2, #112]	; 0x70
 8002062:	e00b      	b.n	800207c <HAL_RCC_OscConfig+0x324>
 8002064:	4b58      	ldr	r3, [pc, #352]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002068:	4a57      	ldr	r2, [pc, #348]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 800206a:	f023 0301 	bic.w	r3, r3, #1
 800206e:	6713      	str	r3, [r2, #112]	; 0x70
 8002070:	4b55      	ldr	r3, [pc, #340]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002074:	4a54      	ldr	r2, [pc, #336]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002076:	f023 0304 	bic.w	r3, r3, #4
 800207a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d015      	beq.n	80020b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002084:	f7ff fb56 	bl	8001734 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800208a:	e00a      	b.n	80020a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800208c:	f7ff fb52 	bl	8001734 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	f241 3288 	movw	r2, #5000	; 0x1388
 800209a:	4293      	cmp	r3, r2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e0cb      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a2:	4b49      	ldr	r3, [pc, #292]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 80020a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0ee      	beq.n	800208c <HAL_RCC_OscConfig+0x334>
 80020ae:	e014      	b.n	80020da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b0:	f7ff fb40 	bl	8001734 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b6:	e00a      	b.n	80020ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020b8:	f7ff fb3c 	bl	8001734 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e0b5      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ce:	4b3e      	ldr	r3, [pc, #248]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 80020d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1ee      	bne.n	80020b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020da:	7dfb      	ldrb	r3, [r7, #23]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d105      	bne.n	80020ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e0:	4b39      	ldr	r3, [pc, #228]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	4a38      	ldr	r2, [pc, #224]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 80020e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 80a1 	beq.w	8002238 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020f6:	4b34      	ldr	r3, [pc, #208]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 030c 	and.w	r3, r3, #12
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d05c      	beq.n	80021bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	2b02      	cmp	r3, #2
 8002108:	d141      	bne.n	800218e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210a:	4b31      	ldr	r3, [pc, #196]	; (80021d0 <HAL_RCC_OscConfig+0x478>)
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002110:	f7ff fb10 	bl	8001734 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002118:	f7ff fb0c 	bl	8001734 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e087      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800212a:	4b27      	ldr	r3, [pc, #156]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69da      	ldr	r2, [r3, #28]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	019b      	lsls	r3, r3, #6
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214c:	085b      	lsrs	r3, r3, #1
 800214e:	3b01      	subs	r3, #1
 8002150:	041b      	lsls	r3, r3, #16
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002158:	061b      	lsls	r3, r3, #24
 800215a:	491b      	ldr	r1, [pc, #108]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 800215c:	4313      	orrs	r3, r2
 800215e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002160:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <HAL_RCC_OscConfig+0x478>)
 8002162:	2201      	movs	r2, #1
 8002164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002166:	f7ff fae5 	bl	8001734 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800216e:	f7ff fae1 	bl	8001734 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e05c      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x416>
 800218c:	e054      	b.n	8002238 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800218e:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <HAL_RCC_OscConfig+0x478>)
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002194:	f7ff face 	bl	8001734 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800219c:	f7ff faca 	bl	8001734 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e045      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ae:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x444>
 80021ba:	e03d      	b.n	8002238 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d107      	bne.n	80021d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e038      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40007000 	.word	0x40007000
 80021d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021d4:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <HAL_RCC_OscConfig+0x4ec>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d028      	beq.n	8002234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d121      	bne.n	8002234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d11a      	bne.n	8002234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002204:	4013      	ands	r3, r2
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800220a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800220c:	4293      	cmp	r3, r2
 800220e:	d111      	bne.n	8002234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221a:	085b      	lsrs	r3, r3, #1
 800221c:	3b01      	subs	r3, #1
 800221e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002220:	429a      	cmp	r2, r3
 8002222:	d107      	bne.n	8002234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002230:	429a      	cmp	r2, r3
 8002232:	d001      	beq.n	8002238 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e000      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40023800 	.word	0x40023800

08002248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e0cc      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800225c:	4b68      	ldr	r3, [pc, #416]	; (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d90c      	bls.n	8002284 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226a:	4b65      	ldr	r3, [pc, #404]	; (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002272:	4b63      	ldr	r3, [pc, #396]	; (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0b8      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d020      	beq.n	80022d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d005      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800229c:	4b59      	ldr	r3, [pc, #356]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	4a58      	ldr	r2, [pc, #352]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0308 	and.w	r3, r3, #8
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022b4:	4b53      	ldr	r3, [pc, #332]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	4a52      	ldr	r2, [pc, #328]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022c0:	4b50      	ldr	r3, [pc, #320]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	494d      	ldr	r1, [pc, #308]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d044      	beq.n	8002368 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d107      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e6:	4b47      	ldr	r3, [pc, #284]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d119      	bne.n	8002326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e07f      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d003      	beq.n	8002306 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002302:	2b03      	cmp	r3, #3
 8002304:	d107      	bne.n	8002316 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002306:	4b3f      	ldr	r3, [pc, #252]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d109      	bne.n	8002326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e06f      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002316:	4b3b      	ldr	r3, [pc, #236]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e067      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002326:	4b37      	ldr	r3, [pc, #220]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f023 0203 	bic.w	r2, r3, #3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	4934      	ldr	r1, [pc, #208]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 8002334:	4313      	orrs	r3, r2
 8002336:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002338:	f7ff f9fc 	bl	8001734 <HAL_GetTick>
 800233c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233e:	e00a      	b.n	8002356 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002340:	f7ff f9f8 	bl	8001734 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f241 3288 	movw	r2, #5000	; 0x1388
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e04f      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002356:	4b2b      	ldr	r3, [pc, #172]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 020c 	and.w	r2, r3, #12
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	429a      	cmp	r2, r3
 8002366:	d1eb      	bne.n	8002340 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002368:	4b25      	ldr	r3, [pc, #148]	; (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d20c      	bcs.n	8002390 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002376:	4b22      	ldr	r3, [pc, #136]	; (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800237e:	4b20      	ldr	r3, [pc, #128]	; (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	429a      	cmp	r2, r3
 800238a:	d001      	beq.n	8002390 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e032      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800239c:	4b19      	ldr	r3, [pc, #100]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4916      	ldr	r1, [pc, #88]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d009      	beq.n	80023ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ba:	4b12      	ldr	r3, [pc, #72]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	490e      	ldr	r1, [pc, #56]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023ce:	f000 f821 	bl	8002414 <HAL_RCC_GetSysClockFreq>
 80023d2:	4602      	mov	r2, r0
 80023d4:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	091b      	lsrs	r3, r3, #4
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	490a      	ldr	r1, [pc, #40]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 80023e0:	5ccb      	ldrb	r3, [r1, r3]
 80023e2:	fa22 f303 	lsr.w	r3, r2, r3
 80023e6:	4a09      	ldr	r2, [pc, #36]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80023e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023ea:	4b09      	ldr	r3, [pc, #36]	; (8002410 <HAL_RCC_ClockConfig+0x1c8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff f95c 	bl	80016ac <HAL_InitTick>

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40023c00 	.word	0x40023c00
 8002404:	40023800 	.word	0x40023800
 8002408:	08003830 	.word	0x08003830
 800240c:	20000008 	.word	0x20000008
 8002410:	2000000c 	.word	0x2000000c

08002414 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002418:	b090      	sub	sp, #64	; 0x40
 800241a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	637b      	str	r3, [r7, #52]	; 0x34
 8002420:	2300      	movs	r3, #0
 8002422:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002424:	2300      	movs	r3, #0
 8002426:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800242c:	4b59      	ldr	r3, [pc, #356]	; (8002594 <HAL_RCC_GetSysClockFreq+0x180>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 030c 	and.w	r3, r3, #12
 8002434:	2b08      	cmp	r3, #8
 8002436:	d00d      	beq.n	8002454 <HAL_RCC_GetSysClockFreq+0x40>
 8002438:	2b08      	cmp	r3, #8
 800243a:	f200 80a1 	bhi.w	8002580 <HAL_RCC_GetSysClockFreq+0x16c>
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <HAL_RCC_GetSysClockFreq+0x34>
 8002442:	2b04      	cmp	r3, #4
 8002444:	d003      	beq.n	800244e <HAL_RCC_GetSysClockFreq+0x3a>
 8002446:	e09b      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002448:	4b53      	ldr	r3, [pc, #332]	; (8002598 <HAL_RCC_GetSysClockFreq+0x184>)
 800244a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800244c:	e09b      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800244e:	4b53      	ldr	r3, [pc, #332]	; (800259c <HAL_RCC_GetSysClockFreq+0x188>)
 8002450:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002452:	e098      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002454:	4b4f      	ldr	r3, [pc, #316]	; (8002594 <HAL_RCC_GetSysClockFreq+0x180>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800245c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800245e:	4b4d      	ldr	r3, [pc, #308]	; (8002594 <HAL_RCC_GetSysClockFreq+0x180>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d028      	beq.n	80024bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800246a:	4b4a      	ldr	r3, [pc, #296]	; (8002594 <HAL_RCC_GetSysClockFreq+0x180>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	099b      	lsrs	r3, r3, #6
 8002470:	2200      	movs	r2, #0
 8002472:	623b      	str	r3, [r7, #32]
 8002474:	627a      	str	r2, [r7, #36]	; 0x24
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800247c:	2100      	movs	r1, #0
 800247e:	4b47      	ldr	r3, [pc, #284]	; (800259c <HAL_RCC_GetSysClockFreq+0x188>)
 8002480:	fb03 f201 	mul.w	r2, r3, r1
 8002484:	2300      	movs	r3, #0
 8002486:	fb00 f303 	mul.w	r3, r0, r3
 800248a:	4413      	add	r3, r2
 800248c:	4a43      	ldr	r2, [pc, #268]	; (800259c <HAL_RCC_GetSysClockFreq+0x188>)
 800248e:	fba0 1202 	umull	r1, r2, r0, r2
 8002492:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002494:	460a      	mov	r2, r1
 8002496:	62ba      	str	r2, [r7, #40]	; 0x28
 8002498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800249a:	4413      	add	r3, r2
 800249c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800249e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024a0:	2200      	movs	r2, #0
 80024a2:	61bb      	str	r3, [r7, #24]
 80024a4:	61fa      	str	r2, [r7, #28]
 80024a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024ae:	f7fd fee7 	bl	8000280 <__aeabi_uldivmod>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	4613      	mov	r3, r2
 80024b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024ba:	e053      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024bc:	4b35      	ldr	r3, [pc, #212]	; (8002594 <HAL_RCC_GetSysClockFreq+0x180>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	099b      	lsrs	r3, r3, #6
 80024c2:	2200      	movs	r2, #0
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	617a      	str	r2, [r7, #20]
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80024ce:	f04f 0b00 	mov.w	fp, #0
 80024d2:	4652      	mov	r2, sl
 80024d4:	465b      	mov	r3, fp
 80024d6:	f04f 0000 	mov.w	r0, #0
 80024da:	f04f 0100 	mov.w	r1, #0
 80024de:	0159      	lsls	r1, r3, #5
 80024e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024e4:	0150      	lsls	r0, r2, #5
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	ebb2 080a 	subs.w	r8, r2, sl
 80024ee:	eb63 090b 	sbc.w	r9, r3, fp
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	f04f 0300 	mov.w	r3, #0
 80024fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80024fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002502:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002506:	ebb2 0408 	subs.w	r4, r2, r8
 800250a:	eb63 0509 	sbc.w	r5, r3, r9
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	f04f 0300 	mov.w	r3, #0
 8002516:	00eb      	lsls	r3, r5, #3
 8002518:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800251c:	00e2      	lsls	r2, r4, #3
 800251e:	4614      	mov	r4, r2
 8002520:	461d      	mov	r5, r3
 8002522:	eb14 030a 	adds.w	r3, r4, sl
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	eb45 030b 	adc.w	r3, r5, fp
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	e9d7 4500 	ldrd	r4, r5, [r7]
 800253a:	4629      	mov	r1, r5
 800253c:	028b      	lsls	r3, r1, #10
 800253e:	4621      	mov	r1, r4
 8002540:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002544:	4621      	mov	r1, r4
 8002546:	028a      	lsls	r2, r1, #10
 8002548:	4610      	mov	r0, r2
 800254a:	4619      	mov	r1, r3
 800254c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800254e:	2200      	movs	r2, #0
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	60fa      	str	r2, [r7, #12]
 8002554:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002558:	f7fd fe92 	bl	8000280 <__aeabi_uldivmod>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4613      	mov	r3, r2
 8002562:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_RCC_GetSysClockFreq+0x180>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	0c1b      	lsrs	r3, r3, #16
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	3301      	adds	r3, #1
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002574:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002578:	fbb2 f3f3 	udiv	r3, r2, r3
 800257c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800257e:	e002      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <HAL_RCC_GetSysClockFreq+0x184>)
 8002582:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002584:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002588:	4618      	mov	r0, r3
 800258a:	3740      	adds	r7, #64	; 0x40
 800258c:	46bd      	mov	sp, r7
 800258e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002592:	bf00      	nop
 8002594:	40023800 	.word	0x40023800
 8002598:	00f42400 	.word	0x00f42400
 800259c:	017d7840 	.word	0x017d7840

080025a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e041      	b.n	8002636 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d106      	bne.n	80025cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7fe ff6c 	bl	80014a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2202      	movs	r2, #2
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3304      	adds	r3, #4
 80025dc:	4619      	mov	r1, r3
 80025de:	4610      	mov	r0, r2
 80025e0:	f000 fa88 	bl	8002af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b01      	cmp	r3, #1
 8002652:	d001      	beq.n	8002658 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e044      	b.n	80026e2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2202      	movs	r2, #2
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f042 0201 	orr.w	r2, r2, #1
 800266e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a1e      	ldr	r2, [pc, #120]	; (80026f0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d018      	beq.n	80026ac <HAL_TIM_Base_Start_IT+0x6c>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002682:	d013      	beq.n	80026ac <HAL_TIM_Base_Start_IT+0x6c>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a1a      	ldr	r2, [pc, #104]	; (80026f4 <HAL_TIM_Base_Start_IT+0xb4>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d00e      	beq.n	80026ac <HAL_TIM_Base_Start_IT+0x6c>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a19      	ldr	r2, [pc, #100]	; (80026f8 <HAL_TIM_Base_Start_IT+0xb8>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d009      	beq.n	80026ac <HAL_TIM_Base_Start_IT+0x6c>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a17      	ldr	r2, [pc, #92]	; (80026fc <HAL_TIM_Base_Start_IT+0xbc>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d004      	beq.n	80026ac <HAL_TIM_Base_Start_IT+0x6c>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a16      	ldr	r2, [pc, #88]	; (8002700 <HAL_TIM_Base_Start_IT+0xc0>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d111      	bne.n	80026d0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2b06      	cmp	r3, #6
 80026bc:	d010      	beq.n	80026e0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f042 0201 	orr.w	r2, r2, #1
 80026cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ce:	e007      	b.n	80026e0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0201 	orr.w	r2, r2, #1
 80026de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40010000 	.word	0x40010000
 80026f4:	40000400 	.word	0x40000400
 80026f8:	40000800 	.word	0x40000800
 80026fc:	40000c00 	.word	0x40000c00
 8002700:	40014000 	.word	0x40014000

08002704 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b02      	cmp	r3, #2
 8002718:	d122      	bne.n	8002760 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b02      	cmp	r3, #2
 8002726:	d11b      	bne.n	8002760 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f06f 0202 	mvn.w	r2, #2
 8002730:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f9b5 	bl	8002ab6 <HAL_TIM_IC_CaptureCallback>
 800274c:	e005      	b.n	800275a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f9a7 	bl	8002aa2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 f9b8 	bl	8002aca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	f003 0304 	and.w	r3, r3, #4
 800276a:	2b04      	cmp	r3, #4
 800276c:	d122      	bne.n	80027b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b04      	cmp	r3, #4
 800277a:	d11b      	bne.n	80027b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f06f 0204 	mvn.w	r2, #4
 8002784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2202      	movs	r2, #2
 800278a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f98b 	bl	8002ab6 <HAL_TIM_IC_CaptureCallback>
 80027a0:	e005      	b.n	80027ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f97d 	bl	8002aa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 f98e 	bl	8002aca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b08      	cmp	r3, #8
 80027c0:	d122      	bne.n	8002808 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f003 0308 	and.w	r3, r3, #8
 80027cc:	2b08      	cmp	r3, #8
 80027ce:	d11b      	bne.n	8002808 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f06f 0208 	mvn.w	r2, #8
 80027d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2204      	movs	r2, #4
 80027de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f961 	bl	8002ab6 <HAL_TIM_IC_CaptureCallback>
 80027f4:	e005      	b.n	8002802 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f953 	bl	8002aa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 f964 	bl	8002aca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	f003 0310 	and.w	r3, r3, #16
 8002812:	2b10      	cmp	r3, #16
 8002814:	d122      	bne.n	800285c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f003 0310 	and.w	r3, r3, #16
 8002820:	2b10      	cmp	r3, #16
 8002822:	d11b      	bne.n	800285c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f06f 0210 	mvn.w	r2, #16
 800282c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2208      	movs	r2, #8
 8002832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f937 	bl	8002ab6 <HAL_TIM_IC_CaptureCallback>
 8002848:	e005      	b.n	8002856 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f929 	bl	8002aa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 f93a 	bl	8002aca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b01      	cmp	r3, #1
 8002868:	d10e      	bne.n	8002888 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b01      	cmp	r3, #1
 8002876:	d107      	bne.n	8002888 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f06f 0201 	mvn.w	r2, #1
 8002880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7fe fb70 	bl	8000f68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002892:	2b80      	cmp	r3, #128	; 0x80
 8002894:	d10e      	bne.n	80028b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a0:	2b80      	cmp	r3, #128	; 0x80
 80028a2:	d107      	bne.n	80028b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 fab2 	bl	8002e18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028be:	2b40      	cmp	r3, #64	; 0x40
 80028c0:	d10e      	bne.n	80028e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028cc:	2b40      	cmp	r3, #64	; 0x40
 80028ce:	d107      	bne.n	80028e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f8ff 	bl	8002ade <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	f003 0320 	and.w	r3, r3, #32
 80028ea:	2b20      	cmp	r3, #32
 80028ec:	d10e      	bne.n	800290c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f003 0320 	and.w	r3, r3, #32
 80028f8:	2b20      	cmp	r3, #32
 80028fa:	d107      	bne.n	800290c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f06f 0220 	mvn.w	r2, #32
 8002904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 fa7c 	bl	8002e04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800290c:	bf00      	nop
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_TIM_ConfigClockSource+0x1c>
 800292c:	2302      	movs	r3, #2
 800292e:	e0b4      	b.n	8002a9a <HAL_TIM_ConfigClockSource+0x186>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2202      	movs	r2, #2
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800294e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002956:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002968:	d03e      	beq.n	80029e8 <HAL_TIM_ConfigClockSource+0xd4>
 800296a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800296e:	f200 8087 	bhi.w	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 8002972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002976:	f000 8086 	beq.w	8002a86 <HAL_TIM_ConfigClockSource+0x172>
 800297a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800297e:	d87f      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 8002980:	2b70      	cmp	r3, #112	; 0x70
 8002982:	d01a      	beq.n	80029ba <HAL_TIM_ConfigClockSource+0xa6>
 8002984:	2b70      	cmp	r3, #112	; 0x70
 8002986:	d87b      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 8002988:	2b60      	cmp	r3, #96	; 0x60
 800298a:	d050      	beq.n	8002a2e <HAL_TIM_ConfigClockSource+0x11a>
 800298c:	2b60      	cmp	r3, #96	; 0x60
 800298e:	d877      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 8002990:	2b50      	cmp	r3, #80	; 0x50
 8002992:	d03c      	beq.n	8002a0e <HAL_TIM_ConfigClockSource+0xfa>
 8002994:	2b50      	cmp	r3, #80	; 0x50
 8002996:	d873      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 8002998:	2b40      	cmp	r3, #64	; 0x40
 800299a:	d058      	beq.n	8002a4e <HAL_TIM_ConfigClockSource+0x13a>
 800299c:	2b40      	cmp	r3, #64	; 0x40
 800299e:	d86f      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 80029a0:	2b30      	cmp	r3, #48	; 0x30
 80029a2:	d064      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0x15a>
 80029a4:	2b30      	cmp	r3, #48	; 0x30
 80029a6:	d86b      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 80029a8:	2b20      	cmp	r3, #32
 80029aa:	d060      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0x15a>
 80029ac:	2b20      	cmp	r3, #32
 80029ae:	d867      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d05c      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0x15a>
 80029b4:	2b10      	cmp	r3, #16
 80029b6:	d05a      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0x15a>
 80029b8:	e062      	b.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6818      	ldr	r0, [r3, #0]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	6899      	ldr	r1, [r3, #8]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	f000 f98d 	bl	8002ce8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	609a      	str	r2, [r3, #8]
      break;
 80029e6:	e04f      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6818      	ldr	r0, [r3, #0]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	6899      	ldr	r1, [r3, #8]
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f000 f976 	bl	8002ce8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689a      	ldr	r2, [r3, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a0a:	609a      	str	r2, [r3, #8]
      break;
 8002a0c:	e03c      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6818      	ldr	r0, [r3, #0]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	6859      	ldr	r1, [r3, #4]
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	f000 f8ea 	bl	8002bf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2150      	movs	r1, #80	; 0x50
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 f943 	bl	8002cb2 <TIM_ITRx_SetConfig>
      break;
 8002a2c:	e02c      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6818      	ldr	r0, [r3, #0]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	6859      	ldr	r1, [r3, #4]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	f000 f909 	bl	8002c52 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2160      	movs	r1, #96	; 0x60
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 f933 	bl	8002cb2 <TIM_ITRx_SetConfig>
      break;
 8002a4c:	e01c      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6818      	ldr	r0, [r3, #0]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	6859      	ldr	r1, [r3, #4]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	f000 f8ca 	bl	8002bf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2140      	movs	r1, #64	; 0x40
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 f923 	bl	8002cb2 <TIM_ITRx_SetConfig>
      break;
 8002a6c:	e00c      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4619      	mov	r1, r3
 8002a78:	4610      	mov	r0, r2
 8002a7a:	f000 f91a 	bl	8002cb2 <TIM_ITRx_SetConfig>
      break;
 8002a7e:	e003      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
      break;
 8002a84:	e000      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
	...

08002af4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a34      	ldr	r2, [pc, #208]	; (8002bd8 <TIM_Base_SetConfig+0xe4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d00f      	beq.n	8002b2c <TIM_Base_SetConfig+0x38>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b12:	d00b      	beq.n	8002b2c <TIM_Base_SetConfig+0x38>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a31      	ldr	r2, [pc, #196]	; (8002bdc <TIM_Base_SetConfig+0xe8>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d007      	beq.n	8002b2c <TIM_Base_SetConfig+0x38>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a30      	ldr	r2, [pc, #192]	; (8002be0 <TIM_Base_SetConfig+0xec>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d003      	beq.n	8002b2c <TIM_Base_SetConfig+0x38>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a2f      	ldr	r2, [pc, #188]	; (8002be4 <TIM_Base_SetConfig+0xf0>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d108      	bne.n	8002b3e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a25      	ldr	r2, [pc, #148]	; (8002bd8 <TIM_Base_SetConfig+0xe4>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d01b      	beq.n	8002b7e <TIM_Base_SetConfig+0x8a>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b4c:	d017      	beq.n	8002b7e <TIM_Base_SetConfig+0x8a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a22      	ldr	r2, [pc, #136]	; (8002bdc <TIM_Base_SetConfig+0xe8>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d013      	beq.n	8002b7e <TIM_Base_SetConfig+0x8a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a21      	ldr	r2, [pc, #132]	; (8002be0 <TIM_Base_SetConfig+0xec>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d00f      	beq.n	8002b7e <TIM_Base_SetConfig+0x8a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a20      	ldr	r2, [pc, #128]	; (8002be4 <TIM_Base_SetConfig+0xf0>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d00b      	beq.n	8002b7e <TIM_Base_SetConfig+0x8a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a1f      	ldr	r2, [pc, #124]	; (8002be8 <TIM_Base_SetConfig+0xf4>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d007      	beq.n	8002b7e <TIM_Base_SetConfig+0x8a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a1e      	ldr	r2, [pc, #120]	; (8002bec <TIM_Base_SetConfig+0xf8>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d003      	beq.n	8002b7e <TIM_Base_SetConfig+0x8a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a1d      	ldr	r2, [pc, #116]	; (8002bf0 <TIM_Base_SetConfig+0xfc>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d108      	bne.n	8002b90 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a08      	ldr	r2, [pc, #32]	; (8002bd8 <TIM_Base_SetConfig+0xe4>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d103      	bne.n	8002bc4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	691a      	ldr	r2, [r3, #16]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	615a      	str	r2, [r3, #20]
}
 8002bca:	bf00      	nop
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	40010000 	.word	0x40010000
 8002bdc:	40000400 	.word	0x40000400
 8002be0:	40000800 	.word	0x40000800
 8002be4:	40000c00 	.word	0x40000c00
 8002be8:	40014000 	.word	0x40014000
 8002bec:	40014400 	.word	0x40014400
 8002bf0:	40014800 	.word	0x40014800

08002bf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b087      	sub	sp, #28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	f023 0201 	bic.w	r2, r3, #1
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	011b      	lsls	r3, r3, #4
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f023 030a 	bic.w	r3, r3, #10
 8002c30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	621a      	str	r2, [r3, #32]
}
 8002c46:	bf00      	nop
 8002c48:	371c      	adds	r7, #28
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b087      	sub	sp, #28
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	60f8      	str	r0, [r7, #12]
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	f023 0210 	bic.w	r2, r3, #16
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	031b      	lsls	r3, r3, #12
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	011b      	lsls	r3, r3, #4
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	621a      	str	r2, [r3, #32]
}
 8002ca6:	bf00      	nop
 8002ca8:	371c      	adds	r7, #28
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b085      	sub	sp, #20
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f043 0307 	orr.w	r3, r3, #7
 8002cd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	609a      	str	r2, [r3, #8]
}
 8002cdc:	bf00      	nop
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b087      	sub	sp, #28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
 8002cf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	021a      	lsls	r2, r3, #8
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	609a      	str	r2, [r3, #8]
}
 8002d1c:	bf00      	nop
 8002d1e:	371c      	adds	r7, #28
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e050      	b.n	8002de2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a1c      	ldr	r2, [pc, #112]	; (8002df0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d018      	beq.n	8002db6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d8c:	d013      	beq.n	8002db6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a18      	ldr	r2, [pc, #96]	; (8002df4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d00e      	beq.n	8002db6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a16      	ldr	r2, [pc, #88]	; (8002df8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d009      	beq.n	8002db6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a15      	ldr	r2, [pc, #84]	; (8002dfc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d004      	beq.n	8002db6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a13      	ldr	r2, [pc, #76]	; (8002e00 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d10c      	bne.n	8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	40010000 	.word	0x40010000
 8002df4:	40000400 	.word	0x40000400
 8002df8:	40000800 	.word	0x40000800
 8002dfc:	40000c00 	.word	0x40000c00
 8002e00:	40014000 	.word	0x40014000

08002e04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <__errno>:
 8002e2c:	4b01      	ldr	r3, [pc, #4]	; (8002e34 <__errno+0x8>)
 8002e2e:	6818      	ldr	r0, [r3, #0]
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	20000014 	.word	0x20000014

08002e38 <__libc_init_array>:
 8002e38:	b570      	push	{r4, r5, r6, lr}
 8002e3a:	4d0d      	ldr	r5, [pc, #52]	; (8002e70 <__libc_init_array+0x38>)
 8002e3c:	4c0d      	ldr	r4, [pc, #52]	; (8002e74 <__libc_init_array+0x3c>)
 8002e3e:	1b64      	subs	r4, r4, r5
 8002e40:	10a4      	asrs	r4, r4, #2
 8002e42:	2600      	movs	r6, #0
 8002e44:	42a6      	cmp	r6, r4
 8002e46:	d109      	bne.n	8002e5c <__libc_init_array+0x24>
 8002e48:	4d0b      	ldr	r5, [pc, #44]	; (8002e78 <__libc_init_array+0x40>)
 8002e4a:	4c0c      	ldr	r4, [pc, #48]	; (8002e7c <__libc_init_array+0x44>)
 8002e4c:	f000 fc8e 	bl	800376c <_init>
 8002e50:	1b64      	subs	r4, r4, r5
 8002e52:	10a4      	asrs	r4, r4, #2
 8002e54:	2600      	movs	r6, #0
 8002e56:	42a6      	cmp	r6, r4
 8002e58:	d105      	bne.n	8002e66 <__libc_init_array+0x2e>
 8002e5a:	bd70      	pop	{r4, r5, r6, pc}
 8002e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e60:	4798      	blx	r3
 8002e62:	3601      	adds	r6, #1
 8002e64:	e7ee      	b.n	8002e44 <__libc_init_array+0xc>
 8002e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e6a:	4798      	blx	r3
 8002e6c:	3601      	adds	r6, #1
 8002e6e:	e7f2      	b.n	8002e56 <__libc_init_array+0x1e>
 8002e70:	0800387c 	.word	0x0800387c
 8002e74:	0800387c 	.word	0x0800387c
 8002e78:	0800387c 	.word	0x0800387c
 8002e7c:	08003880 	.word	0x08003880

08002e80 <memset>:
 8002e80:	4402      	add	r2, r0
 8002e82:	4603      	mov	r3, r0
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d100      	bne.n	8002e8a <memset+0xa>
 8002e88:	4770      	bx	lr
 8002e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e8e:	e7f9      	b.n	8002e84 <memset+0x4>

08002e90 <siprintf>:
 8002e90:	b40e      	push	{r1, r2, r3}
 8002e92:	b500      	push	{lr}
 8002e94:	b09c      	sub	sp, #112	; 0x70
 8002e96:	ab1d      	add	r3, sp, #116	; 0x74
 8002e98:	9002      	str	r0, [sp, #8]
 8002e9a:	9006      	str	r0, [sp, #24]
 8002e9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002ea0:	4809      	ldr	r0, [pc, #36]	; (8002ec8 <siprintf+0x38>)
 8002ea2:	9107      	str	r1, [sp, #28]
 8002ea4:	9104      	str	r1, [sp, #16]
 8002ea6:	4909      	ldr	r1, [pc, #36]	; (8002ecc <siprintf+0x3c>)
 8002ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8002eac:	9105      	str	r1, [sp, #20]
 8002eae:	6800      	ldr	r0, [r0, #0]
 8002eb0:	9301      	str	r3, [sp, #4]
 8002eb2:	a902      	add	r1, sp, #8
 8002eb4:	f000 f868 	bl	8002f88 <_svfiprintf_r>
 8002eb8:	9b02      	ldr	r3, [sp, #8]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	701a      	strb	r2, [r3, #0]
 8002ebe:	b01c      	add	sp, #112	; 0x70
 8002ec0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ec4:	b003      	add	sp, #12
 8002ec6:	4770      	bx	lr
 8002ec8:	20000014 	.word	0x20000014
 8002ecc:	ffff0208 	.word	0xffff0208

08002ed0 <__ssputs_r>:
 8002ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ed4:	688e      	ldr	r6, [r1, #8]
 8002ed6:	429e      	cmp	r6, r3
 8002ed8:	4682      	mov	sl, r0
 8002eda:	460c      	mov	r4, r1
 8002edc:	4690      	mov	r8, r2
 8002ede:	461f      	mov	r7, r3
 8002ee0:	d838      	bhi.n	8002f54 <__ssputs_r+0x84>
 8002ee2:	898a      	ldrh	r2, [r1, #12]
 8002ee4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002ee8:	d032      	beq.n	8002f50 <__ssputs_r+0x80>
 8002eea:	6825      	ldr	r5, [r4, #0]
 8002eec:	6909      	ldr	r1, [r1, #16]
 8002eee:	eba5 0901 	sub.w	r9, r5, r1
 8002ef2:	6965      	ldr	r5, [r4, #20]
 8002ef4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ef8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002efc:	3301      	adds	r3, #1
 8002efe:	444b      	add	r3, r9
 8002f00:	106d      	asrs	r5, r5, #1
 8002f02:	429d      	cmp	r5, r3
 8002f04:	bf38      	it	cc
 8002f06:	461d      	movcc	r5, r3
 8002f08:	0553      	lsls	r3, r2, #21
 8002f0a:	d531      	bpl.n	8002f70 <__ssputs_r+0xa0>
 8002f0c:	4629      	mov	r1, r5
 8002f0e:	f000 fb63 	bl	80035d8 <_malloc_r>
 8002f12:	4606      	mov	r6, r0
 8002f14:	b950      	cbnz	r0, 8002f2c <__ssputs_r+0x5c>
 8002f16:	230c      	movs	r3, #12
 8002f18:	f8ca 3000 	str.w	r3, [sl]
 8002f1c:	89a3      	ldrh	r3, [r4, #12]
 8002f1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f22:	81a3      	strh	r3, [r4, #12]
 8002f24:	f04f 30ff 	mov.w	r0, #4294967295
 8002f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f2c:	6921      	ldr	r1, [r4, #16]
 8002f2e:	464a      	mov	r2, r9
 8002f30:	f000 fabe 	bl	80034b0 <memcpy>
 8002f34:	89a3      	ldrh	r3, [r4, #12]
 8002f36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f3e:	81a3      	strh	r3, [r4, #12]
 8002f40:	6126      	str	r6, [r4, #16]
 8002f42:	6165      	str	r5, [r4, #20]
 8002f44:	444e      	add	r6, r9
 8002f46:	eba5 0509 	sub.w	r5, r5, r9
 8002f4a:	6026      	str	r6, [r4, #0]
 8002f4c:	60a5      	str	r5, [r4, #8]
 8002f4e:	463e      	mov	r6, r7
 8002f50:	42be      	cmp	r6, r7
 8002f52:	d900      	bls.n	8002f56 <__ssputs_r+0x86>
 8002f54:	463e      	mov	r6, r7
 8002f56:	6820      	ldr	r0, [r4, #0]
 8002f58:	4632      	mov	r2, r6
 8002f5a:	4641      	mov	r1, r8
 8002f5c:	f000 fab6 	bl	80034cc <memmove>
 8002f60:	68a3      	ldr	r3, [r4, #8]
 8002f62:	1b9b      	subs	r3, r3, r6
 8002f64:	60a3      	str	r3, [r4, #8]
 8002f66:	6823      	ldr	r3, [r4, #0]
 8002f68:	4433      	add	r3, r6
 8002f6a:	6023      	str	r3, [r4, #0]
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	e7db      	b.n	8002f28 <__ssputs_r+0x58>
 8002f70:	462a      	mov	r2, r5
 8002f72:	f000 fba5 	bl	80036c0 <_realloc_r>
 8002f76:	4606      	mov	r6, r0
 8002f78:	2800      	cmp	r0, #0
 8002f7a:	d1e1      	bne.n	8002f40 <__ssputs_r+0x70>
 8002f7c:	6921      	ldr	r1, [r4, #16]
 8002f7e:	4650      	mov	r0, sl
 8002f80:	f000 fabe 	bl	8003500 <_free_r>
 8002f84:	e7c7      	b.n	8002f16 <__ssputs_r+0x46>
	...

08002f88 <_svfiprintf_r>:
 8002f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f8c:	4698      	mov	r8, r3
 8002f8e:	898b      	ldrh	r3, [r1, #12]
 8002f90:	061b      	lsls	r3, r3, #24
 8002f92:	b09d      	sub	sp, #116	; 0x74
 8002f94:	4607      	mov	r7, r0
 8002f96:	460d      	mov	r5, r1
 8002f98:	4614      	mov	r4, r2
 8002f9a:	d50e      	bpl.n	8002fba <_svfiprintf_r+0x32>
 8002f9c:	690b      	ldr	r3, [r1, #16]
 8002f9e:	b963      	cbnz	r3, 8002fba <_svfiprintf_r+0x32>
 8002fa0:	2140      	movs	r1, #64	; 0x40
 8002fa2:	f000 fb19 	bl	80035d8 <_malloc_r>
 8002fa6:	6028      	str	r0, [r5, #0]
 8002fa8:	6128      	str	r0, [r5, #16]
 8002faa:	b920      	cbnz	r0, 8002fb6 <_svfiprintf_r+0x2e>
 8002fac:	230c      	movs	r3, #12
 8002fae:	603b      	str	r3, [r7, #0]
 8002fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb4:	e0d1      	b.n	800315a <_svfiprintf_r+0x1d2>
 8002fb6:	2340      	movs	r3, #64	; 0x40
 8002fb8:	616b      	str	r3, [r5, #20]
 8002fba:	2300      	movs	r3, #0
 8002fbc:	9309      	str	r3, [sp, #36]	; 0x24
 8002fbe:	2320      	movs	r3, #32
 8002fc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002fc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8002fc8:	2330      	movs	r3, #48	; 0x30
 8002fca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003174 <_svfiprintf_r+0x1ec>
 8002fce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002fd2:	f04f 0901 	mov.w	r9, #1
 8002fd6:	4623      	mov	r3, r4
 8002fd8:	469a      	mov	sl, r3
 8002fda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002fde:	b10a      	cbz	r2, 8002fe4 <_svfiprintf_r+0x5c>
 8002fe0:	2a25      	cmp	r2, #37	; 0x25
 8002fe2:	d1f9      	bne.n	8002fd8 <_svfiprintf_r+0x50>
 8002fe4:	ebba 0b04 	subs.w	fp, sl, r4
 8002fe8:	d00b      	beq.n	8003002 <_svfiprintf_r+0x7a>
 8002fea:	465b      	mov	r3, fp
 8002fec:	4622      	mov	r2, r4
 8002fee:	4629      	mov	r1, r5
 8002ff0:	4638      	mov	r0, r7
 8002ff2:	f7ff ff6d 	bl	8002ed0 <__ssputs_r>
 8002ff6:	3001      	adds	r0, #1
 8002ff8:	f000 80aa 	beq.w	8003150 <_svfiprintf_r+0x1c8>
 8002ffc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ffe:	445a      	add	r2, fp
 8003000:	9209      	str	r2, [sp, #36]	; 0x24
 8003002:	f89a 3000 	ldrb.w	r3, [sl]
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 80a2 	beq.w	8003150 <_svfiprintf_r+0x1c8>
 800300c:	2300      	movs	r3, #0
 800300e:	f04f 32ff 	mov.w	r2, #4294967295
 8003012:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003016:	f10a 0a01 	add.w	sl, sl, #1
 800301a:	9304      	str	r3, [sp, #16]
 800301c:	9307      	str	r3, [sp, #28]
 800301e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003022:	931a      	str	r3, [sp, #104]	; 0x68
 8003024:	4654      	mov	r4, sl
 8003026:	2205      	movs	r2, #5
 8003028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800302c:	4851      	ldr	r0, [pc, #324]	; (8003174 <_svfiprintf_r+0x1ec>)
 800302e:	f7fd f8d7 	bl	80001e0 <memchr>
 8003032:	9a04      	ldr	r2, [sp, #16]
 8003034:	b9d8      	cbnz	r0, 800306e <_svfiprintf_r+0xe6>
 8003036:	06d0      	lsls	r0, r2, #27
 8003038:	bf44      	itt	mi
 800303a:	2320      	movmi	r3, #32
 800303c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003040:	0711      	lsls	r1, r2, #28
 8003042:	bf44      	itt	mi
 8003044:	232b      	movmi	r3, #43	; 0x2b
 8003046:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800304a:	f89a 3000 	ldrb.w	r3, [sl]
 800304e:	2b2a      	cmp	r3, #42	; 0x2a
 8003050:	d015      	beq.n	800307e <_svfiprintf_r+0xf6>
 8003052:	9a07      	ldr	r2, [sp, #28]
 8003054:	4654      	mov	r4, sl
 8003056:	2000      	movs	r0, #0
 8003058:	f04f 0c0a 	mov.w	ip, #10
 800305c:	4621      	mov	r1, r4
 800305e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003062:	3b30      	subs	r3, #48	; 0x30
 8003064:	2b09      	cmp	r3, #9
 8003066:	d94e      	bls.n	8003106 <_svfiprintf_r+0x17e>
 8003068:	b1b0      	cbz	r0, 8003098 <_svfiprintf_r+0x110>
 800306a:	9207      	str	r2, [sp, #28]
 800306c:	e014      	b.n	8003098 <_svfiprintf_r+0x110>
 800306e:	eba0 0308 	sub.w	r3, r0, r8
 8003072:	fa09 f303 	lsl.w	r3, r9, r3
 8003076:	4313      	orrs	r3, r2
 8003078:	9304      	str	r3, [sp, #16]
 800307a:	46a2      	mov	sl, r4
 800307c:	e7d2      	b.n	8003024 <_svfiprintf_r+0x9c>
 800307e:	9b03      	ldr	r3, [sp, #12]
 8003080:	1d19      	adds	r1, r3, #4
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	9103      	str	r1, [sp, #12]
 8003086:	2b00      	cmp	r3, #0
 8003088:	bfbb      	ittet	lt
 800308a:	425b      	neglt	r3, r3
 800308c:	f042 0202 	orrlt.w	r2, r2, #2
 8003090:	9307      	strge	r3, [sp, #28]
 8003092:	9307      	strlt	r3, [sp, #28]
 8003094:	bfb8      	it	lt
 8003096:	9204      	strlt	r2, [sp, #16]
 8003098:	7823      	ldrb	r3, [r4, #0]
 800309a:	2b2e      	cmp	r3, #46	; 0x2e
 800309c:	d10c      	bne.n	80030b8 <_svfiprintf_r+0x130>
 800309e:	7863      	ldrb	r3, [r4, #1]
 80030a0:	2b2a      	cmp	r3, #42	; 0x2a
 80030a2:	d135      	bne.n	8003110 <_svfiprintf_r+0x188>
 80030a4:	9b03      	ldr	r3, [sp, #12]
 80030a6:	1d1a      	adds	r2, r3, #4
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	9203      	str	r2, [sp, #12]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	bfb8      	it	lt
 80030b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80030b4:	3402      	adds	r4, #2
 80030b6:	9305      	str	r3, [sp, #20]
 80030b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003184 <_svfiprintf_r+0x1fc>
 80030bc:	7821      	ldrb	r1, [r4, #0]
 80030be:	2203      	movs	r2, #3
 80030c0:	4650      	mov	r0, sl
 80030c2:	f7fd f88d 	bl	80001e0 <memchr>
 80030c6:	b140      	cbz	r0, 80030da <_svfiprintf_r+0x152>
 80030c8:	2340      	movs	r3, #64	; 0x40
 80030ca:	eba0 000a 	sub.w	r0, r0, sl
 80030ce:	fa03 f000 	lsl.w	r0, r3, r0
 80030d2:	9b04      	ldr	r3, [sp, #16]
 80030d4:	4303      	orrs	r3, r0
 80030d6:	3401      	adds	r4, #1
 80030d8:	9304      	str	r3, [sp, #16]
 80030da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030de:	4826      	ldr	r0, [pc, #152]	; (8003178 <_svfiprintf_r+0x1f0>)
 80030e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80030e4:	2206      	movs	r2, #6
 80030e6:	f7fd f87b 	bl	80001e0 <memchr>
 80030ea:	2800      	cmp	r0, #0
 80030ec:	d038      	beq.n	8003160 <_svfiprintf_r+0x1d8>
 80030ee:	4b23      	ldr	r3, [pc, #140]	; (800317c <_svfiprintf_r+0x1f4>)
 80030f0:	bb1b      	cbnz	r3, 800313a <_svfiprintf_r+0x1b2>
 80030f2:	9b03      	ldr	r3, [sp, #12]
 80030f4:	3307      	adds	r3, #7
 80030f6:	f023 0307 	bic.w	r3, r3, #7
 80030fa:	3308      	adds	r3, #8
 80030fc:	9303      	str	r3, [sp, #12]
 80030fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003100:	4433      	add	r3, r6
 8003102:	9309      	str	r3, [sp, #36]	; 0x24
 8003104:	e767      	b.n	8002fd6 <_svfiprintf_r+0x4e>
 8003106:	fb0c 3202 	mla	r2, ip, r2, r3
 800310a:	460c      	mov	r4, r1
 800310c:	2001      	movs	r0, #1
 800310e:	e7a5      	b.n	800305c <_svfiprintf_r+0xd4>
 8003110:	2300      	movs	r3, #0
 8003112:	3401      	adds	r4, #1
 8003114:	9305      	str	r3, [sp, #20]
 8003116:	4619      	mov	r1, r3
 8003118:	f04f 0c0a 	mov.w	ip, #10
 800311c:	4620      	mov	r0, r4
 800311e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003122:	3a30      	subs	r2, #48	; 0x30
 8003124:	2a09      	cmp	r2, #9
 8003126:	d903      	bls.n	8003130 <_svfiprintf_r+0x1a8>
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0c5      	beq.n	80030b8 <_svfiprintf_r+0x130>
 800312c:	9105      	str	r1, [sp, #20]
 800312e:	e7c3      	b.n	80030b8 <_svfiprintf_r+0x130>
 8003130:	fb0c 2101 	mla	r1, ip, r1, r2
 8003134:	4604      	mov	r4, r0
 8003136:	2301      	movs	r3, #1
 8003138:	e7f0      	b.n	800311c <_svfiprintf_r+0x194>
 800313a:	ab03      	add	r3, sp, #12
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	462a      	mov	r2, r5
 8003140:	4b0f      	ldr	r3, [pc, #60]	; (8003180 <_svfiprintf_r+0x1f8>)
 8003142:	a904      	add	r1, sp, #16
 8003144:	4638      	mov	r0, r7
 8003146:	f3af 8000 	nop.w
 800314a:	1c42      	adds	r2, r0, #1
 800314c:	4606      	mov	r6, r0
 800314e:	d1d6      	bne.n	80030fe <_svfiprintf_r+0x176>
 8003150:	89ab      	ldrh	r3, [r5, #12]
 8003152:	065b      	lsls	r3, r3, #25
 8003154:	f53f af2c 	bmi.w	8002fb0 <_svfiprintf_r+0x28>
 8003158:	9809      	ldr	r0, [sp, #36]	; 0x24
 800315a:	b01d      	add	sp, #116	; 0x74
 800315c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003160:	ab03      	add	r3, sp, #12
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	462a      	mov	r2, r5
 8003166:	4b06      	ldr	r3, [pc, #24]	; (8003180 <_svfiprintf_r+0x1f8>)
 8003168:	a904      	add	r1, sp, #16
 800316a:	4638      	mov	r0, r7
 800316c:	f000 f87a 	bl	8003264 <_printf_i>
 8003170:	e7eb      	b.n	800314a <_svfiprintf_r+0x1c2>
 8003172:	bf00      	nop
 8003174:	08003840 	.word	0x08003840
 8003178:	0800384a 	.word	0x0800384a
 800317c:	00000000 	.word	0x00000000
 8003180:	08002ed1 	.word	0x08002ed1
 8003184:	08003846 	.word	0x08003846

08003188 <_printf_common>:
 8003188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800318c:	4616      	mov	r6, r2
 800318e:	4699      	mov	r9, r3
 8003190:	688a      	ldr	r2, [r1, #8]
 8003192:	690b      	ldr	r3, [r1, #16]
 8003194:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003198:	4293      	cmp	r3, r2
 800319a:	bfb8      	it	lt
 800319c:	4613      	movlt	r3, r2
 800319e:	6033      	str	r3, [r6, #0]
 80031a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80031a4:	4607      	mov	r7, r0
 80031a6:	460c      	mov	r4, r1
 80031a8:	b10a      	cbz	r2, 80031ae <_printf_common+0x26>
 80031aa:	3301      	adds	r3, #1
 80031ac:	6033      	str	r3, [r6, #0]
 80031ae:	6823      	ldr	r3, [r4, #0]
 80031b0:	0699      	lsls	r1, r3, #26
 80031b2:	bf42      	ittt	mi
 80031b4:	6833      	ldrmi	r3, [r6, #0]
 80031b6:	3302      	addmi	r3, #2
 80031b8:	6033      	strmi	r3, [r6, #0]
 80031ba:	6825      	ldr	r5, [r4, #0]
 80031bc:	f015 0506 	ands.w	r5, r5, #6
 80031c0:	d106      	bne.n	80031d0 <_printf_common+0x48>
 80031c2:	f104 0a19 	add.w	sl, r4, #25
 80031c6:	68e3      	ldr	r3, [r4, #12]
 80031c8:	6832      	ldr	r2, [r6, #0]
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	42ab      	cmp	r3, r5
 80031ce:	dc26      	bgt.n	800321e <_printf_common+0x96>
 80031d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80031d4:	1e13      	subs	r3, r2, #0
 80031d6:	6822      	ldr	r2, [r4, #0]
 80031d8:	bf18      	it	ne
 80031da:	2301      	movne	r3, #1
 80031dc:	0692      	lsls	r2, r2, #26
 80031de:	d42b      	bmi.n	8003238 <_printf_common+0xb0>
 80031e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031e4:	4649      	mov	r1, r9
 80031e6:	4638      	mov	r0, r7
 80031e8:	47c0      	blx	r8
 80031ea:	3001      	adds	r0, #1
 80031ec:	d01e      	beq.n	800322c <_printf_common+0xa4>
 80031ee:	6823      	ldr	r3, [r4, #0]
 80031f0:	68e5      	ldr	r5, [r4, #12]
 80031f2:	6832      	ldr	r2, [r6, #0]
 80031f4:	f003 0306 	and.w	r3, r3, #6
 80031f8:	2b04      	cmp	r3, #4
 80031fa:	bf08      	it	eq
 80031fc:	1aad      	subeq	r5, r5, r2
 80031fe:	68a3      	ldr	r3, [r4, #8]
 8003200:	6922      	ldr	r2, [r4, #16]
 8003202:	bf0c      	ite	eq
 8003204:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003208:	2500      	movne	r5, #0
 800320a:	4293      	cmp	r3, r2
 800320c:	bfc4      	itt	gt
 800320e:	1a9b      	subgt	r3, r3, r2
 8003210:	18ed      	addgt	r5, r5, r3
 8003212:	2600      	movs	r6, #0
 8003214:	341a      	adds	r4, #26
 8003216:	42b5      	cmp	r5, r6
 8003218:	d11a      	bne.n	8003250 <_printf_common+0xc8>
 800321a:	2000      	movs	r0, #0
 800321c:	e008      	b.n	8003230 <_printf_common+0xa8>
 800321e:	2301      	movs	r3, #1
 8003220:	4652      	mov	r2, sl
 8003222:	4649      	mov	r1, r9
 8003224:	4638      	mov	r0, r7
 8003226:	47c0      	blx	r8
 8003228:	3001      	adds	r0, #1
 800322a:	d103      	bne.n	8003234 <_printf_common+0xac>
 800322c:	f04f 30ff 	mov.w	r0, #4294967295
 8003230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003234:	3501      	adds	r5, #1
 8003236:	e7c6      	b.n	80031c6 <_printf_common+0x3e>
 8003238:	18e1      	adds	r1, r4, r3
 800323a:	1c5a      	adds	r2, r3, #1
 800323c:	2030      	movs	r0, #48	; 0x30
 800323e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003242:	4422      	add	r2, r4
 8003244:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003248:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800324c:	3302      	adds	r3, #2
 800324e:	e7c7      	b.n	80031e0 <_printf_common+0x58>
 8003250:	2301      	movs	r3, #1
 8003252:	4622      	mov	r2, r4
 8003254:	4649      	mov	r1, r9
 8003256:	4638      	mov	r0, r7
 8003258:	47c0      	blx	r8
 800325a:	3001      	adds	r0, #1
 800325c:	d0e6      	beq.n	800322c <_printf_common+0xa4>
 800325e:	3601      	adds	r6, #1
 8003260:	e7d9      	b.n	8003216 <_printf_common+0x8e>
	...

08003264 <_printf_i>:
 8003264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003268:	7e0f      	ldrb	r7, [r1, #24]
 800326a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800326c:	2f78      	cmp	r7, #120	; 0x78
 800326e:	4691      	mov	r9, r2
 8003270:	4680      	mov	r8, r0
 8003272:	460c      	mov	r4, r1
 8003274:	469a      	mov	sl, r3
 8003276:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800327a:	d807      	bhi.n	800328c <_printf_i+0x28>
 800327c:	2f62      	cmp	r7, #98	; 0x62
 800327e:	d80a      	bhi.n	8003296 <_printf_i+0x32>
 8003280:	2f00      	cmp	r7, #0
 8003282:	f000 80d8 	beq.w	8003436 <_printf_i+0x1d2>
 8003286:	2f58      	cmp	r7, #88	; 0x58
 8003288:	f000 80a3 	beq.w	80033d2 <_printf_i+0x16e>
 800328c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003290:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003294:	e03a      	b.n	800330c <_printf_i+0xa8>
 8003296:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800329a:	2b15      	cmp	r3, #21
 800329c:	d8f6      	bhi.n	800328c <_printf_i+0x28>
 800329e:	a101      	add	r1, pc, #4	; (adr r1, 80032a4 <_printf_i+0x40>)
 80032a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80032a4:	080032fd 	.word	0x080032fd
 80032a8:	08003311 	.word	0x08003311
 80032ac:	0800328d 	.word	0x0800328d
 80032b0:	0800328d 	.word	0x0800328d
 80032b4:	0800328d 	.word	0x0800328d
 80032b8:	0800328d 	.word	0x0800328d
 80032bc:	08003311 	.word	0x08003311
 80032c0:	0800328d 	.word	0x0800328d
 80032c4:	0800328d 	.word	0x0800328d
 80032c8:	0800328d 	.word	0x0800328d
 80032cc:	0800328d 	.word	0x0800328d
 80032d0:	0800341d 	.word	0x0800341d
 80032d4:	08003341 	.word	0x08003341
 80032d8:	080033ff 	.word	0x080033ff
 80032dc:	0800328d 	.word	0x0800328d
 80032e0:	0800328d 	.word	0x0800328d
 80032e4:	0800343f 	.word	0x0800343f
 80032e8:	0800328d 	.word	0x0800328d
 80032ec:	08003341 	.word	0x08003341
 80032f0:	0800328d 	.word	0x0800328d
 80032f4:	0800328d 	.word	0x0800328d
 80032f8:	08003407 	.word	0x08003407
 80032fc:	682b      	ldr	r3, [r5, #0]
 80032fe:	1d1a      	adds	r2, r3, #4
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	602a      	str	r2, [r5, #0]
 8003304:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003308:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800330c:	2301      	movs	r3, #1
 800330e:	e0a3      	b.n	8003458 <_printf_i+0x1f4>
 8003310:	6820      	ldr	r0, [r4, #0]
 8003312:	6829      	ldr	r1, [r5, #0]
 8003314:	0606      	lsls	r6, r0, #24
 8003316:	f101 0304 	add.w	r3, r1, #4
 800331a:	d50a      	bpl.n	8003332 <_printf_i+0xce>
 800331c:	680e      	ldr	r6, [r1, #0]
 800331e:	602b      	str	r3, [r5, #0]
 8003320:	2e00      	cmp	r6, #0
 8003322:	da03      	bge.n	800332c <_printf_i+0xc8>
 8003324:	232d      	movs	r3, #45	; 0x2d
 8003326:	4276      	negs	r6, r6
 8003328:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800332c:	485e      	ldr	r0, [pc, #376]	; (80034a8 <_printf_i+0x244>)
 800332e:	230a      	movs	r3, #10
 8003330:	e019      	b.n	8003366 <_printf_i+0x102>
 8003332:	680e      	ldr	r6, [r1, #0]
 8003334:	602b      	str	r3, [r5, #0]
 8003336:	f010 0f40 	tst.w	r0, #64	; 0x40
 800333a:	bf18      	it	ne
 800333c:	b236      	sxthne	r6, r6
 800333e:	e7ef      	b.n	8003320 <_printf_i+0xbc>
 8003340:	682b      	ldr	r3, [r5, #0]
 8003342:	6820      	ldr	r0, [r4, #0]
 8003344:	1d19      	adds	r1, r3, #4
 8003346:	6029      	str	r1, [r5, #0]
 8003348:	0601      	lsls	r1, r0, #24
 800334a:	d501      	bpl.n	8003350 <_printf_i+0xec>
 800334c:	681e      	ldr	r6, [r3, #0]
 800334e:	e002      	b.n	8003356 <_printf_i+0xf2>
 8003350:	0646      	lsls	r6, r0, #25
 8003352:	d5fb      	bpl.n	800334c <_printf_i+0xe8>
 8003354:	881e      	ldrh	r6, [r3, #0]
 8003356:	4854      	ldr	r0, [pc, #336]	; (80034a8 <_printf_i+0x244>)
 8003358:	2f6f      	cmp	r7, #111	; 0x6f
 800335a:	bf0c      	ite	eq
 800335c:	2308      	moveq	r3, #8
 800335e:	230a      	movne	r3, #10
 8003360:	2100      	movs	r1, #0
 8003362:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003366:	6865      	ldr	r5, [r4, #4]
 8003368:	60a5      	str	r5, [r4, #8]
 800336a:	2d00      	cmp	r5, #0
 800336c:	bfa2      	ittt	ge
 800336e:	6821      	ldrge	r1, [r4, #0]
 8003370:	f021 0104 	bicge.w	r1, r1, #4
 8003374:	6021      	strge	r1, [r4, #0]
 8003376:	b90e      	cbnz	r6, 800337c <_printf_i+0x118>
 8003378:	2d00      	cmp	r5, #0
 800337a:	d04d      	beq.n	8003418 <_printf_i+0x1b4>
 800337c:	4615      	mov	r5, r2
 800337e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003382:	fb03 6711 	mls	r7, r3, r1, r6
 8003386:	5dc7      	ldrb	r7, [r0, r7]
 8003388:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800338c:	4637      	mov	r7, r6
 800338e:	42bb      	cmp	r3, r7
 8003390:	460e      	mov	r6, r1
 8003392:	d9f4      	bls.n	800337e <_printf_i+0x11a>
 8003394:	2b08      	cmp	r3, #8
 8003396:	d10b      	bne.n	80033b0 <_printf_i+0x14c>
 8003398:	6823      	ldr	r3, [r4, #0]
 800339a:	07de      	lsls	r6, r3, #31
 800339c:	d508      	bpl.n	80033b0 <_printf_i+0x14c>
 800339e:	6923      	ldr	r3, [r4, #16]
 80033a0:	6861      	ldr	r1, [r4, #4]
 80033a2:	4299      	cmp	r1, r3
 80033a4:	bfde      	ittt	le
 80033a6:	2330      	movle	r3, #48	; 0x30
 80033a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80033ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80033b0:	1b52      	subs	r2, r2, r5
 80033b2:	6122      	str	r2, [r4, #16]
 80033b4:	f8cd a000 	str.w	sl, [sp]
 80033b8:	464b      	mov	r3, r9
 80033ba:	aa03      	add	r2, sp, #12
 80033bc:	4621      	mov	r1, r4
 80033be:	4640      	mov	r0, r8
 80033c0:	f7ff fee2 	bl	8003188 <_printf_common>
 80033c4:	3001      	adds	r0, #1
 80033c6:	d14c      	bne.n	8003462 <_printf_i+0x1fe>
 80033c8:	f04f 30ff 	mov.w	r0, #4294967295
 80033cc:	b004      	add	sp, #16
 80033ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033d2:	4835      	ldr	r0, [pc, #212]	; (80034a8 <_printf_i+0x244>)
 80033d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80033d8:	6829      	ldr	r1, [r5, #0]
 80033da:	6823      	ldr	r3, [r4, #0]
 80033dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80033e0:	6029      	str	r1, [r5, #0]
 80033e2:	061d      	lsls	r5, r3, #24
 80033e4:	d514      	bpl.n	8003410 <_printf_i+0x1ac>
 80033e6:	07df      	lsls	r7, r3, #31
 80033e8:	bf44      	itt	mi
 80033ea:	f043 0320 	orrmi.w	r3, r3, #32
 80033ee:	6023      	strmi	r3, [r4, #0]
 80033f0:	b91e      	cbnz	r6, 80033fa <_printf_i+0x196>
 80033f2:	6823      	ldr	r3, [r4, #0]
 80033f4:	f023 0320 	bic.w	r3, r3, #32
 80033f8:	6023      	str	r3, [r4, #0]
 80033fa:	2310      	movs	r3, #16
 80033fc:	e7b0      	b.n	8003360 <_printf_i+0xfc>
 80033fe:	6823      	ldr	r3, [r4, #0]
 8003400:	f043 0320 	orr.w	r3, r3, #32
 8003404:	6023      	str	r3, [r4, #0]
 8003406:	2378      	movs	r3, #120	; 0x78
 8003408:	4828      	ldr	r0, [pc, #160]	; (80034ac <_printf_i+0x248>)
 800340a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800340e:	e7e3      	b.n	80033d8 <_printf_i+0x174>
 8003410:	0659      	lsls	r1, r3, #25
 8003412:	bf48      	it	mi
 8003414:	b2b6      	uxthmi	r6, r6
 8003416:	e7e6      	b.n	80033e6 <_printf_i+0x182>
 8003418:	4615      	mov	r5, r2
 800341a:	e7bb      	b.n	8003394 <_printf_i+0x130>
 800341c:	682b      	ldr	r3, [r5, #0]
 800341e:	6826      	ldr	r6, [r4, #0]
 8003420:	6961      	ldr	r1, [r4, #20]
 8003422:	1d18      	adds	r0, r3, #4
 8003424:	6028      	str	r0, [r5, #0]
 8003426:	0635      	lsls	r5, r6, #24
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	d501      	bpl.n	8003430 <_printf_i+0x1cc>
 800342c:	6019      	str	r1, [r3, #0]
 800342e:	e002      	b.n	8003436 <_printf_i+0x1d2>
 8003430:	0670      	lsls	r0, r6, #25
 8003432:	d5fb      	bpl.n	800342c <_printf_i+0x1c8>
 8003434:	8019      	strh	r1, [r3, #0]
 8003436:	2300      	movs	r3, #0
 8003438:	6123      	str	r3, [r4, #16]
 800343a:	4615      	mov	r5, r2
 800343c:	e7ba      	b.n	80033b4 <_printf_i+0x150>
 800343e:	682b      	ldr	r3, [r5, #0]
 8003440:	1d1a      	adds	r2, r3, #4
 8003442:	602a      	str	r2, [r5, #0]
 8003444:	681d      	ldr	r5, [r3, #0]
 8003446:	6862      	ldr	r2, [r4, #4]
 8003448:	2100      	movs	r1, #0
 800344a:	4628      	mov	r0, r5
 800344c:	f7fc fec8 	bl	80001e0 <memchr>
 8003450:	b108      	cbz	r0, 8003456 <_printf_i+0x1f2>
 8003452:	1b40      	subs	r0, r0, r5
 8003454:	6060      	str	r0, [r4, #4]
 8003456:	6863      	ldr	r3, [r4, #4]
 8003458:	6123      	str	r3, [r4, #16]
 800345a:	2300      	movs	r3, #0
 800345c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003460:	e7a8      	b.n	80033b4 <_printf_i+0x150>
 8003462:	6923      	ldr	r3, [r4, #16]
 8003464:	462a      	mov	r2, r5
 8003466:	4649      	mov	r1, r9
 8003468:	4640      	mov	r0, r8
 800346a:	47d0      	blx	sl
 800346c:	3001      	adds	r0, #1
 800346e:	d0ab      	beq.n	80033c8 <_printf_i+0x164>
 8003470:	6823      	ldr	r3, [r4, #0]
 8003472:	079b      	lsls	r3, r3, #30
 8003474:	d413      	bmi.n	800349e <_printf_i+0x23a>
 8003476:	68e0      	ldr	r0, [r4, #12]
 8003478:	9b03      	ldr	r3, [sp, #12]
 800347a:	4298      	cmp	r0, r3
 800347c:	bfb8      	it	lt
 800347e:	4618      	movlt	r0, r3
 8003480:	e7a4      	b.n	80033cc <_printf_i+0x168>
 8003482:	2301      	movs	r3, #1
 8003484:	4632      	mov	r2, r6
 8003486:	4649      	mov	r1, r9
 8003488:	4640      	mov	r0, r8
 800348a:	47d0      	blx	sl
 800348c:	3001      	adds	r0, #1
 800348e:	d09b      	beq.n	80033c8 <_printf_i+0x164>
 8003490:	3501      	adds	r5, #1
 8003492:	68e3      	ldr	r3, [r4, #12]
 8003494:	9903      	ldr	r1, [sp, #12]
 8003496:	1a5b      	subs	r3, r3, r1
 8003498:	42ab      	cmp	r3, r5
 800349a:	dcf2      	bgt.n	8003482 <_printf_i+0x21e>
 800349c:	e7eb      	b.n	8003476 <_printf_i+0x212>
 800349e:	2500      	movs	r5, #0
 80034a0:	f104 0619 	add.w	r6, r4, #25
 80034a4:	e7f5      	b.n	8003492 <_printf_i+0x22e>
 80034a6:	bf00      	nop
 80034a8:	08003851 	.word	0x08003851
 80034ac:	08003862 	.word	0x08003862

080034b0 <memcpy>:
 80034b0:	440a      	add	r2, r1
 80034b2:	4291      	cmp	r1, r2
 80034b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80034b8:	d100      	bne.n	80034bc <memcpy+0xc>
 80034ba:	4770      	bx	lr
 80034bc:	b510      	push	{r4, lr}
 80034be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034c6:	4291      	cmp	r1, r2
 80034c8:	d1f9      	bne.n	80034be <memcpy+0xe>
 80034ca:	bd10      	pop	{r4, pc}

080034cc <memmove>:
 80034cc:	4288      	cmp	r0, r1
 80034ce:	b510      	push	{r4, lr}
 80034d0:	eb01 0402 	add.w	r4, r1, r2
 80034d4:	d902      	bls.n	80034dc <memmove+0x10>
 80034d6:	4284      	cmp	r4, r0
 80034d8:	4623      	mov	r3, r4
 80034da:	d807      	bhi.n	80034ec <memmove+0x20>
 80034dc:	1e43      	subs	r3, r0, #1
 80034de:	42a1      	cmp	r1, r4
 80034e0:	d008      	beq.n	80034f4 <memmove+0x28>
 80034e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80034e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80034ea:	e7f8      	b.n	80034de <memmove+0x12>
 80034ec:	4402      	add	r2, r0
 80034ee:	4601      	mov	r1, r0
 80034f0:	428a      	cmp	r2, r1
 80034f2:	d100      	bne.n	80034f6 <memmove+0x2a>
 80034f4:	bd10      	pop	{r4, pc}
 80034f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80034fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80034fe:	e7f7      	b.n	80034f0 <memmove+0x24>

08003500 <_free_r>:
 8003500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003502:	2900      	cmp	r1, #0
 8003504:	d044      	beq.n	8003590 <_free_r+0x90>
 8003506:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800350a:	9001      	str	r0, [sp, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	f1a1 0404 	sub.w	r4, r1, #4
 8003512:	bfb8      	it	lt
 8003514:	18e4      	addlt	r4, r4, r3
 8003516:	f000 f913 	bl	8003740 <__malloc_lock>
 800351a:	4a1e      	ldr	r2, [pc, #120]	; (8003594 <_free_r+0x94>)
 800351c:	9801      	ldr	r0, [sp, #4]
 800351e:	6813      	ldr	r3, [r2, #0]
 8003520:	b933      	cbnz	r3, 8003530 <_free_r+0x30>
 8003522:	6063      	str	r3, [r4, #4]
 8003524:	6014      	str	r4, [r2, #0]
 8003526:	b003      	add	sp, #12
 8003528:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800352c:	f000 b90e 	b.w	800374c <__malloc_unlock>
 8003530:	42a3      	cmp	r3, r4
 8003532:	d908      	bls.n	8003546 <_free_r+0x46>
 8003534:	6825      	ldr	r5, [r4, #0]
 8003536:	1961      	adds	r1, r4, r5
 8003538:	428b      	cmp	r3, r1
 800353a:	bf01      	itttt	eq
 800353c:	6819      	ldreq	r1, [r3, #0]
 800353e:	685b      	ldreq	r3, [r3, #4]
 8003540:	1949      	addeq	r1, r1, r5
 8003542:	6021      	streq	r1, [r4, #0]
 8003544:	e7ed      	b.n	8003522 <_free_r+0x22>
 8003546:	461a      	mov	r2, r3
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	b10b      	cbz	r3, 8003550 <_free_r+0x50>
 800354c:	42a3      	cmp	r3, r4
 800354e:	d9fa      	bls.n	8003546 <_free_r+0x46>
 8003550:	6811      	ldr	r1, [r2, #0]
 8003552:	1855      	adds	r5, r2, r1
 8003554:	42a5      	cmp	r5, r4
 8003556:	d10b      	bne.n	8003570 <_free_r+0x70>
 8003558:	6824      	ldr	r4, [r4, #0]
 800355a:	4421      	add	r1, r4
 800355c:	1854      	adds	r4, r2, r1
 800355e:	42a3      	cmp	r3, r4
 8003560:	6011      	str	r1, [r2, #0]
 8003562:	d1e0      	bne.n	8003526 <_free_r+0x26>
 8003564:	681c      	ldr	r4, [r3, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	6053      	str	r3, [r2, #4]
 800356a:	4421      	add	r1, r4
 800356c:	6011      	str	r1, [r2, #0]
 800356e:	e7da      	b.n	8003526 <_free_r+0x26>
 8003570:	d902      	bls.n	8003578 <_free_r+0x78>
 8003572:	230c      	movs	r3, #12
 8003574:	6003      	str	r3, [r0, #0]
 8003576:	e7d6      	b.n	8003526 <_free_r+0x26>
 8003578:	6825      	ldr	r5, [r4, #0]
 800357a:	1961      	adds	r1, r4, r5
 800357c:	428b      	cmp	r3, r1
 800357e:	bf04      	itt	eq
 8003580:	6819      	ldreq	r1, [r3, #0]
 8003582:	685b      	ldreq	r3, [r3, #4]
 8003584:	6063      	str	r3, [r4, #4]
 8003586:	bf04      	itt	eq
 8003588:	1949      	addeq	r1, r1, r5
 800358a:	6021      	streq	r1, [r4, #0]
 800358c:	6054      	str	r4, [r2, #4]
 800358e:	e7ca      	b.n	8003526 <_free_r+0x26>
 8003590:	b003      	add	sp, #12
 8003592:	bd30      	pop	{r4, r5, pc}
 8003594:	200001a4 	.word	0x200001a4

08003598 <sbrk_aligned>:
 8003598:	b570      	push	{r4, r5, r6, lr}
 800359a:	4e0e      	ldr	r6, [pc, #56]	; (80035d4 <sbrk_aligned+0x3c>)
 800359c:	460c      	mov	r4, r1
 800359e:	6831      	ldr	r1, [r6, #0]
 80035a0:	4605      	mov	r5, r0
 80035a2:	b911      	cbnz	r1, 80035aa <sbrk_aligned+0x12>
 80035a4:	f000 f8bc 	bl	8003720 <_sbrk_r>
 80035a8:	6030      	str	r0, [r6, #0]
 80035aa:	4621      	mov	r1, r4
 80035ac:	4628      	mov	r0, r5
 80035ae:	f000 f8b7 	bl	8003720 <_sbrk_r>
 80035b2:	1c43      	adds	r3, r0, #1
 80035b4:	d00a      	beq.n	80035cc <sbrk_aligned+0x34>
 80035b6:	1cc4      	adds	r4, r0, #3
 80035b8:	f024 0403 	bic.w	r4, r4, #3
 80035bc:	42a0      	cmp	r0, r4
 80035be:	d007      	beq.n	80035d0 <sbrk_aligned+0x38>
 80035c0:	1a21      	subs	r1, r4, r0
 80035c2:	4628      	mov	r0, r5
 80035c4:	f000 f8ac 	bl	8003720 <_sbrk_r>
 80035c8:	3001      	adds	r0, #1
 80035ca:	d101      	bne.n	80035d0 <sbrk_aligned+0x38>
 80035cc:	f04f 34ff 	mov.w	r4, #4294967295
 80035d0:	4620      	mov	r0, r4
 80035d2:	bd70      	pop	{r4, r5, r6, pc}
 80035d4:	200001a8 	.word	0x200001a8

080035d8 <_malloc_r>:
 80035d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035dc:	1ccd      	adds	r5, r1, #3
 80035de:	f025 0503 	bic.w	r5, r5, #3
 80035e2:	3508      	adds	r5, #8
 80035e4:	2d0c      	cmp	r5, #12
 80035e6:	bf38      	it	cc
 80035e8:	250c      	movcc	r5, #12
 80035ea:	2d00      	cmp	r5, #0
 80035ec:	4607      	mov	r7, r0
 80035ee:	db01      	blt.n	80035f4 <_malloc_r+0x1c>
 80035f0:	42a9      	cmp	r1, r5
 80035f2:	d905      	bls.n	8003600 <_malloc_r+0x28>
 80035f4:	230c      	movs	r3, #12
 80035f6:	603b      	str	r3, [r7, #0]
 80035f8:	2600      	movs	r6, #0
 80035fa:	4630      	mov	r0, r6
 80035fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003600:	4e2e      	ldr	r6, [pc, #184]	; (80036bc <_malloc_r+0xe4>)
 8003602:	f000 f89d 	bl	8003740 <__malloc_lock>
 8003606:	6833      	ldr	r3, [r6, #0]
 8003608:	461c      	mov	r4, r3
 800360a:	bb34      	cbnz	r4, 800365a <_malloc_r+0x82>
 800360c:	4629      	mov	r1, r5
 800360e:	4638      	mov	r0, r7
 8003610:	f7ff ffc2 	bl	8003598 <sbrk_aligned>
 8003614:	1c43      	adds	r3, r0, #1
 8003616:	4604      	mov	r4, r0
 8003618:	d14d      	bne.n	80036b6 <_malloc_r+0xde>
 800361a:	6834      	ldr	r4, [r6, #0]
 800361c:	4626      	mov	r6, r4
 800361e:	2e00      	cmp	r6, #0
 8003620:	d140      	bne.n	80036a4 <_malloc_r+0xcc>
 8003622:	6823      	ldr	r3, [r4, #0]
 8003624:	4631      	mov	r1, r6
 8003626:	4638      	mov	r0, r7
 8003628:	eb04 0803 	add.w	r8, r4, r3
 800362c:	f000 f878 	bl	8003720 <_sbrk_r>
 8003630:	4580      	cmp	r8, r0
 8003632:	d13a      	bne.n	80036aa <_malloc_r+0xd2>
 8003634:	6821      	ldr	r1, [r4, #0]
 8003636:	3503      	adds	r5, #3
 8003638:	1a6d      	subs	r5, r5, r1
 800363a:	f025 0503 	bic.w	r5, r5, #3
 800363e:	3508      	adds	r5, #8
 8003640:	2d0c      	cmp	r5, #12
 8003642:	bf38      	it	cc
 8003644:	250c      	movcc	r5, #12
 8003646:	4629      	mov	r1, r5
 8003648:	4638      	mov	r0, r7
 800364a:	f7ff ffa5 	bl	8003598 <sbrk_aligned>
 800364e:	3001      	adds	r0, #1
 8003650:	d02b      	beq.n	80036aa <_malloc_r+0xd2>
 8003652:	6823      	ldr	r3, [r4, #0]
 8003654:	442b      	add	r3, r5
 8003656:	6023      	str	r3, [r4, #0]
 8003658:	e00e      	b.n	8003678 <_malloc_r+0xa0>
 800365a:	6822      	ldr	r2, [r4, #0]
 800365c:	1b52      	subs	r2, r2, r5
 800365e:	d41e      	bmi.n	800369e <_malloc_r+0xc6>
 8003660:	2a0b      	cmp	r2, #11
 8003662:	d916      	bls.n	8003692 <_malloc_r+0xba>
 8003664:	1961      	adds	r1, r4, r5
 8003666:	42a3      	cmp	r3, r4
 8003668:	6025      	str	r5, [r4, #0]
 800366a:	bf18      	it	ne
 800366c:	6059      	strne	r1, [r3, #4]
 800366e:	6863      	ldr	r3, [r4, #4]
 8003670:	bf08      	it	eq
 8003672:	6031      	streq	r1, [r6, #0]
 8003674:	5162      	str	r2, [r4, r5]
 8003676:	604b      	str	r3, [r1, #4]
 8003678:	4638      	mov	r0, r7
 800367a:	f104 060b 	add.w	r6, r4, #11
 800367e:	f000 f865 	bl	800374c <__malloc_unlock>
 8003682:	f026 0607 	bic.w	r6, r6, #7
 8003686:	1d23      	adds	r3, r4, #4
 8003688:	1af2      	subs	r2, r6, r3
 800368a:	d0b6      	beq.n	80035fa <_malloc_r+0x22>
 800368c:	1b9b      	subs	r3, r3, r6
 800368e:	50a3      	str	r3, [r4, r2]
 8003690:	e7b3      	b.n	80035fa <_malloc_r+0x22>
 8003692:	6862      	ldr	r2, [r4, #4]
 8003694:	42a3      	cmp	r3, r4
 8003696:	bf0c      	ite	eq
 8003698:	6032      	streq	r2, [r6, #0]
 800369a:	605a      	strne	r2, [r3, #4]
 800369c:	e7ec      	b.n	8003678 <_malloc_r+0xa0>
 800369e:	4623      	mov	r3, r4
 80036a0:	6864      	ldr	r4, [r4, #4]
 80036a2:	e7b2      	b.n	800360a <_malloc_r+0x32>
 80036a4:	4634      	mov	r4, r6
 80036a6:	6876      	ldr	r6, [r6, #4]
 80036a8:	e7b9      	b.n	800361e <_malloc_r+0x46>
 80036aa:	230c      	movs	r3, #12
 80036ac:	603b      	str	r3, [r7, #0]
 80036ae:	4638      	mov	r0, r7
 80036b0:	f000 f84c 	bl	800374c <__malloc_unlock>
 80036b4:	e7a1      	b.n	80035fa <_malloc_r+0x22>
 80036b6:	6025      	str	r5, [r4, #0]
 80036b8:	e7de      	b.n	8003678 <_malloc_r+0xa0>
 80036ba:	bf00      	nop
 80036bc:	200001a4 	.word	0x200001a4

080036c0 <_realloc_r>:
 80036c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036c4:	4680      	mov	r8, r0
 80036c6:	4614      	mov	r4, r2
 80036c8:	460e      	mov	r6, r1
 80036ca:	b921      	cbnz	r1, 80036d6 <_realloc_r+0x16>
 80036cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036d0:	4611      	mov	r1, r2
 80036d2:	f7ff bf81 	b.w	80035d8 <_malloc_r>
 80036d6:	b92a      	cbnz	r2, 80036e4 <_realloc_r+0x24>
 80036d8:	f7ff ff12 	bl	8003500 <_free_r>
 80036dc:	4625      	mov	r5, r4
 80036de:	4628      	mov	r0, r5
 80036e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036e4:	f000 f838 	bl	8003758 <_malloc_usable_size_r>
 80036e8:	4284      	cmp	r4, r0
 80036ea:	4607      	mov	r7, r0
 80036ec:	d802      	bhi.n	80036f4 <_realloc_r+0x34>
 80036ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80036f2:	d812      	bhi.n	800371a <_realloc_r+0x5a>
 80036f4:	4621      	mov	r1, r4
 80036f6:	4640      	mov	r0, r8
 80036f8:	f7ff ff6e 	bl	80035d8 <_malloc_r>
 80036fc:	4605      	mov	r5, r0
 80036fe:	2800      	cmp	r0, #0
 8003700:	d0ed      	beq.n	80036de <_realloc_r+0x1e>
 8003702:	42bc      	cmp	r4, r7
 8003704:	4622      	mov	r2, r4
 8003706:	4631      	mov	r1, r6
 8003708:	bf28      	it	cs
 800370a:	463a      	movcs	r2, r7
 800370c:	f7ff fed0 	bl	80034b0 <memcpy>
 8003710:	4631      	mov	r1, r6
 8003712:	4640      	mov	r0, r8
 8003714:	f7ff fef4 	bl	8003500 <_free_r>
 8003718:	e7e1      	b.n	80036de <_realloc_r+0x1e>
 800371a:	4635      	mov	r5, r6
 800371c:	e7df      	b.n	80036de <_realloc_r+0x1e>
	...

08003720 <_sbrk_r>:
 8003720:	b538      	push	{r3, r4, r5, lr}
 8003722:	4d06      	ldr	r5, [pc, #24]	; (800373c <_sbrk_r+0x1c>)
 8003724:	2300      	movs	r3, #0
 8003726:	4604      	mov	r4, r0
 8003728:	4608      	mov	r0, r1
 800372a:	602b      	str	r3, [r5, #0]
 800372c:	f7fd ff2a 	bl	8001584 <_sbrk>
 8003730:	1c43      	adds	r3, r0, #1
 8003732:	d102      	bne.n	800373a <_sbrk_r+0x1a>
 8003734:	682b      	ldr	r3, [r5, #0]
 8003736:	b103      	cbz	r3, 800373a <_sbrk_r+0x1a>
 8003738:	6023      	str	r3, [r4, #0]
 800373a:	bd38      	pop	{r3, r4, r5, pc}
 800373c:	200001ac 	.word	0x200001ac

08003740 <__malloc_lock>:
 8003740:	4801      	ldr	r0, [pc, #4]	; (8003748 <__malloc_lock+0x8>)
 8003742:	f000 b811 	b.w	8003768 <__retarget_lock_acquire_recursive>
 8003746:	bf00      	nop
 8003748:	200001b0 	.word	0x200001b0

0800374c <__malloc_unlock>:
 800374c:	4801      	ldr	r0, [pc, #4]	; (8003754 <__malloc_unlock+0x8>)
 800374e:	f000 b80c 	b.w	800376a <__retarget_lock_release_recursive>
 8003752:	bf00      	nop
 8003754:	200001b0 	.word	0x200001b0

08003758 <_malloc_usable_size_r>:
 8003758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800375c:	1f18      	subs	r0, r3, #4
 800375e:	2b00      	cmp	r3, #0
 8003760:	bfbc      	itt	lt
 8003762:	580b      	ldrlt	r3, [r1, r0]
 8003764:	18c0      	addlt	r0, r0, r3
 8003766:	4770      	bx	lr

08003768 <__retarget_lock_acquire_recursive>:
 8003768:	4770      	bx	lr

0800376a <__retarget_lock_release_recursive>:
 800376a:	4770      	bx	lr

0800376c <_init>:
 800376c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376e:	bf00      	nop
 8003770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003772:	bc08      	pop	{r3}
 8003774:	469e      	mov	lr, r3
 8003776:	4770      	bx	lr

08003778 <_fini>:
 8003778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800377a:	bf00      	nop
 800377c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800377e:	bc08      	pop	{r3}
 8003780:	469e      	mov	lr, r3
 8003782:	4770      	bx	lr
