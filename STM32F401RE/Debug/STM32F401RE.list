
STM32F401RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003540  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080036e0  080036e0  000136e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037c4  080037c4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080037c4  080037c4  000137c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037cc  080037cc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037cc  080037cc  000137cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037d0  080037d0  000137d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080037d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000078  0800384c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  0800384c  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009dae  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001839  00000000  00000000  00029e56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  0002b690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002c0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016274  00000000  00000000  0002ca08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ac2f  00000000  00000000  00042c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b3ce  00000000  00000000  0004d8ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d8c79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002de4  00000000  00000000  000d8ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080036c8 	.word	0x080036c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080036c8 	.word	0x080036c8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <CLCD_Delay>:
#include "CLCD.h"


//************************ Low Level Function *****************************************//
static void CLCD_Delay(uint16_t Time)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 80005ae:	88fb      	ldrh	r3, [r7, #6]
 80005b0:	4618      	mov	r0, r3
 80005b2:	f001 f879 	bl	80016a8 <HAL_Delay>
	
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}

080005be <CLCD_Write8>:
static void CLCD_Write8(CLCD_Name* LCD, uint8_t Data, uint8_t Mode)
{
 80005be:	b580      	push	{r7, lr}
 80005c0:	b082      	sub	sp, #8
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
 80005c6:	460b      	mov	r3, r1
 80005c8:	70fb      	strb	r3, [r7, #3]
 80005ca:	4613      	mov	r3, r2
 80005cc:	70bb      	strb	r3, [r7, #2]
	if(Mode == CLCD_COMMAND)
 80005ce:	78bb      	ldrb	r3, [r7, #2]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d108      	bne.n	80005e6 <CLCD_Write8+0x28>
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_RESET);// RS = 0, write cmd
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	6858      	ldr	r0, [r3, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	891b      	ldrh	r3, [r3, #8]
 80005dc:	2200      	movs	r2, #0
 80005de:	4619      	mov	r1, r3
 80005e0:	f001 fb34 	bl	8001c4c <HAL_GPIO_WritePin>
 80005e4:	e00a      	b.n	80005fc <CLCD_Write8+0x3e>
	}
	else if(Mode == CLCD_DATA)
 80005e6:	78bb      	ldrb	r3, [r7, #2]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d107      	bne.n	80005fc <CLCD_Write8+0x3e>
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_SET);// RS = 1, write data
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	6858      	ldr	r0, [r3, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	891b      	ldrh	r3, [r3, #8]
 80005f4:	2201      	movs	r2, #1
 80005f6:	4619      	mov	r1, r3
 80005f8:	f001 fb28 	bl	8001c4c <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD->D0_PORT, LCD->D0_PIN, Data&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	6958      	ldr	r0, [r3, #20]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	8b19      	ldrh	r1, [r3, #24]
 8000604:	78fb      	ldrb	r3, [r7, #3]
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	b2db      	uxtb	r3, r3
 800060c:	461a      	mov	r2, r3
 800060e:	f001 fb1d 	bl	8001c4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D1_PORT, LCD->D1_PIN, Data>>1&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	69d8      	ldr	r0, [r3, #28]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	8c19      	ldrh	r1, [r3, #32]
 800061a:	78fb      	ldrb	r3, [r7, #3]
 800061c:	085b      	lsrs	r3, r3, #1
 800061e:	b2db      	uxtb	r3, r3
 8000620:	f003 0301 	and.w	r3, r3, #1
 8000624:	b2db      	uxtb	r3, r3
 8000626:	461a      	mov	r2, r3
 8000628:	f001 fb10 	bl	8001c4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D2_PORT, LCD->D2_PIN, Data>>2&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 8000634:	78fb      	ldrb	r3, [r7, #3]
 8000636:	089b      	lsrs	r3, r3, #2
 8000638:	b2db      	uxtb	r3, r3
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	b2db      	uxtb	r3, r3
 8000640:	461a      	mov	r2, r3
 8000642:	f001 fb03 	bl	8001c4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D3_PORT, LCD->D3_PIN, Data>>3&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	8e19      	ldrh	r1, [r3, #48]	; 0x30
 800064e:	78fb      	ldrb	r3, [r7, #3]
 8000650:	08db      	lsrs	r3, r3, #3
 8000652:	b2db      	uxtb	r3, r3
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	b2db      	uxtb	r3, r3
 800065a:	461a      	mov	r2, r3
 800065c:	f001 faf6 	bl	8001c4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D4_PORT, LCD->D4_PIN, Data>>4&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 8000668:	78fb      	ldrb	r3, [r7, #3]
 800066a:	091b      	lsrs	r3, r3, #4
 800066c:	b2db      	uxtb	r3, r3
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	b2db      	uxtb	r3, r3
 8000674:	461a      	mov	r2, r3
 8000676:	f001 fae9 	bl	8001c4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D5_PORT, LCD->D5_PIN, Data>>5&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 8000684:	78fb      	ldrb	r3, [r7, #3]
 8000686:	095b      	lsrs	r3, r3, #5
 8000688:	b2db      	uxtb	r3, r3
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	b2db      	uxtb	r3, r3
 8000690:	461a      	mov	r2, r3
 8000692:	f001 fadb 	bl	8001c4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D6_PORT, LCD->D6_PIN, Data>>6&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
 80006a0:	78fb      	ldrb	r3, [r7, #3]
 80006a2:	099b      	lsrs	r3, r3, #6
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	461a      	mov	r2, r3
 80006ae:	f001 facd 	bl	8001c4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D7_PORT, LCD->D7_PIN, Data>>7&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	09db      	lsrs	r3, r3, #7
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	461a      	mov	r2, r3
 80006c4:	f001 fac2 	bl	8001c4c <HAL_GPIO_WritePin>
	
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	68d8      	ldr	r0, [r3, #12]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	8a1b      	ldrh	r3, [r3, #16]
 80006d0:	2200      	movs	r2, #0
 80006d2:	4619      	mov	r1, r3
 80006d4:	f001 faba 	bl	8001c4c <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 80006d8:	2001      	movs	r0, #1
 80006da:	f7ff ff63 	bl	80005a4 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_SET);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	68d8      	ldr	r0, [r3, #12]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	8a1b      	ldrh	r3, [r3, #16]
 80006e6:	2201      	movs	r2, #1
 80006e8:	4619      	mov	r1, r3
 80006ea:	f001 faaf 	bl	8001c4c <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 80006ee:	2001      	movs	r0, #1
 80006f0:	f7ff ff58 	bl	80005a4 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	68d8      	ldr	r0, [r3, #12]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	8a1b      	ldrh	r3, [r3, #16]
 80006fc:	2200      	movs	r2, #0
 80006fe:	4619      	mov	r1, r3
 8000700:	f001 faa4 	bl	8001c4c <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8000704:	2001      	movs	r0, #1
 8000706:	f7ff ff4d 	bl	80005a4 <CLCD_Delay>
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <CLCD_Write4>:
static void CLCD_Write4(CLCD_Name* LCD, uint8_t Data, uint8_t Mode)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	b084      	sub	sp, #16
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
 800071a:	460b      	mov	r3, r1
 800071c:	70fb      	strb	r3, [r7, #3]
 800071e:	4613      	mov	r3, r2
 8000720:	70bb      	strb	r3, [r7, #2]
	uint8_t Data_H = Data >>4;
 8000722:	78fb      	ldrb	r3, [r7, #3]
 8000724:	091b      	lsrs	r3, r3, #4
 8000726:	73fb      	strb	r3, [r7, #15]
	uint8_t Data_L = Data;
 8000728:	78fb      	ldrb	r3, [r7, #3]
 800072a:	73bb      	strb	r3, [r7, #14]
	if(Mode == CLCD_COMMAND)
 800072c:	78bb      	ldrb	r3, [r7, #2]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d108      	bne.n	8000744 <CLCD_Write4+0x32>
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_RESET);// RS = 0, write cmd
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	6858      	ldr	r0, [r3, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	891b      	ldrh	r3, [r3, #8]
 800073a:	2200      	movs	r2, #0
 800073c:	4619      	mov	r1, r3
 800073e:	f001 fa85 	bl	8001c4c <HAL_GPIO_WritePin>
 8000742:	e00a      	b.n	800075a <CLCD_Write4+0x48>
	}
	else if(Mode == CLCD_DATA)
 8000744:	78bb      	ldrb	r3, [r7, #2]
 8000746:	2b01      	cmp	r3, #1
 8000748:	d107      	bne.n	800075a <CLCD_Write4+0x48>
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_SET);// RS = 1, write data
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6858      	ldr	r0, [r3, #4]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	891b      	ldrh	r3, [r3, #8]
 8000752:	2201      	movs	r2, #1
 8000754:	4619      	mov	r1, r3
 8000756:	f001 fa79 	bl	8001c4c <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD->D4_PORT, LCD->D4_PIN, Data_H&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 8000762:	7bfb      	ldrb	r3, [r7, #15]
 8000764:	f003 0301 	and.w	r3, r3, #1
 8000768:	b2db      	uxtb	r3, r3
 800076a:	461a      	mov	r2, r3
 800076c:	f001 fa6e 	bl	8001c4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D5_PORT, LCD->D5_PIN, Data_H>>1&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	b2db      	uxtb	r3, r3
 8000780:	f003 0301 	and.w	r3, r3, #1
 8000784:	b2db      	uxtb	r3, r3
 8000786:	461a      	mov	r2, r3
 8000788:	f001 fa60 	bl	8001c4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D6_PORT, LCD->D6_PIN, Data_H>>2&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
 8000796:	7bfb      	ldrb	r3, [r7, #15]
 8000798:	089b      	lsrs	r3, r3, #2
 800079a:	b2db      	uxtb	r3, r3
 800079c:	f003 0301 	and.w	r3, r3, #1
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	461a      	mov	r2, r3
 80007a4:	f001 fa52 	bl	8001c4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D7_PORT, LCD->D7_PIN, Data_H>>3&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 80007b2:	7bfb      	ldrb	r3, [r7, #15]
 80007b4:	08db      	lsrs	r3, r3, #3
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	f003 0301 	and.w	r3, r3, #1
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	461a      	mov	r2, r3
 80007c0:	f001 fa44 	bl	8001c4c <HAL_GPIO_WritePin>
	
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	68d8      	ldr	r0, [r3, #12]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	8a1b      	ldrh	r3, [r3, #16]
 80007cc:	2200      	movs	r2, #0
 80007ce:	4619      	mov	r1, r3
 80007d0:	f001 fa3c 	bl	8001c4c <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 80007d4:	2001      	movs	r0, #1
 80007d6:	f7ff fee5 	bl	80005a4 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_SET);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	68d8      	ldr	r0, [r3, #12]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	8a1b      	ldrh	r3, [r3, #16]
 80007e2:	2201      	movs	r2, #1
 80007e4:	4619      	mov	r1, r3
 80007e6:	f001 fa31 	bl	8001c4c <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 80007ea:	2001      	movs	r0, #1
 80007ec:	f7ff feda 	bl	80005a4 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	68d8      	ldr	r0, [r3, #12]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	8a1b      	ldrh	r3, [r3, #16]
 80007f8:	2200      	movs	r2, #0
 80007fa:	4619      	mov	r1, r3
 80007fc:	f001 fa26 	bl	8001c4c <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8000800:	2001      	movs	r0, #1
 8000802:	f7ff fecf 	bl	80005a4 <CLCD_Delay>
	
	HAL_GPIO_WritePin(LCD->D4_PORT, LCD->D4_PIN, Data_L&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 800080e:	7bbb      	ldrb	r3, [r7, #14]
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	b2db      	uxtb	r3, r3
 8000816:	461a      	mov	r2, r3
 8000818:	f001 fa18 	bl	8001c4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D5_PORT, LCD->D5_PIN, Data_L>>1&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 8000826:	7bbb      	ldrb	r3, [r7, #14]
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	b2db      	uxtb	r3, r3
 800082c:	f003 0301 	and.w	r3, r3, #1
 8000830:	b2db      	uxtb	r3, r3
 8000832:	461a      	mov	r2, r3
 8000834:	f001 fa0a 	bl	8001c4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D6_PORT, LCD->D6_PIN, Data_L>>2&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
 8000842:	7bbb      	ldrb	r3, [r7, #14]
 8000844:	089b      	lsrs	r3, r3, #2
 8000846:	b2db      	uxtb	r3, r3
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	b2db      	uxtb	r3, r3
 800084e:	461a      	mov	r2, r3
 8000850:	f001 f9fc 	bl	8001c4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D7_PORT, LCD->D7_PIN, Data_L>>3&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 800085e:	7bbb      	ldrb	r3, [r7, #14]
 8000860:	08db      	lsrs	r3, r3, #3
 8000862:	b2db      	uxtb	r3, r3
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	b2db      	uxtb	r3, r3
 800086a:	461a      	mov	r2, r3
 800086c:	f001 f9ee 	bl	8001c4c <HAL_GPIO_WritePin>
	
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	68d8      	ldr	r0, [r3, #12]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	8a1b      	ldrh	r3, [r3, #16]
 8000878:	2200      	movs	r2, #0
 800087a:	4619      	mov	r1, r3
 800087c:	f001 f9e6 	bl	8001c4c <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8000880:	2001      	movs	r0, #1
 8000882:	f7ff fe8f 	bl	80005a4 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_SET);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	68d8      	ldr	r0, [r3, #12]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	8a1b      	ldrh	r3, [r3, #16]
 800088e:	2201      	movs	r2, #1
 8000890:	4619      	mov	r1, r3
 8000892:	f001 f9db 	bl	8001c4c <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8000896:	2001      	movs	r0, #1
 8000898:	f7ff fe84 	bl	80005a4 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	68d8      	ldr	r0, [r3, #12]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	8a1b      	ldrh	r3, [r3, #16]
 80008a4:	2200      	movs	r2, #0
 80008a6:	4619      	mov	r1, r3
 80008a8:	f001 f9d0 	bl	8001c4c <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 80008ac:	2001      	movs	r0, #1
 80008ae:	f7ff fe79 	bl	80005a4 <CLCD_Delay>
}
 80008b2:	bf00      	nop
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <CLCD_4BIT_Init>:

void CLCD_4BIT_Init(CLCD_Name* LCD, uint8_t Colum, uint8_t Row,
									GPIO_TypeDef* RS_PORT, uint16_t RS_PIN, GPIO_TypeDef* EN_PORT, uint16_t EN_PIN,
									GPIO_TypeDef* D4_PORT, uint16_t D4_PIN, GPIO_TypeDef* D5_PORT, uint16_t D5_PIN,
									GPIO_TypeDef* D6_PORT, uint16_t D6_PIN, GPIO_TypeDef* D7_PORT, uint16_t D7_PIN)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b084      	sub	sp, #16
 80008be:	af00      	add	r7, sp, #0
 80008c0:	60f8      	str	r0, [r7, #12]
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	460b      	mov	r3, r1
 80008c6:	72fb      	strb	r3, [r7, #11]
 80008c8:	4613      	mov	r3, r2
 80008ca:	72bb      	strb	r3, [r7, #10]
	LCD->MODE = LCD_4BITMODE;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	2200      	movs	r2, #0
 80008d0:	701a      	strb	r2, [r3, #0]
	LCD->COLUMS = Colum;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	7afa      	ldrb	r2, [r7, #11]
 80008d6:	705a      	strb	r2, [r3, #1]
	LCD->ROWS = Row;
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	7aba      	ldrb	r2, [r7, #10]
 80008dc:	709a      	strb	r2, [r3, #2]
	LCD->RS_PORT = RS_PORT;
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	605a      	str	r2, [r3, #4]
	LCD->RS_PIN = RS_PIN;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	8b3a      	ldrh	r2, [r7, #24]
 80008e8:	811a      	strh	r2, [r3, #8]
	LCD->EN_PORT = EN_PORT;
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	69fa      	ldr	r2, [r7, #28]
 80008ee:	60da      	str	r2, [r3, #12]
	LCD->EN_PIN = EN_PIN;
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	8c3a      	ldrh	r2, [r7, #32]
 80008f4:	821a      	strh	r2, [r3, #16]
	LCD->D4_PORT = D4_PORT;
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008fa:	635a      	str	r2, [r3, #52]	; 0x34
	LCD->D4_PIN = D4_PIN;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000900:	871a      	strh	r2, [r3, #56]	; 0x38
	LCD->D5_PORT = D5_PORT;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000906:	63da      	str	r2, [r3, #60]	; 0x3c
	LCD->D5_PIN = D5_PIN;
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800090c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	LCD->D6_PORT = D6_PORT;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000914:	645a      	str	r2, [r3, #68]	; 0x44
	LCD->D6_PIN = D6_PIN;
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800091a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	LCD->D7_PORT = D7_PORT;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000922:	64da      	str	r2, [r3, #76]	; 0x4c
	LCD->D7_PIN = D7_PIN;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800092a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	2228      	movs	r2, #40	; 0x28
 8000932:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	2206      	movs	r2, #6
 800093a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	220c      	movs	r2, #12
 8000942:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	2214      	movs	r2, #20
 800094a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	
	CLCD_Delay(50);
 800094e:	2032      	movs	r0, #50	; 0x32
 8000950:	f7ff fe28 	bl	80005a4 <CLCD_Delay>
	CLCD_Write4(LCD, 0x33, CLCD_COMMAND);
 8000954:	2200      	movs	r2, #0
 8000956:	2133      	movs	r1, #51	; 0x33
 8000958:	68f8      	ldr	r0, [r7, #12]
 800095a:	f7ff feda 	bl	8000712 <CLCD_Write4>
	CLCD_Delay(5);
 800095e:	2005      	movs	r0, #5
 8000960:	f7ff fe20 	bl	80005a4 <CLCD_Delay>
	CLCD_Write4(LCD, 0x33, CLCD_COMMAND);
 8000964:	2200      	movs	r2, #0
 8000966:	2133      	movs	r1, #51	; 0x33
 8000968:	68f8      	ldr	r0, [r7, #12]
 800096a:	f7ff fed2 	bl	8000712 <CLCD_Write4>
	CLCD_Delay(5);
 800096e:	2005      	movs	r0, #5
 8000970:	f7ff fe18 	bl	80005a4 <CLCD_Delay>
	CLCD_Write4(LCD, 0x32, CLCD_COMMAND);
 8000974:	2200      	movs	r2, #0
 8000976:	2132      	movs	r1, #50	; 0x32
 8000978:	68f8      	ldr	r0, [r7, #12]
 800097a:	f7ff feca 	bl	8000712 <CLCD_Write4>
	CLCD_Delay(5);
 800097e:	2005      	movs	r0, #5
 8000980:	f7ff fe10 	bl	80005a4 <CLCD_Delay>
	
	CLCD_Write4(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800098a:	2200      	movs	r2, #0
 800098c:	4619      	mov	r1, r3
 800098e:	68f8      	ldr	r0, [r7, #12]
 8000990:	f7ff febf 	bl	8000712 <CLCD_Write4>
	CLCD_Write4(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800099a:	2200      	movs	r2, #0
 800099c:	4619      	mov	r1, r3
 800099e:	68f8      	ldr	r0, [r7, #12]
 80009a0:	f7ff feb7 	bl	8000712 <CLCD_Write4>
	CLCD_Write4(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80009aa:	2200      	movs	r2, #0
 80009ac:	4619      	mov	r1, r3
 80009ae:	68f8      	ldr	r0, [r7, #12]
 80009b0:	f7ff feaf 	bl	8000712 <CLCD_Write4>
	CLCD_Write4(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80009ba:	2200      	movs	r2, #0
 80009bc:	4619      	mov	r1, r3
 80009be:	68f8      	ldr	r0, [r7, #12]
 80009c0:	f7ff fea7 	bl	8000712 <CLCD_Write4>
	
	CLCD_Write4(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2101      	movs	r1, #1
 80009c8:	68f8      	ldr	r0, [r7, #12]
 80009ca:	f7ff fea2 	bl	8000712 <CLCD_Write4>
	CLCD_Write4(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2102      	movs	r1, #2
 80009d2:	68f8      	ldr	r0, [r7, #12]
 80009d4:	f7ff fe9d 	bl	8000712 <CLCD_Write4>
}
 80009d8:	bf00      	nop
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <CLCD_SetCursor>:
void CLCD_SetCursor(CLCD_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	460b      	mov	r3, r1
 80009ea:	70fb      	strb	r3, [r7, #3]
 80009ec:	4613      	mov	r3, r2
 80009ee:	70bb      	strb	r3, [r7, #2]
	
	uint8_t DRAM_ADDRESS = 0x00;
 80009f0:	2300      	movs	r3, #0
 80009f2:	73fb      	strb	r3, [r7, #15]
	uint8_t DRAM_OFFSET[4] = {0x00, 0x40, 0x14, 0x54};
 80009f4:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <CLCD_SetCursor+0x8c>)
 80009f6:	60bb      	str	r3, [r7, #8]
	if(Xpos >= LCD->COLUMS)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	785b      	ldrb	r3, [r3, #1]
 80009fc:	78fa      	ldrb	r2, [r7, #3]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d303      	bcc.n	8000a0a <CLCD_SetCursor+0x2a>
	{
		Xpos = LCD->COLUMS - 1;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	785b      	ldrb	r3, [r3, #1]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	789b      	ldrb	r3, [r3, #2]
 8000a0e:	78ba      	ldrb	r2, [r7, #2]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d303      	bcc.n	8000a1c <CLCD_SetCursor+0x3c>
	{
		Ypos = LCD->ROWS -1;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	789b      	ldrb	r3, [r3, #2]
 8000a18:	3b01      	subs	r3, #1
 8000a1a:	70bb      	strb	r3, [r7, #2]
	}
	DRAM_ADDRESS = DRAM_OFFSET[Ypos] + Xpos;
 8000a1c:	78bb      	ldrb	r3, [r7, #2]
 8000a1e:	3310      	adds	r3, #16
 8000a20:	443b      	add	r3, r7
 8000a22:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000a26:	78fb      	ldrb	r3, [r7, #3]
 8000a28:	4413      	add	r3, r2
 8000a2a:	73fb      	strb	r3, [r7, #15]
	if(LCD->MODE == LCD_8BITMODE)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b10      	cmp	r3, #16
 8000a32:	d109      	bne.n	8000a48 <CLCD_SetCursor+0x68>
	{
		CLCD_Write8(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8000a34:	7bfb      	ldrb	r3, [r7, #15]
 8000a36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	4619      	mov	r1, r3
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f7ff fdbc 	bl	80005be <CLCD_Write8>
	}
	else if(LCD->MODE == LCD_4BITMODE)
	{
		CLCD_Write4(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
	}
}
 8000a46:	e00c      	b.n	8000a62 <CLCD_SetCursor+0x82>
	else if(LCD->MODE == LCD_4BITMODE)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d108      	bne.n	8000a62 <CLCD_SetCursor+0x82>
		CLCD_Write4(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	2200      	movs	r2, #0
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f7ff fe58 	bl	8000712 <CLCD_Write4>
}
 8000a62:	bf00      	nop
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	54144000 	.word	0x54144000

08000a70 <CLCD_WriteChar>:
void CLCD_WriteChar(CLCD_Name* LCD, char character)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	70fb      	strb	r3, [r7, #3]
	if(LCD->MODE == LCD_8BITMODE)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b10      	cmp	r3, #16
 8000a82:	d106      	bne.n	8000a92 <CLCD_WriteChar+0x22>
	{
		CLCD_Write8(LCD, character, CLCD_DATA);
 8000a84:	78fb      	ldrb	r3, [r7, #3]
 8000a86:	2201      	movs	r2, #1
 8000a88:	4619      	mov	r1, r3
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f7ff fd97 	bl	80005be <CLCD_Write8>
	}
	else if(LCD->MODE == LCD_4BITMODE)
	{
		CLCD_Write4(LCD, character, CLCD_DATA);
	}
}
 8000a90:	e009      	b.n	8000aa6 <CLCD_WriteChar+0x36>
	else if(LCD->MODE == LCD_4BITMODE)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d105      	bne.n	8000aa6 <CLCD_WriteChar+0x36>
		CLCD_Write4(LCD, character, CLCD_DATA);
 8000a9a:	78fb      	ldrb	r3, [r7, #3]
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff fe36 	bl	8000712 <CLCD_Write4>
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <CLCD_WriteString>:

void CLCD_WriteString(CLCD_Name* LCD, char *String)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
 8000ab6:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_WriteChar(LCD, *String++);
 8000ab8:	e007      	b.n	8000aca <CLCD_WriteString+0x1c>
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	1c5a      	adds	r2, r3, #1
 8000abe:	603a      	str	r2, [r7, #0]
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f7ff ffd3 	bl	8000a70 <CLCD_WriteChar>
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d1f3      	bne.n	8000aba <CLCD_WriteString+0xc>
}
 8000ad2:	bf00      	nop
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <CLCD_Clear>:

void CLCD_Clear(CLCD_Name* LCD)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	if(LCD->MODE == LCD_8BITMODE)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b10      	cmp	r3, #16
 8000aea:	d105      	bne.n	8000af8 <CLCD_Clear+0x1c>
	{
		CLCD_Write8(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2101      	movs	r1, #1
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff fd64 	bl	80005be <CLCD_Write8>
 8000af6:	e008      	b.n	8000b0a <CLCD_Clear+0x2e>
	}
	else if(LCD->MODE == LCD_4BITMODE)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d104      	bne.n	8000b0a <CLCD_Clear+0x2e>
	{
		CLCD_Write4(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2101      	movs	r1, #1
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f7ff fe04 	bl	8000712 <CLCD_Write4>
	}
	CLCD_Delay(5);
 8000b0a:	2005      	movs	r0, #5
 8000b0c:	f7ff fd4a 	bl	80005a4 <CLCD_Delay>
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <CLCD_CursorOn>:
	}
	CLCD_Delay(5);
}

void CLCD_CursorOn(CLCD_Name* LCD)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	LCD->DISPLAYCTRL |= LCD_CURSORON;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000b26:	f043 0302 	orr.w	r3, r3, #2
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	if(LCD->MODE == LCD_8BITMODE)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b10      	cmp	r3, #16
 8000b38:	d108      	bne.n	8000b4c <CLCD_CursorOn+0x34>
	{
		CLCD_Write8(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000b40:	2200      	movs	r2, #0
 8000b42:	4619      	mov	r1, r3
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff fd3a 	bl	80005be <CLCD_Write8>
	}
	else if(LCD->MODE == LCD_4BITMODE)
	{
		CLCD_Write4(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
	}
}
 8000b4a:	e00b      	b.n	8000b64 <CLCD_CursorOn+0x4c>
	else if(LCD->MODE == LCD_4BITMODE)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d107      	bne.n	8000b64 <CLCD_CursorOn+0x4c>
		CLCD_Write4(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f7ff fdd7 	bl	8000712 <CLCD_Write4>
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <check_clm>:
/* USER CODE BEGIN 0 */
CLCD_Name LCD1;
uint8_t Count;
char LCD_send[16];
int check_clm(uint16_t pin_var)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	80fb      	strh	r3, [r7, #6]
	int clm;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);		//Set all columns to logic 1 ie connected to Vcc
 8000b76:	2201      	movs	r2, #1
 8000b78:	21f0      	movs	r1, #240	; 0xf0
 8000b7a:	482c      	ldr	r0, [pc, #176]	; (8000c2c <check_clm+0xc0>)
 8000b7c:	f001 f866 	bl	8001c4c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);						//set first column to Gnd
 8000b80:	2200      	movs	r2, #0
 8000b82:	2110      	movs	r1, #16
 8000b84:	4829      	ldr	r0, [pc, #164]	; (8000c2c <check_clm+0xc0>)
 8000b86:	f001 f861 	bl	8001c4c <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, pin_var) == 0)
 8000b8a:	88fb      	ldrh	r3, [r7, #6]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4827      	ldr	r0, [pc, #156]	; (8000c2c <check_clm+0xc0>)
 8000b90:	f001 f844 	bl	8001c1c <HAL_GPIO_ReadPin>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d101      	bne.n	8000b9e <check_clm+0x32>
		clm = 1;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2110      	movs	r1, #16
 8000ba2:	4822      	ldr	r0, [pc, #136]	; (8000c2c <check_clm+0xc0>)
 8000ba4:	f001 f852 	bl	8001c4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);						//set second column to Gnd
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2120      	movs	r1, #32
 8000bac:	481f      	ldr	r0, [pc, #124]	; (8000c2c <check_clm+0xc0>)
 8000bae:	f001 f84d 	bl	8001c4c <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, pin_var) == 0)
 8000bb2:	88fb      	ldrh	r3, [r7, #6]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	481d      	ldr	r0, [pc, #116]	; (8000c2c <check_clm+0xc0>)
 8000bb8:	f001 f830 	bl	8001c1c <HAL_GPIO_ReadPin>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d101      	bne.n	8000bc6 <check_clm+0x5a>
		clm = 2;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2120      	movs	r1, #32
 8000bca:	4818      	ldr	r0, [pc, #96]	; (8000c2c <check_clm+0xc0>)
 8000bcc:	f001 f83e 	bl	8001c4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);						//set third column to Gnd
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2140      	movs	r1, #64	; 0x40
 8000bd4:	4815      	ldr	r0, [pc, #84]	; (8000c2c <check_clm+0xc0>)
 8000bd6:	f001 f839 	bl	8001c4c <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, pin_var) == 0)
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4813      	ldr	r0, [pc, #76]	; (8000c2c <check_clm+0xc0>)
 8000be0:	f001 f81c 	bl	8001c1c <HAL_GPIO_ReadPin>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d101      	bne.n	8000bee <check_clm+0x82>
		clm = 3;
 8000bea:	2303      	movs	r3, #3
 8000bec:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000bee:	2201      	movs	r2, #1
 8000bf0:	2140      	movs	r1, #64	; 0x40
 8000bf2:	480e      	ldr	r0, [pc, #56]	; (8000c2c <check_clm+0xc0>)
 8000bf4:	f001 f82a 	bl	8001c4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);						//set fourth column to Gnd
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2180      	movs	r1, #128	; 0x80
 8000bfc:	480b      	ldr	r0, [pc, #44]	; (8000c2c <check_clm+0xc0>)
 8000bfe:	f001 f825 	bl	8001c4c <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, pin_var) == 0)
 8000c02:	88fb      	ldrh	r3, [r7, #6]
 8000c04:	4619      	mov	r1, r3
 8000c06:	4809      	ldr	r0, [pc, #36]	; (8000c2c <check_clm+0xc0>)
 8000c08:	f001 f808 	bl	8001c1c <HAL_GPIO_ReadPin>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d101      	bne.n	8000c16 <check_clm+0xaa>
		clm = 4;
 8000c12:	2304      	movs	r3, #4
 8000c14:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);		//Set all columns to logic 0 ie connected to GND
 8000c16:	2200      	movs	r2, #0
 8000c18:	21f0      	movs	r1, #240	; 0xf0
 8000c1a:	4804      	ldr	r0, [pc, #16]	; (8000c2c <check_clm+0xc0>)
 8000c1c:	f001 f816 	bl	8001c4c <HAL_GPIO_WritePin>
	return clm;
 8000c20:	68fb      	ldr	r3, [r7, #12]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40020400 	.word	0x40020400

08000c30 <key_press>:

unsigned char key_press(void)
{
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b087      	sub	sp, #28
 8000c34:	af00      	add	r7, sp, #0
	int clm_var;
	unsigned char key_arr[4][4] = {{'7', '8', '9', '/'},{'4', '5', '6', 'x'},{'1', '2', '3', '-'},{'*', '0', '=', '+'}};
 8000c36:	4b29      	ldr	r3, [pc, #164]	; (8000cdc <key_press+0xac>)
 8000c38:	1d3c      	adds	r4, r7, #4
 8000c3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 0)
 8000c40:	2101      	movs	r1, #1
 8000c42:	4827      	ldr	r0, [pc, #156]	; (8000ce0 <key_press+0xb0>)
 8000c44:	f000 ffea 	bl	8001c1c <HAL_GPIO_ReadPin>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d10a      	bne.n	8000c64 <key_press+0x34>
	{
		clm_var = check_clm(GPIO_PIN_0);
 8000c4e:	2001      	movs	r0, #1
 8000c50:	f7ff ff8c 	bl	8000b6c <check_clm>
 8000c54:	6178      	str	r0, [r7, #20]
		return key_arr[0][clm_var-1];
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	3318      	adds	r3, #24
 8000c5c:	443b      	add	r3, r7
 8000c5e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000c62:	e036      	b.n	8000cd2 <key_press+0xa2>
	}
	else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 0)
 8000c64:	2102      	movs	r1, #2
 8000c66:	481e      	ldr	r0, [pc, #120]	; (8000ce0 <key_press+0xb0>)
 8000c68:	f000 ffd8 	bl	8001c1c <HAL_GPIO_ReadPin>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d10a      	bne.n	8000c88 <key_press+0x58>
	{
		clm_var = check_clm(GPIO_PIN_1);
 8000c72:	2002      	movs	r0, #2
 8000c74:	f7ff ff7a 	bl	8000b6c <check_clm>
 8000c78:	6178      	str	r0, [r7, #20]
		return key_arr[1][clm_var-1];
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	3318      	adds	r3, #24
 8000c80:	443b      	add	r3, r7
 8000c82:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000c86:	e024      	b.n	8000cd2 <key_press+0xa2>
	}
	else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 0)
 8000c88:	2104      	movs	r1, #4
 8000c8a:	4815      	ldr	r0, [pc, #84]	; (8000ce0 <key_press+0xb0>)
 8000c8c:	f000 ffc6 	bl	8001c1c <HAL_GPIO_ReadPin>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d10a      	bne.n	8000cac <key_press+0x7c>
	{
		clm_var = check_clm(GPIO_PIN_2);
 8000c96:	2004      	movs	r0, #4
 8000c98:	f7ff ff68 	bl	8000b6c <check_clm>
 8000c9c:	6178      	str	r0, [r7, #20]
		return key_arr[2][clm_var-1];
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	3318      	adds	r3, #24
 8000ca4:	443b      	add	r3, r7
 8000ca6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000caa:	e012      	b.n	8000cd2 <key_press+0xa2>
	}
	else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == 0)
 8000cac:	2108      	movs	r1, #8
 8000cae:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <key_press+0xb0>)
 8000cb0:	f000 ffb4 	bl	8001c1c <HAL_GPIO_ReadPin>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d10a      	bne.n	8000cd0 <key_press+0xa0>
	{
		clm_var = check_clm(GPIO_PIN_3);
 8000cba:	2008      	movs	r0, #8
 8000cbc:	f7ff ff56 	bl	8000b6c <check_clm>
 8000cc0:	6178      	str	r0, [r7, #20]
		return key_arr[3][clm_var-1];
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	3318      	adds	r3, #24
 8000cc8:	443b      	add	r3, r7
 8000cca:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000cce:	e000      	b.n	8000cd2 <key_press+0xa2>
	}
	else
		return '\0';
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	371c      	adds	r7, #28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd90      	pop	{r4, r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	080036e0 	.word	0x080036e0
 8000ce0:	40020400 	.word	0x40020400

08000ce4 <Disp_pass_key>:
char PW[11]; //Mang de luu mat khau khi nhap tu ban phim
char MK[6] = {'2','5','1','2','0','1'}; //Mang MK cua nguoi dung
int i = 0; //Tang chi so cho mang PW

void Disp_pass_key(char key_var)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
	if(key_var != '\0')
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d01f      	beq.n	8000d34 <Disp_pass_key+0x50>
	{
		if(key_var == 'x'){
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	2b78      	cmp	r3, #120	; 0x78
 8000cf8:	d118      	bne.n	8000d2c <Disp_pass_key+0x48>
			CLCD_Clear(&LCD1);
 8000cfa:	4810      	ldr	r0, [pc, #64]	; (8000d3c <Disp_pass_key+0x58>)
 8000cfc:	f7ff feee 	bl	8000adc <CLCD_Clear>
			for(int k = 0;k<i;k++)
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	e006      	b.n	8000d14 <Disp_pass_key+0x30>
			{
				CLCD_WriteChar(&LCD1,' ');
 8000d06:	2120      	movs	r1, #32
 8000d08:	480c      	ldr	r0, [pc, #48]	; (8000d3c <Disp_pass_key+0x58>)
 8000d0a:	f7ff feb1 	bl	8000a70 <CLCD_WriteChar>
			for(int k = 0;k<i;k++)
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	3301      	adds	r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <Disp_pass_key+0x5c>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	68fa      	ldr	r2, [r7, #12]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	dbf3      	blt.n	8000d06 <Disp_pass_key+0x22>
			}
			CLCD_Clear(&LCD1);
 8000d1e:	4807      	ldr	r0, [pc, #28]	; (8000d3c <Disp_pass_key+0x58>)
 8000d20:	f7ff fedc 	bl	8000adc <CLCD_Clear>
			i = 0;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <Disp_pass_key+0x5c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
		}
		else{
			CLCD_WriteChar(&LCD1,'*');
		}
	}
}
 8000d2a:	e003      	b.n	8000d34 <Disp_pass_key+0x50>
			CLCD_WriteChar(&LCD1,'*');
 8000d2c:	212a      	movs	r1, #42	; 0x2a
 8000d2e:	4803      	ldr	r0, [pc, #12]	; (8000d3c <Disp_pass_key+0x58>)
 8000d30:	f7ff fe9e 	bl	8000a70 <CLCD_WriteChar>
}
 8000d34:	bf00      	nop
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000124 	.word	0x20000124
 8000d40:	20000198 	.word	0x20000198

08000d44 <check>:
//Day La Code Cua Nhom 1
void check(char key_var,int *cnt){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	6039      	str	r1, [r7, #0]
 8000d4e:	71fb      	strb	r3, [r7, #7]
	if(key_var != '\0')
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f000 80a3 	beq.w	8000e9e <check+0x15a>
	{
		if(key_var >= '0' && key_var <= '9')
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	2b2f      	cmp	r3, #47	; 0x2f
 8000d5c:	d90c      	bls.n	8000d78 <check+0x34>
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	2b39      	cmp	r3, #57	; 0x39
 8000d62:	d809      	bhi.n	8000d78 <check+0x34>
		{
			PW[i] = key_var;
 8000d64:	4b4f      	ldr	r3, [pc, #316]	; (8000ea4 <check+0x160>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	494f      	ldr	r1, [pc, #316]	; (8000ea8 <check+0x164>)
 8000d6a:	79fa      	ldrb	r2, [r7, #7]
 8000d6c:	54ca      	strb	r2, [r1, r3]
			i++;
 8000d6e:	4b4d      	ldr	r3, [pc, #308]	; (8000ea4 <check+0x160>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	3301      	adds	r3, #1
 8000d74:	4a4b      	ldr	r2, [pc, #300]	; (8000ea4 <check+0x160>)
 8000d76:	6013      	str	r3, [r2, #0]
		}
		if(key_var == '=')
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	2b3d      	cmp	r3, #61	; 0x3d
 8000d7c:	f040 808f 	bne.w	8000e9e <check+0x15a>
		{
			if(strcmp(PW,MK) == 0)
 8000d80:	494a      	ldr	r1, [pc, #296]	; (8000eac <check+0x168>)
 8000d82:	4849      	ldr	r0, [pc, #292]	; (8000ea8 <check+0x164>)
 8000d84:	f7ff fa2c 	bl	80001e0 <strcmp>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d14c      	bne.n	8000e28 <check+0xe4>
			{
				CLCD_Clear(&LCD1);
 8000d8e:	4848      	ldr	r0, [pc, #288]	; (8000eb0 <check+0x16c>)
 8000d90:	f7ff fea4 	bl	8000adc <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2100      	movs	r1, #0
 8000d98:	4845      	ldr	r0, [pc, #276]	; (8000eb0 <check+0x16c>)
 8000d9a:	f7ff fe21 	bl	80009e0 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "DA MO KHOA!");
 8000d9e:	4945      	ldr	r1, [pc, #276]	; (8000eb4 <check+0x170>)
 8000da0:	4843      	ldr	r0, [pc, #268]	; (8000eb0 <check+0x16c>)
 8000da2:	f7ff fe84 	bl	8000aae <CLCD_WriteString>
				i = 0;
 8000da6:	4b3f      	ldr	r3, [pc, #252]	; (8000ea4 <check+0x160>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
				CLCD_SetCursor(&LCD1, 0, 1);
 8000dac:	2201      	movs	r2, #1
 8000dae:	2100      	movs	r1, #0
 8000db0:	483f      	ldr	r0, [pc, #252]	; (8000eb0 <check+0x16c>)
 8000db2:	f7ff fe15 	bl	80009e0 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "OPENED!");
 8000db6:	4940      	ldr	r1, [pc, #256]	; (8000eb8 <check+0x174>)
 8000db8:	483d      	ldr	r0, [pc, #244]	; (8000eb0 <check+0x16c>)
 8000dba:	f7ff fe78 	bl	8000aae <CLCD_WriteString>
				HAL_Delay(500);
 8000dbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dc2:	f000 fc71 	bl	80016a8 <HAL_Delay>
				CLCD_Clear(&LCD1);
 8000dc6:	483a      	ldr	r0, [pc, #232]	; (8000eb0 <check+0x16c>)
 8000dc8:	f7ff fe88 	bl	8000adc <CLCD_Clear>
				CLCD_WriteString(&LCD1, "XIN CHAO!!!!");
 8000dcc:	493b      	ldr	r1, [pc, #236]	; (8000ebc <check+0x178>)
 8000dce:	4838      	ldr	r0, [pc, #224]	; (8000eb0 <check+0x16c>)
 8000dd0:	f7ff fe6d 	bl	8000aae <CLCD_WriteString>
				HAL_Delay(2000);
 8000dd4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000dd8:	f000 fc66 	bl	80016a8 <HAL_Delay>

				//Sao khi da mo khoa thanh cong
				CLCD_Clear(&LCD1);
 8000ddc:	4834      	ldr	r0, [pc, #208]	; (8000eb0 <check+0x16c>)
 8000dde:	f7ff fe7d 	bl	8000adc <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	4832      	ldr	r0, [pc, #200]	; (8000eb0 <check+0x16c>)
 8000de8:	f7ff fdfa 	bl	80009e0 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "WELCOME!!!");
 8000dec:	4934      	ldr	r1, [pc, #208]	; (8000ec0 <check+0x17c>)
 8000dee:	4830      	ldr	r0, [pc, #192]	; (8000eb0 <check+0x16c>)
 8000df0:	f7ff fe5d 	bl	8000aae <CLCD_WriteString>
				HAL_Delay(200);
 8000df4:	20c8      	movs	r0, #200	; 0xc8
 8000df6:	f000 fc57 	bl	80016a8 <HAL_Delay>
				CLCD_Clear(&LCD1);
 8000dfa:	482d      	ldr	r0, [pc, #180]	; (8000eb0 <check+0x16c>)
 8000dfc:	f7ff fe6e 	bl	8000adc <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2100      	movs	r1, #0
 8000e04:	482a      	ldr	r0, [pc, #168]	; (8000eb0 <check+0x16c>)
 8000e06:	f7ff fdeb 	bl	80009e0 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "ENTER PASSWORD:");
 8000e0a:	492e      	ldr	r1, [pc, #184]	; (8000ec4 <check+0x180>)
 8000e0c:	4828      	ldr	r0, [pc, #160]	; (8000eb0 <check+0x16c>)
 8000e0e:	f7ff fe4e 	bl	8000aae <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8000e12:	2201      	movs	r2, #1
 8000e14:	2100      	movs	r1, #0
 8000e16:	4826      	ldr	r0, [pc, #152]	; (8000eb0 <check+0x16c>)
 8000e18:	f7ff fde2 	bl	80009e0 <CLCD_SetCursor>
				CLCD_CursorOn(&LCD1);
 8000e1c:	4824      	ldr	r0, [pc, #144]	; (8000eb0 <check+0x16c>)
 8000e1e:	f7ff fe7b 	bl	8000b18 <CLCD_CursorOn>
				cnt = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	603b      	str	r3, [r7, #0]
				return;
 8000e26:	e03a      	b.n	8000e9e <check+0x15a>
			}
			else
			{
				*cnt += 1;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	1c5a      	adds	r2, r3, #1
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	601a      	str	r2, [r3, #0]
				CLCD_Clear(&LCD1);
 8000e32:	481f      	ldr	r0, [pc, #124]	; (8000eb0 <check+0x16c>)
 8000e34:	f7ff fe52 	bl	8000adc <CLCD_Clear>
				CLCD_WriteString(&LCD1, "INCORRECT!");
 8000e38:	4923      	ldr	r1, [pc, #140]	; (8000ec8 <check+0x184>)
 8000e3a:	481d      	ldr	r0, [pc, #116]	; (8000eb0 <check+0x16c>)
 8000e3c:	f7ff fe37 	bl	8000aae <CLCD_WriteString>
				sprintf(LCD_send, " Dem:%d", *cnt);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4921      	ldr	r1, [pc, #132]	; (8000ecc <check+0x188>)
 8000e48:	4821      	ldr	r0, [pc, #132]	; (8000ed0 <check+0x18c>)
 8000e4a:	f001 ffcf 	bl	8002dec <siprintf>
				CLCD_WriteString(&LCD1, LCD_send);
 8000e4e:	4920      	ldr	r1, [pc, #128]	; (8000ed0 <check+0x18c>)
 8000e50:	4817      	ldr	r0, [pc, #92]	; (8000eb0 <check+0x16c>)
 8000e52:	f7ff fe2c 	bl	8000aae <CLCD_WriteString>
				if(*cnt == 5)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2b05      	cmp	r3, #5
 8000e5c:	d108      	bne.n	8000e70 <check+0x12c>
				{
					CLCD_SetCursor(&LCD1, 0, 1);
 8000e5e:	2201      	movs	r2, #1
 8000e60:	2100      	movs	r1, #0
 8000e62:	4813      	ldr	r0, [pc, #76]	; (8000eb0 <check+0x16c>)
 8000e64:	f7ff fdbc 	bl	80009e0 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "CANH BAO MUC 3!");
 8000e68:	491a      	ldr	r1, [pc, #104]	; (8000ed4 <check+0x190>)
 8000e6a:	4811      	ldr	r0, [pc, #68]	; (8000eb0 <check+0x16c>)
 8000e6c:	f7ff fe1f 	bl	8000aae <CLCD_WriteString>
				}
				i = 0;
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <check+0x160>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
				HAL_Delay(300);
 8000e76:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e7a:	f000 fc15 	bl	80016a8 <HAL_Delay>
				if(*cnt < 5){
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	dc0b      	bgt.n	8000e9e <check+0x15a>
					CLCD_Clear(&LCD1);
 8000e86:	480a      	ldr	r0, [pc, #40]	; (8000eb0 <check+0x16c>)
 8000e88:	f7ff fe28 	bl	8000adc <CLCD_Clear>
					CLCD_WriteString(&LCD1, "ENTER AGAIN:");
 8000e8c:	4912      	ldr	r1, [pc, #72]	; (8000ed8 <check+0x194>)
 8000e8e:	4808      	ldr	r0, [pc, #32]	; (8000eb0 <check+0x16c>)
 8000e90:	f7ff fe0d 	bl	8000aae <CLCD_WriteString>
					CLCD_SetCursor(&LCD1, 0, 1);
 8000e94:	2201      	movs	r2, #1
 8000e96:	2100      	movs	r1, #0
 8000e98:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <check+0x16c>)
 8000e9a:	f7ff fda1 	bl	80009e0 <CLCD_SetCursor>
				}
			}
		}
	}
}
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000198 	.word	0x20000198
 8000ea8:	2000018c 	.word	0x2000018c
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	20000124 	.word	0x20000124
 8000eb4:	080036f0 	.word	0x080036f0
 8000eb8:	080036fc 	.word	0x080036fc
 8000ebc:	08003704 	.word	0x08003704
 8000ec0:	08003714 	.word	0x08003714
 8000ec4:	08003720 	.word	0x08003720
 8000ec8:	08003730 	.word	0x08003730
 8000ecc:	0800373c 	.word	0x0800373c
 8000ed0:	2000017c 	.word	0x2000017c
 8000ed4:	08003744 	.word	0x08003744
 8000ed8:	08003754 	.word	0x08003754

08000edc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000ee4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ee8:	4803      	ldr	r0, [pc, #12]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000eea:	f000 fec8 	bl	8001c7e <HAL_GPIO_TogglePin>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40020800 	.word	0x40020800

08000efc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08e      	sub	sp, #56	; 0x38
 8000f00:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE BEGIN 1 */
	char var1; //luu ky tu tuong ung tren KeyPAD
	int cnt = 0; //Dem xem so lan da nhap mat khau sai
 8000f02:	2300      	movs	r3, #0
 8000f04:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f06:	f000 fb5d 	bl	80015c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f0a:	f000 f8c5 	bl	8001098 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0e:	f000 f9bd 	bl	800128c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f12:	f000 f921 	bl	8001158 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000f16:	f000 f96b 	bl	80011f0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start_IT(&htim2);
 8000f1a:	4856      	ldr	r0, [pc, #344]	; (8001074 <main+0x178>)
 8000f1c:	f001 fb3e 	bl	800259c <HAL_TIM_Base_Start_IT>
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 8000f20:	2201      	movs	r2, #1
 8000f22:	210f      	movs	r1, #15
 8000f24:	4854      	ldr	r0, [pc, #336]	; (8001078 <main+0x17c>)
 8000f26:	f000 fe91 	bl	8001c4c <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	21f0      	movs	r1, #240	; 0xf0
 8000f2e:	4852      	ldr	r0, [pc, #328]	; (8001078 <main+0x17c>)
 8000f30:	f000 fe8c 	bl	8001c4c <HAL_GPIO_WritePin>
  	CLCD_4BIT_Init(&LCD1, 16, 2, CS_GPIO_Port, CS_Pin, EN_GPIO_Port, EN_Pin,
 8000f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f38:	930a      	str	r3, [sp, #40]	; 0x28
 8000f3a:	4b50      	ldr	r3, [pc, #320]	; (800107c <main+0x180>)
 8000f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8000f3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f42:	9308      	str	r3, [sp, #32]
 8000f44:	4b4d      	ldr	r3, [pc, #308]	; (800107c <main+0x180>)
 8000f46:	9307      	str	r3, [sp, #28]
 8000f48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f4c:	9306      	str	r3, [sp, #24]
 8000f4e:	4b4b      	ldr	r3, [pc, #300]	; (800107c <main+0x180>)
 8000f50:	9305      	str	r3, [sp, #20]
 8000f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f56:	9304      	str	r3, [sp, #16]
 8000f58:	4b47      	ldr	r3, [pc, #284]	; (8001078 <main+0x17c>)
 8000f5a:	9303      	str	r3, [sp, #12]
 8000f5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f60:	9302      	str	r3, [sp, #8]
 8000f62:	4b46      	ldr	r3, [pc, #280]	; (800107c <main+0x180>)
 8000f64:	9301      	str	r3, [sp, #4]
 8000f66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	4b43      	ldr	r3, [pc, #268]	; (800107c <main+0x180>)
 8000f6e:	2202      	movs	r2, #2
 8000f70:	2110      	movs	r1, #16
 8000f72:	4843      	ldr	r0, [pc, #268]	; (8001080 <main+0x184>)
 8000f74:	f7ff fca1 	bl	80008ba <CLCD_4BIT_Init>
  										D4_GPIO_Port, D4_Pin, D5_GPIO_Port, D5_Pin,
  										D6_GPIO_Port, D6_Pin, D7_GPIO_Port, D7_Pin);
  	CLCD_SetCursor(&LCD1, 0, 0);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4840      	ldr	r0, [pc, #256]	; (8001080 <main+0x184>)
 8000f7e:	f7ff fd2f 	bl	80009e0 <CLCD_SetCursor>
  	CLCD_WriteString(&LCD1, "WELCOME!!!");
 8000f82:	4940      	ldr	r1, [pc, #256]	; (8001084 <main+0x188>)
 8000f84:	483e      	ldr	r0, [pc, #248]	; (8001080 <main+0x184>)
 8000f86:	f7ff fd92 	bl	8000aae <CLCD_WriteString>
  	HAL_Delay(200);
 8000f8a:	20c8      	movs	r0, #200	; 0xc8
 8000f8c:	f000 fb8c 	bl	80016a8 <HAL_Delay>
  	CLCD_Clear(&LCD1);
 8000f90:	483b      	ldr	r0, [pc, #236]	; (8001080 <main+0x184>)
 8000f92:	f7ff fda3 	bl	8000adc <CLCD_Clear>
  	CLCD_SetCursor(&LCD1, 0, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4839      	ldr	r0, [pc, #228]	; (8001080 <main+0x184>)
 8000f9c:	f7ff fd20 	bl	80009e0 <CLCD_SetCursor>
  	CLCD_WriteString(&LCD1, "ENTER PASSWORD:");
 8000fa0:	4939      	ldr	r1, [pc, #228]	; (8001088 <main+0x18c>)
 8000fa2:	4837      	ldr	r0, [pc, #220]	; (8001080 <main+0x184>)
 8000fa4:	f7ff fd83 	bl	8000aae <CLCD_WriteString>
  	CLCD_SetCursor(&LCD1, 0, 1);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	2100      	movs	r1, #0
 8000fac:	4834      	ldr	r0, [pc, #208]	; (8001080 <main+0x184>)
 8000fae:	f7ff fd17 	bl	80009e0 <CLCD_SetCursor>
  	CLCD_CursorOn(&LCD1);
 8000fb2:	4833      	ldr	r0, [pc, #204]	; (8001080 <main+0x184>)
 8000fb4:	f7ff fdb0 	bl	8000b18 <CLCD_CursorOn>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	var1 = key_press();
 8000fb8:	f7ff fe3a 	bl	8000c30 <key_press>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	71fb      	strb	r3, [r7, #7]
	Disp_pass_key(var1);
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fe8e 	bl	8000ce4 <Disp_pass_key>
	check(var1,&cnt);
 8000fc8:	463a      	mov	r2, r7
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	4611      	mov	r1, r2
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff feb8 	bl	8000d44 <check>
	if(cnt == 5)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	2b05      	cmp	r3, #5
 8000fd8:	d147      	bne.n	800106a <main+0x16e>
	{
		HAL_Delay(500);
 8000fda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fde:	f000 fb63 	bl	80016a8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fe8:	4828      	ldr	r0, [pc, #160]	; (800108c <main+0x190>)
 8000fea:	f000 fe2f 	bl	8001c4c <HAL_GPIO_WritePin>
		CLCD_Clear(&LCD1);
 8000fee:	4824      	ldr	r0, [pc, #144]	; (8001080 <main+0x184>)
 8000ff0:	f7ff fd74 	bl	8000adc <CLCD_Clear>
		CLCD_SetCursor(&LCD1, 0, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4821      	ldr	r0, [pc, #132]	; (8001080 <main+0x184>)
 8000ffa:	f7ff fcf1 	bl	80009e0 <CLCD_SetCursor>
		CLCD_WriteString(&LCD1, "CO KE DOT NHAP!");
 8000ffe:	4924      	ldr	r1, [pc, #144]	; (8001090 <main+0x194>)
 8001000:	481f      	ldr	r0, [pc, #124]	; (8001080 <main+0x184>)
 8001002:	f7ff fd54 	bl	8000aae <CLCD_WriteString>
		CLCD_SetCursor(&LCD1, 0, 1);
 8001006:	2201      	movs	r2, #1
 8001008:	2100      	movs	r1, #0
 800100a:	481d      	ldr	r0, [pc, #116]	; (8001080 <main+0x184>)
 800100c:	f7ff fce8 	bl	80009e0 <CLCD_SetCursor>
		CLCD_WriteString(&LCD1, "WARNING!!!");
 8001010:	4920      	ldr	r1, [pc, #128]	; (8001094 <main+0x198>)
 8001012:	481b      	ldr	r0, [pc, #108]	; (8001080 <main+0x184>)
 8001014:	f7ff fd4b 	bl	8000aae <CLCD_WriteString>
		HAL_Delay(2000);
 8001018:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800101c:	f000 fb44 	bl	80016a8 <HAL_Delay>
		//Sau khi thong bao co ke dot nhap:
		CLCD_Clear(&LCD1);
 8001020:	4817      	ldr	r0, [pc, #92]	; (8001080 <main+0x184>)
 8001022:	f7ff fd5b 	bl	8000adc <CLCD_Clear>
		CLCD_SetCursor(&LCD1, 0, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2100      	movs	r1, #0
 800102a:	4815      	ldr	r0, [pc, #84]	; (8001080 <main+0x184>)
 800102c:	f7ff fcd8 	bl	80009e0 <CLCD_SetCursor>
		CLCD_WriteString(&LCD1, "WELCOME!!!");
 8001030:	4914      	ldr	r1, [pc, #80]	; (8001084 <main+0x188>)
 8001032:	4813      	ldr	r0, [pc, #76]	; (8001080 <main+0x184>)
 8001034:	f7ff fd3b 	bl	8000aae <CLCD_WriteString>
	  	HAL_Delay(200);
 8001038:	20c8      	movs	r0, #200	; 0xc8
 800103a:	f000 fb35 	bl	80016a8 <HAL_Delay>
		CLCD_Clear(&LCD1);
 800103e:	4810      	ldr	r0, [pc, #64]	; (8001080 <main+0x184>)
 8001040:	f7ff fd4c 	bl	8000adc <CLCD_Clear>
		CLCD_SetCursor(&LCD1, 0, 0);
 8001044:	2200      	movs	r2, #0
 8001046:	2100      	movs	r1, #0
 8001048:	480d      	ldr	r0, [pc, #52]	; (8001080 <main+0x184>)
 800104a:	f7ff fcc9 	bl	80009e0 <CLCD_SetCursor>
		CLCD_WriteString(&LCD1, "ENTER PASSWORD:");
 800104e:	490e      	ldr	r1, [pc, #56]	; (8001088 <main+0x18c>)
 8001050:	480b      	ldr	r0, [pc, #44]	; (8001080 <main+0x184>)
 8001052:	f7ff fd2c 	bl	8000aae <CLCD_WriteString>
		CLCD_SetCursor(&LCD1, 0, 1);
 8001056:	2201      	movs	r2, #1
 8001058:	2100      	movs	r1, #0
 800105a:	4809      	ldr	r0, [pc, #36]	; (8001080 <main+0x184>)
 800105c:	f7ff fcc0 	bl	80009e0 <CLCD_SetCursor>
		CLCD_CursorOn(&LCD1);
 8001060:	4807      	ldr	r0, [pc, #28]	; (8001080 <main+0x184>)
 8001062:	f7ff fd59 	bl	8000b18 <CLCD_CursorOn>
		cnt = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	603b      	str	r3, [r7, #0]
	}
	HAL_Delay(150);
 800106a:	2096      	movs	r0, #150	; 0x96
 800106c:	f000 fb1c 	bl	80016a8 <HAL_Delay>
	var1 = key_press();
 8001070:	e7a2      	b.n	8000fb8 <main+0xbc>
 8001072:	bf00      	nop
 8001074:	20000094 	.word	0x20000094
 8001078:	40020400 	.word	0x40020400
 800107c:	40020000 	.word	0x40020000
 8001080:	20000124 	.word	0x20000124
 8001084:	08003714 	.word	0x08003714
 8001088:	08003720 	.word	0x08003720
 800108c:	40020800 	.word	0x40020800
 8001090:	08003764 	.word	0x08003764
 8001094:	08003774 	.word	0x08003774

08001098 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b094      	sub	sp, #80	; 0x50
 800109c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109e:	f107 0320 	add.w	r3, r7, #32
 80010a2:	2230      	movs	r2, #48	; 0x30
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f001 fe98 	bl	8002ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	4b23      	ldr	r3, [pc, #140]	; (8001150 <SystemClock_Config+0xb8>)
 80010c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c4:	4a22      	ldr	r2, [pc, #136]	; (8001150 <SystemClock_Config+0xb8>)
 80010c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ca:	6413      	str	r3, [r2, #64]	; 0x40
 80010cc:	4b20      	ldr	r3, [pc, #128]	; (8001150 <SystemClock_Config+0xb8>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010d8:	2300      	movs	r3, #0
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <SystemClock_Config+0xbc>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010e4:	4a1b      	ldr	r2, [pc, #108]	; (8001154 <SystemClock_Config+0xbc>)
 80010e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	4b19      	ldr	r3, [pc, #100]	; (8001154 <SystemClock_Config+0xbc>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010f8:	2302      	movs	r3, #2
 80010fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010fc:	2301      	movs	r3, #1
 80010fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001100:	2310      	movs	r3, #16
 8001102:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001104:	2300      	movs	r3, #0
 8001106:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001108:	f107 0320 	add.w	r3, r7, #32
 800110c:	4618      	mov	r0, r3
 800110e:	f000 fdd1 	bl	8001cb4 <HAL_RCC_OscConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001118:	f000 f944 	bl	80013a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111c:	230f      	movs	r3, #15
 800111e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001120:	2300      	movs	r3, #0
 8001122:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001128:	2300      	movs	r3, #0
 800112a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f001 f834 	bl	80021a4 <HAL_RCC_ClockConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001142:	f000 f92f 	bl	80013a4 <Error_Handler>
  }
}
 8001146:	bf00      	nop
 8001148:	3750      	adds	r7, #80	; 0x50
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40023800 	.word	0x40023800
 8001154:	40007000 	.word	0x40007000

08001158 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115e:	f107 0308 	add.w	r3, r7, #8
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116c:	463b      	mov	r3, r7
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001174:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <MX_TIM2_Init+0x94>)
 8001176:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800117a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000;
 800117c:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <MX_TIM2_Init+0x94>)
 800117e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001182:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001184:	4b19      	ldr	r3, [pc, #100]	; (80011ec <MX_TIM2_Init+0x94>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 149;
 800118a:	4b18      	ldr	r3, [pc, #96]	; (80011ec <MX_TIM2_Init+0x94>)
 800118c:	2295      	movs	r2, #149	; 0x95
 800118e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001190:	4b16      	ldr	r3, [pc, #88]	; (80011ec <MX_TIM2_Init+0x94>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <MX_TIM2_Init+0x94>)
 8001198:	2280      	movs	r2, #128	; 0x80
 800119a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800119c:	4813      	ldr	r0, [pc, #76]	; (80011ec <MX_TIM2_Init+0x94>)
 800119e:	f001 f9ad 	bl	80024fc <HAL_TIM_Base_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011a8:	f000 f8fc 	bl	80013a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011b2:	f107 0308 	add.w	r3, r7, #8
 80011b6:	4619      	mov	r1, r3
 80011b8:	480c      	ldr	r0, [pc, #48]	; (80011ec <MX_TIM2_Init+0x94>)
 80011ba:	f001 fb59 	bl	8002870 <HAL_TIM_ConfigClockSource>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011c4:	f000 f8ee 	bl	80013a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c8:	2300      	movs	r3, #0
 80011ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011d0:	463b      	mov	r3, r7
 80011d2:	4619      	mov	r1, r3
 80011d4:	4805      	ldr	r0, [pc, #20]	; (80011ec <MX_TIM2_Init+0x94>)
 80011d6:	f001 fd55 	bl	8002c84 <HAL_TIMEx_MasterConfigSynchronization>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011e0:	f000 f8e0 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000094 	.word	0x20000094

080011f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001204:	463b      	mov	r3, r7
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800120c:	4b1d      	ldr	r3, [pc, #116]	; (8001284 <MX_TIM4_Init+0x94>)
 800120e:	4a1e      	ldr	r2, [pc, #120]	; (8001288 <MX_TIM4_Init+0x98>)
 8001210:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16000;
 8001212:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <MX_TIM4_Init+0x94>)
 8001214:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001218:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121a:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <MX_TIM4_Init+0x94>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 8001220:	4b18      	ldr	r3, [pc, #96]	; (8001284 <MX_TIM4_Init+0x94>)
 8001222:	22c7      	movs	r2, #199	; 0xc7
 8001224:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001226:	4b17      	ldr	r3, [pc, #92]	; (8001284 <MX_TIM4_Init+0x94>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800122c:	4b15      	ldr	r3, [pc, #84]	; (8001284 <MX_TIM4_Init+0x94>)
 800122e:	2280      	movs	r2, #128	; 0x80
 8001230:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001232:	4814      	ldr	r0, [pc, #80]	; (8001284 <MX_TIM4_Init+0x94>)
 8001234:	f001 f962 	bl	80024fc <HAL_TIM_Base_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800123e:	f000 f8b1 	bl	80013a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001242:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001246:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001248:	f107 0308 	add.w	r3, r7, #8
 800124c:	4619      	mov	r1, r3
 800124e:	480d      	ldr	r0, [pc, #52]	; (8001284 <MX_TIM4_Init+0x94>)
 8001250:	f001 fb0e 	bl	8002870 <HAL_TIM_ConfigClockSource>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800125a:	f000 f8a3 	bl	80013a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125e:	2300      	movs	r3, #0
 8001260:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001266:	463b      	mov	r3, r7
 8001268:	4619      	mov	r1, r3
 800126a:	4806      	ldr	r0, [pc, #24]	; (8001284 <MX_TIM4_Init+0x94>)
 800126c:	f001 fd0a 	bl	8002c84 <HAL_TIMEx_MasterConfigSynchronization>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001276:	f000 f895 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200000dc 	.word	0x200000dc
 8001288:	40000800 	.word	0x40000800

0800128c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001292:	f107 030c 	add.w	r3, r7, #12
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	4b3b      	ldr	r3, [pc, #236]	; (8001394 <MX_GPIO_Init+0x108>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a3a      	ldr	r2, [pc, #232]	; (8001394 <MX_GPIO_Init+0x108>)
 80012ac:	f043 0304 	orr.w	r3, r3, #4
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b38      	ldr	r3, [pc, #224]	; (8001394 <MX_GPIO_Init+0x108>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0304 	and.w	r3, r3, #4
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	4b34      	ldr	r3, [pc, #208]	; (8001394 <MX_GPIO_Init+0x108>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a33      	ldr	r2, [pc, #204]	; (8001394 <MX_GPIO_Init+0x108>)
 80012c8:	f043 0302 	orr.w	r3, r3, #2
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b31      	ldr	r3, [pc, #196]	; (8001394 <MX_GPIO_Init+0x108>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	603b      	str	r3, [r7, #0]
 80012de:	4b2d      	ldr	r3, [pc, #180]	; (8001394 <MX_GPIO_Init+0x108>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a2c      	ldr	r2, [pc, #176]	; (8001394 <MX_GPIO_Init+0x108>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b2a      	ldr	r3, [pc, #168]	; (8001394 <MX_GPIO_Init+0x108>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_12, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80012fc:	4826      	ldr	r0, [pc, #152]	; (8001398 <MX_GPIO_Init+0x10c>)
 80012fe:	f000 fca5 	bl	8001c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001302:	2200      	movs	r2, #0
 8001304:	f248 01f0 	movw	r1, #33008	; 0x80f0
 8001308:	4824      	ldr	r0, [pc, #144]	; (800139c <MX_GPIO_Init+0x110>)
 800130a:	f000 fc9f 	bl	8001c4c <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8001314:	4822      	ldr	r0, [pc, #136]	; (80013a0 <MX_GPIO_Init+0x114>)
 8001316:	f000 fc99 	bl	8001c4c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 800131a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800131e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001320:	2301      	movs	r3, #1
 8001322:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132c:	f107 030c 	add.w	r3, r7, #12
 8001330:	4619      	mov	r1, r3
 8001332:	4819      	ldr	r0, [pc, #100]	; (8001398 <MX_GPIO_Init+0x10c>)
 8001334:	f000 faee 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001338:	230f      	movs	r3, #15
 800133a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133c:	2300      	movs	r3, #0
 800133e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001340:	2301      	movs	r3, #1
 8001342:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	4619      	mov	r1, r3
 800134a:	4814      	ldr	r0, [pc, #80]	; (800139c <MX_GPIO_Init+0x110>)
 800134c:	f000 fae2 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001350:	f248 03f0 	movw	r3, #33008	; 0x80f0
 8001354:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001356:	2301      	movs	r3, #1
 8001358:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001362:	f107 030c 	add.w	r3, r7, #12
 8001366:	4619      	mov	r1, r3
 8001368:	480c      	ldr	r0, [pc, #48]	; (800139c <MX_GPIO_Init+0x110>)
 800136a:	f000 fad3 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800136e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001372:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001374:	2301      	movs	r3, #1
 8001376:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001380:	f107 030c 	add.w	r3, r7, #12
 8001384:	4619      	mov	r1, r3
 8001386:	4806      	ldr	r0, [pc, #24]	; (80013a0 <MX_GPIO_Init+0x114>)
 8001388:	f000 fac4 	bl	8001914 <HAL_GPIO_Init>

}
 800138c:	bf00      	nop
 800138e:	3720      	adds	r7, #32
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40023800 	.word	0x40023800
 8001398:	40020800 	.word	0x40020800
 800139c:	40020400 	.word	0x40020400
 80013a0:	40020000 	.word	0x40020000

080013a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a8:	b672      	cpsid	i
}
 80013aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ac:	e7fe      	b.n	80013ac <Error_Handler+0x8>
	...

080013b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <HAL_MspInit+0x4c>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	4a0f      	ldr	r2, [pc, #60]	; (80013fc <HAL_MspInit+0x4c>)
 80013c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c4:	6453      	str	r3, [r2, #68]	; 0x44
 80013c6:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <HAL_MspInit+0x4c>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	603b      	str	r3, [r7, #0]
 80013d6:	4b09      	ldr	r3, [pc, #36]	; (80013fc <HAL_MspInit+0x4c>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	4a08      	ldr	r2, [pc, #32]	; (80013fc <HAL_MspInit+0x4c>)
 80013dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e0:	6413      	str	r3, [r2, #64]	; 0x40
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_MspInit+0x4c>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800

08001400 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001410:	d116      	bne.n	8001440 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	4b16      	ldr	r3, [pc, #88]	; (8001470 <HAL_TIM_Base_MspInit+0x70>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	4a15      	ldr	r2, [pc, #84]	; (8001470 <HAL_TIM_Base_MspInit+0x70>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6413      	str	r3, [r2, #64]	; 0x40
 8001422:	4b13      	ldr	r3, [pc, #76]	; (8001470 <HAL_TIM_Base_MspInit+0x70>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2100      	movs	r1, #0
 8001432:	201c      	movs	r0, #28
 8001434:	f000 fa37 	bl	80018a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001438:	201c      	movs	r0, #28
 800143a:	f000 fa50 	bl	80018de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800143e:	e012      	b.n	8001466 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a0b      	ldr	r2, [pc, #44]	; (8001474 <HAL_TIM_Base_MspInit+0x74>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d10d      	bne.n	8001466 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	4b08      	ldr	r3, [pc, #32]	; (8001470 <HAL_TIM_Base_MspInit+0x70>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	4a07      	ldr	r2, [pc, #28]	; (8001470 <HAL_TIM_Base_MspInit+0x70>)
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	6413      	str	r3, [r2, #64]	; 0x40
 800145a:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_TIM_Base_MspInit+0x70>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
}
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40023800 	.word	0x40023800
 8001474:	40000800 	.word	0x40000800

08001478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800147c:	e7fe      	b.n	800147c <NMI_Handler+0x4>

0800147e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001482:	e7fe      	b.n	8001482 <HardFault_Handler+0x4>

08001484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <MemManage_Handler+0x4>

0800148a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <BusFault_Handler+0x4>

08001490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <UsageFault_Handler+0x4>

08001496 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c4:	f000 f8d0 	bl	8001668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}

080014cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014d0:	4802      	ldr	r0, [pc, #8]	; (80014dc <TIM2_IRQHandler+0x10>)
 80014d2:	f001 f8c5 	bl	8002660 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000094 	.word	0x20000094

080014e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e8:	4a14      	ldr	r2, [pc, #80]	; (800153c <_sbrk+0x5c>)
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <_sbrk+0x60>)
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f4:	4b13      	ldr	r3, [pc, #76]	; (8001544 <_sbrk+0x64>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d102      	bne.n	8001502 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <_sbrk+0x64>)
 80014fe:	4a12      	ldr	r2, [pc, #72]	; (8001548 <_sbrk+0x68>)
 8001500:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <_sbrk+0x64>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4413      	add	r3, r2
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	429a      	cmp	r2, r3
 800150e:	d207      	bcs.n	8001520 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001510:	f001 fc3a 	bl	8002d88 <__errno>
 8001514:	4603      	mov	r3, r0
 8001516:	220c      	movs	r2, #12
 8001518:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800151a:	f04f 33ff 	mov.w	r3, #4294967295
 800151e:	e009      	b.n	8001534 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <_sbrk+0x64>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001526:	4b07      	ldr	r3, [pc, #28]	; (8001544 <_sbrk+0x64>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4413      	add	r3, r2
 800152e:	4a05      	ldr	r2, [pc, #20]	; (8001544 <_sbrk+0x64>)
 8001530:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001532:	68fb      	ldr	r3, [r7, #12]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20018000 	.word	0x20018000
 8001540:	00000400 	.word	0x00000400
 8001544:	2000019c 	.word	0x2000019c
 8001548:	200001b8 	.word	0x200001b8

0800154c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <SystemInit+0x20>)
 8001552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001556:	4a05      	ldr	r2, [pc, #20]	; (800156c <SystemInit+0x20>)
 8001558:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800155c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001570:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001574:	480d      	ldr	r0, [pc, #52]	; (80015ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001576:	490e      	ldr	r1, [pc, #56]	; (80015b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001578:	4a0e      	ldr	r2, [pc, #56]	; (80015b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800157c:	e002      	b.n	8001584 <LoopCopyDataInit>

0800157e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001582:	3304      	adds	r3, #4

08001584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001588:	d3f9      	bcc.n	800157e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158a:	4a0b      	ldr	r2, [pc, #44]	; (80015b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800158c:	4c0b      	ldr	r4, [pc, #44]	; (80015bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001590:	e001      	b.n	8001596 <LoopFillZerobss>

08001592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001594:	3204      	adds	r2, #4

08001596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001598:	d3fb      	bcc.n	8001592 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800159a:	f7ff ffd7 	bl	800154c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800159e:	f001 fbf9 	bl	8002d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015a2:	f7ff fcab 	bl	8000efc <main>
  bx  lr    
 80015a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80015b4:	080037d4 	.word	0x080037d4
  ldr r2, =_sbss
 80015b8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80015bc:	200001b4 	.word	0x200001b4

080015c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c0:	e7fe      	b.n	80015c0 <ADC_IRQHandler>
	...

080015c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015c8:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <HAL_Init+0x40>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0d      	ldr	r2, [pc, #52]	; (8001604 <HAL_Init+0x40>)
 80015ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015d4:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <HAL_Init+0x40>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <HAL_Init+0x40>)
 80015da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <HAL_Init+0x40>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a07      	ldr	r2, [pc, #28]	; (8001604 <HAL_Init+0x40>)
 80015e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ec:	2003      	movs	r0, #3
 80015ee:	f000 f94f 	bl	8001890 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015f2:	200f      	movs	r0, #15
 80015f4:	f000 f808 	bl	8001608 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f8:	f7ff feda 	bl	80013b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023c00 	.word	0x40023c00

08001608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_InitTick+0x54>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_InitTick+0x58>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4619      	mov	r1, r3
 800161a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800161e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001622:	fbb2 f3f3 	udiv	r3, r2, r3
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f967 	bl	80018fa <HAL_SYSTICK_Config>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e00e      	b.n	8001654 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b0f      	cmp	r3, #15
 800163a:	d80a      	bhi.n	8001652 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800163c:	2200      	movs	r2, #0
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	f04f 30ff 	mov.w	r0, #4294967295
 8001644:	f000 f92f 	bl	80018a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001648:	4a06      	ldr	r2, [pc, #24]	; (8001664 <HAL_InitTick+0x5c>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	e000      	b.n	8001654 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
}
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000008 	.word	0x20000008
 8001660:	20000010 	.word	0x20000010
 8001664:	2000000c 	.word	0x2000000c

08001668 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_IncTick+0x20>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <HAL_IncTick+0x24>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4413      	add	r3, r2
 8001678:	4a04      	ldr	r2, [pc, #16]	; (800168c <HAL_IncTick+0x24>)
 800167a:	6013      	str	r3, [r2, #0]
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	20000010 	.word	0x20000010
 800168c:	200001a0 	.word	0x200001a0

08001690 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return uwTick;
 8001694:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <HAL_GetTick+0x14>)
 8001696:	681b      	ldr	r3, [r3, #0]
}
 8001698:	4618      	mov	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	200001a0 	.word	0x200001a0

080016a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016b0:	f7ff ffee 	bl	8001690 <HAL_GetTick>
 80016b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c0:	d005      	beq.n	80016ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016c2:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <HAL_Delay+0x44>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	461a      	mov	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016ce:	bf00      	nop
 80016d0:	f7ff ffde 	bl	8001690 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d8f7      	bhi.n	80016d0 <HAL_Delay+0x28>
  {
  }
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000010 	.word	0x20000010

080016f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800170c:	4013      	ands	r3, r2
 800170e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001718:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800171c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001722:	4a04      	ldr	r2, [pc, #16]	; (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	60d3      	str	r3, [r2, #12]
}
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <__NVIC_GetPriorityGrouping+0x18>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	0a1b      	lsrs	r3, r3, #8
 8001742:	f003 0307 	and.w	r3, r3, #7
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	2b00      	cmp	r3, #0
 8001764:	db0b      	blt.n	800177e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	f003 021f 	and.w	r2, r3, #31
 800176c:	4907      	ldr	r1, [pc, #28]	; (800178c <__NVIC_EnableIRQ+0x38>)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	095b      	lsrs	r3, r3, #5
 8001774:	2001      	movs	r0, #1
 8001776:	fa00 f202 	lsl.w	r2, r0, r2
 800177a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000e100 	.word	0xe000e100

08001790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	6039      	str	r1, [r7, #0]
 800179a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	db0a      	blt.n	80017ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	490c      	ldr	r1, [pc, #48]	; (80017dc <__NVIC_SetPriority+0x4c>)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	0112      	lsls	r2, r2, #4
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	440b      	add	r3, r1
 80017b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b8:	e00a      	b.n	80017d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4908      	ldr	r1, [pc, #32]	; (80017e0 <__NVIC_SetPriority+0x50>)
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	3b04      	subs	r3, #4
 80017c8:	0112      	lsls	r2, r2, #4
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	440b      	add	r3, r1
 80017ce:	761a      	strb	r2, [r3, #24]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e000e100 	.word	0xe000e100
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b089      	sub	sp, #36	; 0x24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f1c3 0307 	rsb	r3, r3, #7
 80017fe:	2b04      	cmp	r3, #4
 8001800:	bf28      	it	cs
 8001802:	2304      	movcs	r3, #4
 8001804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3304      	adds	r3, #4
 800180a:	2b06      	cmp	r3, #6
 800180c:	d902      	bls.n	8001814 <NVIC_EncodePriority+0x30>
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3b03      	subs	r3, #3
 8001812:	e000      	b.n	8001816 <NVIC_EncodePriority+0x32>
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001818:	f04f 32ff 	mov.w	r2, #4294967295
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43da      	mvns	r2, r3
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	401a      	ands	r2, r3
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800182c:	f04f 31ff 	mov.w	r1, #4294967295
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	fa01 f303 	lsl.w	r3, r1, r3
 8001836:	43d9      	mvns	r1, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800183c:	4313      	orrs	r3, r2
         );
}
 800183e:	4618      	mov	r0, r3
 8001840:	3724      	adds	r7, #36	; 0x24
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
	...

0800184c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3b01      	subs	r3, #1
 8001858:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800185c:	d301      	bcc.n	8001862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185e:	2301      	movs	r3, #1
 8001860:	e00f      	b.n	8001882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001862:	4a0a      	ldr	r2, [pc, #40]	; (800188c <SysTick_Config+0x40>)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3b01      	subs	r3, #1
 8001868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800186a:	210f      	movs	r1, #15
 800186c:	f04f 30ff 	mov.w	r0, #4294967295
 8001870:	f7ff ff8e 	bl	8001790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <SysTick_Config+0x40>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800187a:	4b04      	ldr	r3, [pc, #16]	; (800188c <SysTick_Config+0x40>)
 800187c:	2207      	movs	r2, #7
 800187e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	e000e010 	.word	0xe000e010

08001890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff ff29 	bl	80016f0 <__NVIC_SetPriorityGrouping>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b086      	sub	sp, #24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	4603      	mov	r3, r0
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
 80018b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018b8:	f7ff ff3e 	bl	8001738 <__NVIC_GetPriorityGrouping>
 80018bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	68b9      	ldr	r1, [r7, #8]
 80018c2:	6978      	ldr	r0, [r7, #20]
 80018c4:	f7ff ff8e 	bl	80017e4 <NVIC_EncodePriority>
 80018c8:	4602      	mov	r2, r0
 80018ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ce:	4611      	mov	r1, r2
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff5d 	bl	8001790 <__NVIC_SetPriority>
}
 80018d6:	bf00      	nop
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	4603      	mov	r3, r0
 80018e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff31 	bl	8001754 <__NVIC_EnableIRQ>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff ffa2 	bl	800184c <SysTick_Config>
 8001908:	4603      	mov	r3, r0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001914:	b480      	push	{r7}
 8001916:	b089      	sub	sp, #36	; 0x24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001926:	2300      	movs	r3, #0
 8001928:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
 800192e:	e159      	b.n	8001be4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001930:	2201      	movs	r2, #1
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	4013      	ands	r3, r2
 8001942:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	429a      	cmp	r2, r3
 800194a:	f040 8148 	bne.w	8001bde <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	2b01      	cmp	r3, #1
 8001958:	d005      	beq.n	8001966 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001962:	2b02      	cmp	r3, #2
 8001964:	d130      	bne.n	80019c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	2203      	movs	r2, #3
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43db      	mvns	r3, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4013      	ands	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	68da      	ldr	r2, [r3, #12]
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4313      	orrs	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800199c:	2201      	movs	r2, #1
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	091b      	lsrs	r3, r3, #4
 80019b2:	f003 0201 	and.w	r2, r3, #1
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 0303 	and.w	r3, r3, #3
 80019d0:	2b03      	cmp	r3, #3
 80019d2:	d017      	beq.n	8001a04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	2203      	movs	r2, #3
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d123      	bne.n	8001a58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	08da      	lsrs	r2, r3, #3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3208      	adds	r2, #8
 8001a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	220f      	movs	r2, #15
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	691a      	ldr	r2, [r3, #16]
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	08da      	lsrs	r2, r3, #3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3208      	adds	r2, #8
 8001a52:	69b9      	ldr	r1, [r7, #24]
 8001a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	2203      	movs	r2, #3
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 0203 	and.w	r2, r3, #3
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 80a2 	beq.w	8001bde <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	4b57      	ldr	r3, [pc, #348]	; (8001bfc <HAL_GPIO_Init+0x2e8>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	4a56      	ldr	r2, [pc, #344]	; (8001bfc <HAL_GPIO_Init+0x2e8>)
 8001aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aaa:	4b54      	ldr	r3, [pc, #336]	; (8001bfc <HAL_GPIO_Init+0x2e8>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ab6:	4a52      	ldr	r2, [pc, #328]	; (8001c00 <HAL_GPIO_Init+0x2ec>)
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	089b      	lsrs	r3, r3, #2
 8001abc:	3302      	adds	r3, #2
 8001abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	220f      	movs	r2, #15
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a49      	ldr	r2, [pc, #292]	; (8001c04 <HAL_GPIO_Init+0x2f0>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d019      	beq.n	8001b16 <HAL_GPIO_Init+0x202>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a48      	ldr	r2, [pc, #288]	; (8001c08 <HAL_GPIO_Init+0x2f4>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d013      	beq.n	8001b12 <HAL_GPIO_Init+0x1fe>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a47      	ldr	r2, [pc, #284]	; (8001c0c <HAL_GPIO_Init+0x2f8>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d00d      	beq.n	8001b0e <HAL_GPIO_Init+0x1fa>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a46      	ldr	r2, [pc, #280]	; (8001c10 <HAL_GPIO_Init+0x2fc>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d007      	beq.n	8001b0a <HAL_GPIO_Init+0x1f6>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a45      	ldr	r2, [pc, #276]	; (8001c14 <HAL_GPIO_Init+0x300>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d101      	bne.n	8001b06 <HAL_GPIO_Init+0x1f2>
 8001b02:	2304      	movs	r3, #4
 8001b04:	e008      	b.n	8001b18 <HAL_GPIO_Init+0x204>
 8001b06:	2307      	movs	r3, #7
 8001b08:	e006      	b.n	8001b18 <HAL_GPIO_Init+0x204>
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e004      	b.n	8001b18 <HAL_GPIO_Init+0x204>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e002      	b.n	8001b18 <HAL_GPIO_Init+0x204>
 8001b12:	2301      	movs	r3, #1
 8001b14:	e000      	b.n	8001b18 <HAL_GPIO_Init+0x204>
 8001b16:	2300      	movs	r3, #0
 8001b18:	69fa      	ldr	r2, [r7, #28]
 8001b1a:	f002 0203 	and.w	r2, r2, #3
 8001b1e:	0092      	lsls	r2, r2, #2
 8001b20:	4093      	lsls	r3, r2
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b28:	4935      	ldr	r1, [pc, #212]	; (8001c00 <HAL_GPIO_Init+0x2ec>)
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	089b      	lsrs	r3, r3, #2
 8001b2e:	3302      	adds	r3, #2
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b36:	4b38      	ldr	r3, [pc, #224]	; (8001c18 <HAL_GPIO_Init+0x304>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4013      	ands	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b5a:	4a2f      	ldr	r2, [pc, #188]	; (8001c18 <HAL_GPIO_Init+0x304>)
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b60:	4b2d      	ldr	r3, [pc, #180]	; (8001c18 <HAL_GPIO_Init+0x304>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b84:	4a24      	ldr	r2, [pc, #144]	; (8001c18 <HAL_GPIO_Init+0x304>)
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b8a:	4b23      	ldr	r3, [pc, #140]	; (8001c18 <HAL_GPIO_Init+0x304>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4013      	ands	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bae:	4a1a      	ldr	r2, [pc, #104]	; (8001c18 <HAL_GPIO_Init+0x304>)
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bb4:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <HAL_GPIO_Init+0x304>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bd8:	4a0f      	ldr	r2, [pc, #60]	; (8001c18 <HAL_GPIO_Init+0x304>)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3301      	adds	r3, #1
 8001be2:	61fb      	str	r3, [r7, #28]
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	2b0f      	cmp	r3, #15
 8001be8:	f67f aea2 	bls.w	8001930 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bec:	bf00      	nop
 8001bee:	bf00      	nop
 8001bf0:	3724      	adds	r7, #36	; 0x24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40013800 	.word	0x40013800
 8001c04:	40020000 	.word	0x40020000
 8001c08:	40020400 	.word	0x40020400
 8001c0c:	40020800 	.word	0x40020800
 8001c10:	40020c00 	.word	0x40020c00
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40013c00 	.word	0x40013c00

08001c1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691a      	ldr	r2, [r3, #16]
 8001c2c:	887b      	ldrh	r3, [r7, #2]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d002      	beq.n	8001c3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c34:	2301      	movs	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
 8001c38:	e001      	b.n	8001c3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	807b      	strh	r3, [r7, #2]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c5c:	787b      	ldrb	r3, [r7, #1]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c62:	887a      	ldrh	r2, [r7, #2]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c68:	e003      	b.n	8001c72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c6a:	887b      	ldrh	r3, [r7, #2]
 8001c6c:	041a      	lsls	r2, r3, #16
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	619a      	str	r2, [r3, #24]
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b085      	sub	sp, #20
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	460b      	mov	r3, r1
 8001c88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c90:	887a      	ldrh	r2, [r7, #2]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4013      	ands	r3, r2
 8001c96:	041a      	lsls	r2, r3, #16
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	43d9      	mvns	r1, r3
 8001c9c:	887b      	ldrh	r3, [r7, #2]
 8001c9e:	400b      	ands	r3, r1
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	619a      	str	r2, [r3, #24]
}
 8001ca6:	bf00      	nop
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
	...

08001cb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e267      	b.n	8002196 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d075      	beq.n	8001dbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cd2:	4b88      	ldr	r3, [pc, #544]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 030c 	and.w	r3, r3, #12
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	d00c      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cde:	4b85      	ldr	r3, [pc, #532]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d112      	bne.n	8001d10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cea:	4b82      	ldr	r3, [pc, #520]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cf6:	d10b      	bne.n	8001d10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf8:	4b7e      	ldr	r3, [pc, #504]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d05b      	beq.n	8001dbc <HAL_RCC_OscConfig+0x108>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d157      	bne.n	8001dbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e242      	b.n	8002196 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d18:	d106      	bne.n	8001d28 <HAL_RCC_OscConfig+0x74>
 8001d1a:	4b76      	ldr	r3, [pc, #472]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a75      	ldr	r2, [pc, #468]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	e01d      	b.n	8001d64 <HAL_RCC_OscConfig+0xb0>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d30:	d10c      	bne.n	8001d4c <HAL_RCC_OscConfig+0x98>
 8001d32:	4b70      	ldr	r3, [pc, #448]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a6f      	ldr	r2, [pc, #444]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d3c:	6013      	str	r3, [r2, #0]
 8001d3e:	4b6d      	ldr	r3, [pc, #436]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a6c      	ldr	r2, [pc, #432]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	e00b      	b.n	8001d64 <HAL_RCC_OscConfig+0xb0>
 8001d4c:	4b69      	ldr	r3, [pc, #420]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a68      	ldr	r2, [pc, #416]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	4b66      	ldr	r3, [pc, #408]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a65      	ldr	r2, [pc, #404]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d013      	beq.n	8001d94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6c:	f7ff fc90 	bl	8001690 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d74:	f7ff fc8c 	bl	8001690 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b64      	cmp	r3, #100	; 0x64
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e207      	b.n	8002196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d86:	4b5b      	ldr	r3, [pc, #364]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0f0      	beq.n	8001d74 <HAL_RCC_OscConfig+0xc0>
 8001d92:	e014      	b.n	8001dbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d94:	f7ff fc7c 	bl	8001690 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d9c:	f7ff fc78 	bl	8001690 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b64      	cmp	r3, #100	; 0x64
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e1f3      	b.n	8002196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dae:	4b51      	ldr	r3, [pc, #324]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f0      	bne.n	8001d9c <HAL_RCC_OscConfig+0xe8>
 8001dba:	e000      	b.n	8001dbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d063      	beq.n	8001e92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dca:	4b4a      	ldr	r3, [pc, #296]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 030c 	and.w	r3, r3, #12
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00b      	beq.n	8001dee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dd6:	4b47      	ldr	r3, [pc, #284]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dde:	2b08      	cmp	r3, #8
 8001de0:	d11c      	bne.n	8001e1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001de2:	4b44      	ldr	r3, [pc, #272]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d116      	bne.n	8001e1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dee:	4b41      	ldr	r3, [pc, #260]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d005      	beq.n	8001e06 <HAL_RCC_OscConfig+0x152>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d001      	beq.n	8001e06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e1c7      	b.n	8002196 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e06:	4b3b      	ldr	r3, [pc, #236]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4937      	ldr	r1, [pc, #220]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e1a:	e03a      	b.n	8001e92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d020      	beq.n	8001e66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e24:	4b34      	ldr	r3, [pc, #208]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2a:	f7ff fc31 	bl	8001690 <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e32:	f7ff fc2d 	bl	8001690 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e1a8      	b.n	8002196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e44:	4b2b      	ldr	r3, [pc, #172]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0f0      	beq.n	8001e32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e50:	4b28      	ldr	r3, [pc, #160]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	4925      	ldr	r1, [pc, #148]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	600b      	str	r3, [r1, #0]
 8001e64:	e015      	b.n	8001e92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e66:	4b24      	ldr	r3, [pc, #144]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff fc10 	bl	8001690 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e74:	f7ff fc0c 	bl	8001690 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e187      	b.n	8002196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e86:	4b1b      	ldr	r3, [pc, #108]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1f0      	bne.n	8001e74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d036      	beq.n	8001f0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d016      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ea6:	4b15      	ldr	r3, [pc, #84]	; (8001efc <HAL_RCC_OscConfig+0x248>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eac:	f7ff fbf0 	bl	8001690 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eb4:	f7ff fbec 	bl	8001690 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e167      	b.n	8002196 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ec6:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0f0      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x200>
 8001ed2:	e01b      	b.n	8001f0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ed4:	4b09      	ldr	r3, [pc, #36]	; (8001efc <HAL_RCC_OscConfig+0x248>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eda:	f7ff fbd9 	bl	8001690 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee0:	e00e      	b.n	8001f00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ee2:	f7ff fbd5 	bl	8001690 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d907      	bls.n	8001f00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e150      	b.n	8002196 <HAL_RCC_OscConfig+0x4e2>
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	42470000 	.word	0x42470000
 8001efc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f00:	4b88      	ldr	r3, [pc, #544]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8001f02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1ea      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 8097 	beq.w	8002048 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f1e:	4b81      	ldr	r3, [pc, #516]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10f      	bne.n	8001f4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	4b7d      	ldr	r3, [pc, #500]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	4a7c      	ldr	r2, [pc, #496]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8001f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f38:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3a:	4b7a      	ldr	r3, [pc, #488]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f46:	2301      	movs	r3, #1
 8001f48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4a:	4b77      	ldr	r3, [pc, #476]	; (8002128 <HAL_RCC_OscConfig+0x474>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d118      	bne.n	8001f88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f56:	4b74      	ldr	r3, [pc, #464]	; (8002128 <HAL_RCC_OscConfig+0x474>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a73      	ldr	r2, [pc, #460]	; (8002128 <HAL_RCC_OscConfig+0x474>)
 8001f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f62:	f7ff fb95 	bl	8001690 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f6a:	f7ff fb91 	bl	8001690 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e10c      	b.n	8002196 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7c:	4b6a      	ldr	r3, [pc, #424]	; (8002128 <HAL_RCC_OscConfig+0x474>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0f0      	beq.n	8001f6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d106      	bne.n	8001f9e <HAL_RCC_OscConfig+0x2ea>
 8001f90:	4b64      	ldr	r3, [pc, #400]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8001f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f94:	4a63      	ldr	r2, [pc, #396]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f9c:	e01c      	b.n	8001fd8 <HAL_RCC_OscConfig+0x324>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2b05      	cmp	r3, #5
 8001fa4:	d10c      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x30c>
 8001fa6:	4b5f      	ldr	r3, [pc, #380]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8001fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001faa:	4a5e      	ldr	r2, [pc, #376]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8001fac:	f043 0304 	orr.w	r3, r3, #4
 8001fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8001fb2:	4b5c      	ldr	r3, [pc, #368]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8001fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb6:	4a5b      	ldr	r2, [pc, #364]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8001fbe:	e00b      	b.n	8001fd8 <HAL_RCC_OscConfig+0x324>
 8001fc0:	4b58      	ldr	r3, [pc, #352]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8001fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc4:	4a57      	ldr	r2, [pc, #348]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8001fc6:	f023 0301 	bic.w	r3, r3, #1
 8001fca:	6713      	str	r3, [r2, #112]	; 0x70
 8001fcc:	4b55      	ldr	r3, [pc, #340]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8001fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd0:	4a54      	ldr	r2, [pc, #336]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8001fd2:	f023 0304 	bic.w	r3, r3, #4
 8001fd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d015      	beq.n	800200c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe0:	f7ff fb56 	bl	8001690 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe6:	e00a      	b.n	8001ffe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fe8:	f7ff fb52 	bl	8001690 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e0cb      	b.n	8002196 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ffe:	4b49      	ldr	r3, [pc, #292]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8002000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0ee      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x334>
 800200a:	e014      	b.n	8002036 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200c:	f7ff fb40 	bl	8001690 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002012:	e00a      	b.n	800202a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002014:	f7ff fb3c 	bl	8001690 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002022:	4293      	cmp	r3, r2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e0b5      	b.n	8002196 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800202a:	4b3e      	ldr	r3, [pc, #248]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 800202c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1ee      	bne.n	8002014 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002036:	7dfb      	ldrb	r3, [r7, #23]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d105      	bne.n	8002048 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800203c:	4b39      	ldr	r3, [pc, #228]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	4a38      	ldr	r2, [pc, #224]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8002042:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002046:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 80a1 	beq.w	8002194 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002052:	4b34      	ldr	r3, [pc, #208]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 030c 	and.w	r3, r3, #12
 800205a:	2b08      	cmp	r3, #8
 800205c:	d05c      	beq.n	8002118 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d141      	bne.n	80020ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002066:	4b31      	ldr	r3, [pc, #196]	; (800212c <HAL_RCC_OscConfig+0x478>)
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206c:	f7ff fb10 	bl	8001690 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002074:	f7ff fb0c 	bl	8001690 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e087      	b.n	8002196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002086:	4b27      	ldr	r3, [pc, #156]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f0      	bne.n	8002074 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69da      	ldr	r2, [r3, #28]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a0:	019b      	lsls	r3, r3, #6
 80020a2:	431a      	orrs	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a8:	085b      	lsrs	r3, r3, #1
 80020aa:	3b01      	subs	r3, #1
 80020ac:	041b      	lsls	r3, r3, #16
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b4:	061b      	lsls	r3, r3, #24
 80020b6:	491b      	ldr	r1, [pc, #108]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020bc:	4b1b      	ldr	r3, [pc, #108]	; (800212c <HAL_RCC_OscConfig+0x478>)
 80020be:	2201      	movs	r2, #1
 80020c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c2:	f7ff fae5 	bl	8001690 <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ca:	f7ff fae1 	bl	8001690 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e05c      	b.n	8002196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020dc:	4b11      	ldr	r3, [pc, #68]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0f0      	beq.n	80020ca <HAL_RCC_OscConfig+0x416>
 80020e8:	e054      	b.n	8002194 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ea:	4b10      	ldr	r3, [pc, #64]	; (800212c <HAL_RCC_OscConfig+0x478>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f0:	f7ff face 	bl	8001690 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020f8:	f7ff faca 	bl	8001690 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e045      	b.n	8002196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800210a:	4b06      	ldr	r3, [pc, #24]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f0      	bne.n	80020f8 <HAL_RCC_OscConfig+0x444>
 8002116:	e03d      	b.n	8002194 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d107      	bne.n	8002130 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e038      	b.n	8002196 <HAL_RCC_OscConfig+0x4e2>
 8002124:	40023800 	.word	0x40023800
 8002128:	40007000 	.word	0x40007000
 800212c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002130:	4b1b      	ldr	r3, [pc, #108]	; (80021a0 <HAL_RCC_OscConfig+0x4ec>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d028      	beq.n	8002190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002148:	429a      	cmp	r2, r3
 800214a:	d121      	bne.n	8002190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002156:	429a      	cmp	r2, r3
 8002158:	d11a      	bne.n	8002190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002160:	4013      	ands	r3, r2
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002166:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002168:	4293      	cmp	r3, r2
 800216a:	d111      	bne.n	8002190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002176:	085b      	lsrs	r3, r3, #1
 8002178:	3b01      	subs	r3, #1
 800217a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800217c:	429a      	cmp	r2, r3
 800217e:	d107      	bne.n	8002190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800218c:	429a      	cmp	r2, r3
 800218e:	d001      	beq.n	8002194 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e000      	b.n	8002196 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40023800 	.word	0x40023800

080021a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e0cc      	b.n	8002352 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021b8:	4b68      	ldr	r3, [pc, #416]	; (800235c <HAL_RCC_ClockConfig+0x1b8>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d90c      	bls.n	80021e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c6:	4b65      	ldr	r3, [pc, #404]	; (800235c <HAL_RCC_ClockConfig+0x1b8>)
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ce:	4b63      	ldr	r3, [pc, #396]	; (800235c <HAL_RCC_ClockConfig+0x1b8>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d001      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0b8      	b.n	8002352 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d020      	beq.n	800222e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021f8:	4b59      	ldr	r3, [pc, #356]	; (8002360 <HAL_RCC_ClockConfig+0x1bc>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	4a58      	ldr	r2, [pc, #352]	; (8002360 <HAL_RCC_ClockConfig+0x1bc>)
 80021fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002202:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0308 	and.w	r3, r3, #8
 800220c:	2b00      	cmp	r3, #0
 800220e:	d005      	beq.n	800221c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002210:	4b53      	ldr	r3, [pc, #332]	; (8002360 <HAL_RCC_ClockConfig+0x1bc>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	4a52      	ldr	r2, [pc, #328]	; (8002360 <HAL_RCC_ClockConfig+0x1bc>)
 8002216:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800221a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800221c:	4b50      	ldr	r3, [pc, #320]	; (8002360 <HAL_RCC_ClockConfig+0x1bc>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	494d      	ldr	r1, [pc, #308]	; (8002360 <HAL_RCC_ClockConfig+0x1bc>)
 800222a:	4313      	orrs	r3, r2
 800222c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d044      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d107      	bne.n	8002252 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002242:	4b47      	ldr	r3, [pc, #284]	; (8002360 <HAL_RCC_ClockConfig+0x1bc>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d119      	bne.n	8002282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e07f      	b.n	8002352 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b02      	cmp	r3, #2
 8002258:	d003      	beq.n	8002262 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800225e:	2b03      	cmp	r3, #3
 8002260:	d107      	bne.n	8002272 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002262:	4b3f      	ldr	r3, [pc, #252]	; (8002360 <HAL_RCC_ClockConfig+0x1bc>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d109      	bne.n	8002282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e06f      	b.n	8002352 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002272:	4b3b      	ldr	r3, [pc, #236]	; (8002360 <HAL_RCC_ClockConfig+0x1bc>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e067      	b.n	8002352 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002282:	4b37      	ldr	r3, [pc, #220]	; (8002360 <HAL_RCC_ClockConfig+0x1bc>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f023 0203 	bic.w	r2, r3, #3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	4934      	ldr	r1, [pc, #208]	; (8002360 <HAL_RCC_ClockConfig+0x1bc>)
 8002290:	4313      	orrs	r3, r2
 8002292:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002294:	f7ff f9fc 	bl	8001690 <HAL_GetTick>
 8002298:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229a:	e00a      	b.n	80022b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800229c:	f7ff f9f8 	bl	8001690 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e04f      	b.n	8002352 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b2:	4b2b      	ldr	r3, [pc, #172]	; (8002360 <HAL_RCC_ClockConfig+0x1bc>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 020c 	and.w	r2, r3, #12
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d1eb      	bne.n	800229c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022c4:	4b25      	ldr	r3, [pc, #148]	; (800235c <HAL_RCC_ClockConfig+0x1b8>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d20c      	bcs.n	80022ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d2:	4b22      	ldr	r3, [pc, #136]	; (800235c <HAL_RCC_ClockConfig+0x1b8>)
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022da:	4b20      	ldr	r3, [pc, #128]	; (800235c <HAL_RCC_ClockConfig+0x1b8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d001      	beq.n	80022ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e032      	b.n	8002352 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d008      	beq.n	800230a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022f8:	4b19      	ldr	r3, [pc, #100]	; (8002360 <HAL_RCC_ClockConfig+0x1bc>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	4916      	ldr	r1, [pc, #88]	; (8002360 <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	4313      	orrs	r3, r2
 8002308:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	2b00      	cmp	r3, #0
 8002314:	d009      	beq.n	800232a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002316:	4b12      	ldr	r3, [pc, #72]	; (8002360 <HAL_RCC_ClockConfig+0x1bc>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	490e      	ldr	r1, [pc, #56]	; (8002360 <HAL_RCC_ClockConfig+0x1bc>)
 8002326:	4313      	orrs	r3, r2
 8002328:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800232a:	f000 f821 	bl	8002370 <HAL_RCC_GetSysClockFreq>
 800232e:	4602      	mov	r2, r0
 8002330:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <HAL_RCC_ClockConfig+0x1bc>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	091b      	lsrs	r3, r3, #4
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	490a      	ldr	r1, [pc, #40]	; (8002364 <HAL_RCC_ClockConfig+0x1c0>)
 800233c:	5ccb      	ldrb	r3, [r1, r3]
 800233e:	fa22 f303 	lsr.w	r3, r2, r3
 8002342:	4a09      	ldr	r2, [pc, #36]	; (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002346:	4b09      	ldr	r3, [pc, #36]	; (800236c <HAL_RCC_ClockConfig+0x1c8>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff f95c 	bl	8001608 <HAL_InitTick>

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40023c00 	.word	0x40023c00
 8002360:	40023800 	.word	0x40023800
 8002364:	08003780 	.word	0x08003780
 8002368:	20000008 	.word	0x20000008
 800236c:	2000000c 	.word	0x2000000c

08002370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002374:	b090      	sub	sp, #64	; 0x40
 8002376:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002378:	2300      	movs	r3, #0
 800237a:	637b      	str	r3, [r7, #52]	; 0x34
 800237c:	2300      	movs	r3, #0
 800237e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002380:	2300      	movs	r3, #0
 8002382:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002388:	4b59      	ldr	r3, [pc, #356]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 030c 	and.w	r3, r3, #12
 8002390:	2b08      	cmp	r3, #8
 8002392:	d00d      	beq.n	80023b0 <HAL_RCC_GetSysClockFreq+0x40>
 8002394:	2b08      	cmp	r3, #8
 8002396:	f200 80a1 	bhi.w	80024dc <HAL_RCC_GetSysClockFreq+0x16c>
 800239a:	2b00      	cmp	r3, #0
 800239c:	d002      	beq.n	80023a4 <HAL_RCC_GetSysClockFreq+0x34>
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d003      	beq.n	80023aa <HAL_RCC_GetSysClockFreq+0x3a>
 80023a2:	e09b      	b.n	80024dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023a4:	4b53      	ldr	r3, [pc, #332]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80023a6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80023a8:	e09b      	b.n	80024e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023aa:	4b53      	ldr	r3, [pc, #332]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80023ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023ae:	e098      	b.n	80024e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023b0:	4b4f      	ldr	r3, [pc, #316]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023b8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023ba:	4b4d      	ldr	r3, [pc, #308]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d028      	beq.n	8002418 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023c6:	4b4a      	ldr	r3, [pc, #296]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	099b      	lsrs	r3, r3, #6
 80023cc:	2200      	movs	r2, #0
 80023ce:	623b      	str	r3, [r7, #32]
 80023d0:	627a      	str	r2, [r7, #36]	; 0x24
 80023d2:	6a3b      	ldr	r3, [r7, #32]
 80023d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80023d8:	2100      	movs	r1, #0
 80023da:	4b47      	ldr	r3, [pc, #284]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80023dc:	fb03 f201 	mul.w	r2, r3, r1
 80023e0:	2300      	movs	r3, #0
 80023e2:	fb00 f303 	mul.w	r3, r0, r3
 80023e6:	4413      	add	r3, r2
 80023e8:	4a43      	ldr	r2, [pc, #268]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80023ea:	fba0 1202 	umull	r1, r2, r0, r2
 80023ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023f0:	460a      	mov	r2, r1
 80023f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80023f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023f6:	4413      	add	r3, r2
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023fc:	2200      	movs	r2, #0
 80023fe:	61bb      	str	r3, [r7, #24]
 8002400:	61fa      	str	r2, [r7, #28]
 8002402:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002406:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800240a:	f7fd ff49 	bl	80002a0 <__aeabi_uldivmod>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	4613      	mov	r3, r2
 8002414:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002416:	e053      	b.n	80024c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002418:	4b35      	ldr	r3, [pc, #212]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	099b      	lsrs	r3, r3, #6
 800241e:	2200      	movs	r2, #0
 8002420:	613b      	str	r3, [r7, #16]
 8002422:	617a      	str	r2, [r7, #20]
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800242a:	f04f 0b00 	mov.w	fp, #0
 800242e:	4652      	mov	r2, sl
 8002430:	465b      	mov	r3, fp
 8002432:	f04f 0000 	mov.w	r0, #0
 8002436:	f04f 0100 	mov.w	r1, #0
 800243a:	0159      	lsls	r1, r3, #5
 800243c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002440:	0150      	lsls	r0, r2, #5
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	ebb2 080a 	subs.w	r8, r2, sl
 800244a:	eb63 090b 	sbc.w	r9, r3, fp
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	f04f 0300 	mov.w	r3, #0
 8002456:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800245a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800245e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002462:	ebb2 0408 	subs.w	r4, r2, r8
 8002466:	eb63 0509 	sbc.w	r5, r3, r9
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	f04f 0300 	mov.w	r3, #0
 8002472:	00eb      	lsls	r3, r5, #3
 8002474:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002478:	00e2      	lsls	r2, r4, #3
 800247a:	4614      	mov	r4, r2
 800247c:	461d      	mov	r5, r3
 800247e:	eb14 030a 	adds.w	r3, r4, sl
 8002482:	603b      	str	r3, [r7, #0]
 8002484:	eb45 030b 	adc.w	r3, r5, fp
 8002488:	607b      	str	r3, [r7, #4]
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	f04f 0300 	mov.w	r3, #0
 8002492:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002496:	4629      	mov	r1, r5
 8002498:	028b      	lsls	r3, r1, #10
 800249a:	4621      	mov	r1, r4
 800249c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024a0:	4621      	mov	r1, r4
 80024a2:	028a      	lsls	r2, r1, #10
 80024a4:	4610      	mov	r0, r2
 80024a6:	4619      	mov	r1, r3
 80024a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024aa:	2200      	movs	r2, #0
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	60fa      	str	r2, [r7, #12]
 80024b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024b4:	f7fd fef4 	bl	80002a0 <__aeabi_uldivmod>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4613      	mov	r3, r2
 80024be:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024c0:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	0c1b      	lsrs	r3, r3, #16
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	3301      	adds	r3, #1
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80024d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024da:	e002      	b.n	80024e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024dc:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80024de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3740      	adds	r7, #64	; 0x40
 80024e8:	46bd      	mov	sp, r7
 80024ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024ee:	bf00      	nop
 80024f0:	40023800 	.word	0x40023800
 80024f4:	00f42400 	.word	0x00f42400
 80024f8:	017d7840 	.word	0x017d7840

080024fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e041      	b.n	8002592 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d106      	bne.n	8002528 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7fe ff6c 	bl	8001400 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2202      	movs	r2, #2
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3304      	adds	r3, #4
 8002538:	4619      	mov	r1, r3
 800253a:	4610      	mov	r0, r2
 800253c:	f000 fa88 	bl	8002a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d001      	beq.n	80025b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e044      	b.n	800263e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2202      	movs	r2, #2
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0201 	orr.w	r2, r2, #1
 80025ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a1e      	ldr	r2, [pc, #120]	; (800264c <HAL_TIM_Base_Start_IT+0xb0>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d018      	beq.n	8002608 <HAL_TIM_Base_Start_IT+0x6c>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025de:	d013      	beq.n	8002608 <HAL_TIM_Base_Start_IT+0x6c>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a1a      	ldr	r2, [pc, #104]	; (8002650 <HAL_TIM_Base_Start_IT+0xb4>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d00e      	beq.n	8002608 <HAL_TIM_Base_Start_IT+0x6c>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a19      	ldr	r2, [pc, #100]	; (8002654 <HAL_TIM_Base_Start_IT+0xb8>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d009      	beq.n	8002608 <HAL_TIM_Base_Start_IT+0x6c>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a17      	ldr	r2, [pc, #92]	; (8002658 <HAL_TIM_Base_Start_IT+0xbc>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d004      	beq.n	8002608 <HAL_TIM_Base_Start_IT+0x6c>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a16      	ldr	r2, [pc, #88]	; (800265c <HAL_TIM_Base_Start_IT+0xc0>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d111      	bne.n	800262c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2b06      	cmp	r3, #6
 8002618:	d010      	beq.n	800263c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f042 0201 	orr.w	r2, r2, #1
 8002628:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800262a:	e007      	b.n	800263c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0201 	orr.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40010000 	.word	0x40010000
 8002650:	40000400 	.word	0x40000400
 8002654:	40000800 	.word	0x40000800
 8002658:	40000c00 	.word	0x40000c00
 800265c:	40014000 	.word	0x40014000

08002660 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b02      	cmp	r3, #2
 8002674:	d122      	bne.n	80026bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b02      	cmp	r3, #2
 8002682:	d11b      	bne.n	80026bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f06f 0202 	mvn.w	r2, #2
 800268c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f9b5 	bl	8002a12 <HAL_TIM_IC_CaptureCallback>
 80026a8:	e005      	b.n	80026b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f9a7 	bl	80029fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f9b8 	bl	8002a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f003 0304 	and.w	r3, r3, #4
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d122      	bne.n	8002710 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	d11b      	bne.n	8002710 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f06f 0204 	mvn.w	r2, #4
 80026e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2202      	movs	r2, #2
 80026e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f98b 	bl	8002a12 <HAL_TIM_IC_CaptureCallback>
 80026fc:	e005      	b.n	800270a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f97d 	bl	80029fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f98e 	bl	8002a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b08      	cmp	r3, #8
 800271c:	d122      	bne.n	8002764 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f003 0308 	and.w	r3, r3, #8
 8002728:	2b08      	cmp	r3, #8
 800272a:	d11b      	bne.n	8002764 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f06f 0208 	mvn.w	r2, #8
 8002734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2204      	movs	r2, #4
 800273a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f961 	bl	8002a12 <HAL_TIM_IC_CaptureCallback>
 8002750:	e005      	b.n	800275e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f953 	bl	80029fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f964 	bl	8002a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	f003 0310 	and.w	r3, r3, #16
 800276e:	2b10      	cmp	r3, #16
 8002770:	d122      	bne.n	80027b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f003 0310 	and.w	r3, r3, #16
 800277c:	2b10      	cmp	r3, #16
 800277e:	d11b      	bne.n	80027b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f06f 0210 	mvn.w	r2, #16
 8002788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2208      	movs	r2, #8
 800278e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f937 	bl	8002a12 <HAL_TIM_IC_CaptureCallback>
 80027a4:	e005      	b.n	80027b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f929 	bl	80029fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f93a 	bl	8002a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d10e      	bne.n	80027e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d107      	bne.n	80027e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f06f 0201 	mvn.w	r2, #1
 80027dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7fe fb7c 	bl	8000edc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ee:	2b80      	cmp	r3, #128	; 0x80
 80027f0:	d10e      	bne.n	8002810 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fc:	2b80      	cmp	r3, #128	; 0x80
 80027fe:	d107      	bne.n	8002810 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 fab2 	bl	8002d74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281a:	2b40      	cmp	r3, #64	; 0x40
 800281c:	d10e      	bne.n	800283c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002828:	2b40      	cmp	r3, #64	; 0x40
 800282a:	d107      	bne.n	800283c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f8ff 	bl	8002a3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	f003 0320 	and.w	r3, r3, #32
 8002846:	2b20      	cmp	r3, #32
 8002848:	d10e      	bne.n	8002868 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f003 0320 	and.w	r3, r3, #32
 8002854:	2b20      	cmp	r3, #32
 8002856:	d107      	bne.n	8002868 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f06f 0220 	mvn.w	r2, #32
 8002860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 fa7c 	bl	8002d60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002868:	bf00      	nop
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002884:	2b01      	cmp	r3, #1
 8002886:	d101      	bne.n	800288c <HAL_TIM_ConfigClockSource+0x1c>
 8002888:	2302      	movs	r3, #2
 800288a:	e0b4      	b.n	80029f6 <HAL_TIM_ConfigClockSource+0x186>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2202      	movs	r2, #2
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028c4:	d03e      	beq.n	8002944 <HAL_TIM_ConfigClockSource+0xd4>
 80028c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ca:	f200 8087 	bhi.w	80029dc <HAL_TIM_ConfigClockSource+0x16c>
 80028ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028d2:	f000 8086 	beq.w	80029e2 <HAL_TIM_ConfigClockSource+0x172>
 80028d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028da:	d87f      	bhi.n	80029dc <HAL_TIM_ConfigClockSource+0x16c>
 80028dc:	2b70      	cmp	r3, #112	; 0x70
 80028de:	d01a      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0xa6>
 80028e0:	2b70      	cmp	r3, #112	; 0x70
 80028e2:	d87b      	bhi.n	80029dc <HAL_TIM_ConfigClockSource+0x16c>
 80028e4:	2b60      	cmp	r3, #96	; 0x60
 80028e6:	d050      	beq.n	800298a <HAL_TIM_ConfigClockSource+0x11a>
 80028e8:	2b60      	cmp	r3, #96	; 0x60
 80028ea:	d877      	bhi.n	80029dc <HAL_TIM_ConfigClockSource+0x16c>
 80028ec:	2b50      	cmp	r3, #80	; 0x50
 80028ee:	d03c      	beq.n	800296a <HAL_TIM_ConfigClockSource+0xfa>
 80028f0:	2b50      	cmp	r3, #80	; 0x50
 80028f2:	d873      	bhi.n	80029dc <HAL_TIM_ConfigClockSource+0x16c>
 80028f4:	2b40      	cmp	r3, #64	; 0x40
 80028f6:	d058      	beq.n	80029aa <HAL_TIM_ConfigClockSource+0x13a>
 80028f8:	2b40      	cmp	r3, #64	; 0x40
 80028fa:	d86f      	bhi.n	80029dc <HAL_TIM_ConfigClockSource+0x16c>
 80028fc:	2b30      	cmp	r3, #48	; 0x30
 80028fe:	d064      	beq.n	80029ca <HAL_TIM_ConfigClockSource+0x15a>
 8002900:	2b30      	cmp	r3, #48	; 0x30
 8002902:	d86b      	bhi.n	80029dc <HAL_TIM_ConfigClockSource+0x16c>
 8002904:	2b20      	cmp	r3, #32
 8002906:	d060      	beq.n	80029ca <HAL_TIM_ConfigClockSource+0x15a>
 8002908:	2b20      	cmp	r3, #32
 800290a:	d867      	bhi.n	80029dc <HAL_TIM_ConfigClockSource+0x16c>
 800290c:	2b00      	cmp	r3, #0
 800290e:	d05c      	beq.n	80029ca <HAL_TIM_ConfigClockSource+0x15a>
 8002910:	2b10      	cmp	r3, #16
 8002912:	d05a      	beq.n	80029ca <HAL_TIM_ConfigClockSource+0x15a>
 8002914:	e062      	b.n	80029dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	6899      	ldr	r1, [r3, #8]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f000 f98d 	bl	8002c44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002938:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	609a      	str	r2, [r3, #8]
      break;
 8002942:	e04f      	b.n	80029e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6818      	ldr	r0, [r3, #0]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	6899      	ldr	r1, [r3, #8]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f000 f976 	bl	8002c44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002966:	609a      	str	r2, [r3, #8]
      break;
 8002968:	e03c      	b.n	80029e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6818      	ldr	r0, [r3, #0]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	6859      	ldr	r1, [r3, #4]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	461a      	mov	r2, r3
 8002978:	f000 f8ea 	bl	8002b50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2150      	movs	r1, #80	; 0x50
 8002982:	4618      	mov	r0, r3
 8002984:	f000 f943 	bl	8002c0e <TIM_ITRx_SetConfig>
      break;
 8002988:	e02c      	b.n	80029e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6818      	ldr	r0, [r3, #0]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	6859      	ldr	r1, [r3, #4]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	461a      	mov	r2, r3
 8002998:	f000 f909 	bl	8002bae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2160      	movs	r1, #96	; 0x60
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 f933 	bl	8002c0e <TIM_ITRx_SetConfig>
      break;
 80029a8:	e01c      	b.n	80029e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6818      	ldr	r0, [r3, #0]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	6859      	ldr	r1, [r3, #4]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	461a      	mov	r2, r3
 80029b8:	f000 f8ca 	bl	8002b50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2140      	movs	r1, #64	; 0x40
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 f923 	bl	8002c0e <TIM_ITRx_SetConfig>
      break;
 80029c8:	e00c      	b.n	80029e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4619      	mov	r1, r3
 80029d4:	4610      	mov	r0, r2
 80029d6:	f000 f91a 	bl	8002c0e <TIM_ITRx_SetConfig>
      break;
 80029da:	e003      	b.n	80029e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	73fb      	strb	r3, [r7, #15]
      break;
 80029e0:	e000      	b.n	80029e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80029e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
	...

08002a50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a34      	ldr	r2, [pc, #208]	; (8002b34 <TIM_Base_SetConfig+0xe4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d00f      	beq.n	8002a88 <TIM_Base_SetConfig+0x38>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a6e:	d00b      	beq.n	8002a88 <TIM_Base_SetConfig+0x38>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a31      	ldr	r2, [pc, #196]	; (8002b38 <TIM_Base_SetConfig+0xe8>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d007      	beq.n	8002a88 <TIM_Base_SetConfig+0x38>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a30      	ldr	r2, [pc, #192]	; (8002b3c <TIM_Base_SetConfig+0xec>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d003      	beq.n	8002a88 <TIM_Base_SetConfig+0x38>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a2f      	ldr	r2, [pc, #188]	; (8002b40 <TIM_Base_SetConfig+0xf0>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d108      	bne.n	8002a9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a25      	ldr	r2, [pc, #148]	; (8002b34 <TIM_Base_SetConfig+0xe4>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d01b      	beq.n	8002ada <TIM_Base_SetConfig+0x8a>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa8:	d017      	beq.n	8002ada <TIM_Base_SetConfig+0x8a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a22      	ldr	r2, [pc, #136]	; (8002b38 <TIM_Base_SetConfig+0xe8>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d013      	beq.n	8002ada <TIM_Base_SetConfig+0x8a>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a21      	ldr	r2, [pc, #132]	; (8002b3c <TIM_Base_SetConfig+0xec>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d00f      	beq.n	8002ada <TIM_Base_SetConfig+0x8a>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a20      	ldr	r2, [pc, #128]	; (8002b40 <TIM_Base_SetConfig+0xf0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d00b      	beq.n	8002ada <TIM_Base_SetConfig+0x8a>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a1f      	ldr	r2, [pc, #124]	; (8002b44 <TIM_Base_SetConfig+0xf4>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d007      	beq.n	8002ada <TIM_Base_SetConfig+0x8a>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a1e      	ldr	r2, [pc, #120]	; (8002b48 <TIM_Base_SetConfig+0xf8>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d003      	beq.n	8002ada <TIM_Base_SetConfig+0x8a>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a1d      	ldr	r2, [pc, #116]	; (8002b4c <TIM_Base_SetConfig+0xfc>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d108      	bne.n	8002aec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a08      	ldr	r2, [pc, #32]	; (8002b34 <TIM_Base_SetConfig+0xe4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d103      	bne.n	8002b20 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	691a      	ldr	r2, [r3, #16]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	615a      	str	r2, [r3, #20]
}
 8002b26:	bf00      	nop
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	40010000 	.word	0x40010000
 8002b38:	40000400 	.word	0x40000400
 8002b3c:	40000800 	.word	0x40000800
 8002b40:	40000c00 	.word	0x40000c00
 8002b44:	40014000 	.word	0x40014000
 8002b48:	40014400 	.word	0x40014400
 8002b4c:	40014800 	.word	0x40014800

08002b50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	f023 0201 	bic.w	r2, r3, #1
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f023 030a 	bic.w	r3, r3, #10
 8002b8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	621a      	str	r2, [r3, #32]
}
 8002ba2:	bf00      	nop
 8002ba4:	371c      	adds	r7, #28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b087      	sub	sp, #28
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	60f8      	str	r0, [r7, #12]
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	f023 0210 	bic.w	r2, r3, #16
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	031b      	lsls	r3, r3, #12
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002bea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	621a      	str	r2, [r3, #32]
}
 8002c02:	bf00      	nop
 8002c04:	371c      	adds	r7, #28
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b085      	sub	sp, #20
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	f043 0307 	orr.w	r3, r3, #7
 8002c30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	609a      	str	r2, [r3, #8]
}
 8002c38:	bf00      	nop
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
 8002c50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	021a      	lsls	r2, r3, #8
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	431a      	orrs	r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	609a      	str	r2, [r3, #8]
}
 8002c78:	bf00      	nop
 8002c7a:	371c      	adds	r7, #28
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d101      	bne.n	8002c9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	e050      	b.n	8002d3e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a1c      	ldr	r2, [pc, #112]	; (8002d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d018      	beq.n	8002d12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce8:	d013      	beq.n	8002d12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a18      	ldr	r2, [pc, #96]	; (8002d50 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d00e      	beq.n	8002d12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a16      	ldr	r2, [pc, #88]	; (8002d54 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d009      	beq.n	8002d12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a15      	ldr	r2, [pc, #84]	; (8002d58 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d004      	beq.n	8002d12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a13      	ldr	r2, [pc, #76]	; (8002d5c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d10c      	bne.n	8002d2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	40010000 	.word	0x40010000
 8002d50:	40000400 	.word	0x40000400
 8002d54:	40000800 	.word	0x40000800
 8002d58:	40000c00 	.word	0x40000c00
 8002d5c:	40014000 	.word	0x40014000

08002d60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <__errno>:
 8002d88:	4b01      	ldr	r3, [pc, #4]	; (8002d90 <__errno+0x8>)
 8002d8a:	6818      	ldr	r0, [r3, #0]
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	20000014 	.word	0x20000014

08002d94 <__libc_init_array>:
 8002d94:	b570      	push	{r4, r5, r6, lr}
 8002d96:	4d0d      	ldr	r5, [pc, #52]	; (8002dcc <__libc_init_array+0x38>)
 8002d98:	4c0d      	ldr	r4, [pc, #52]	; (8002dd0 <__libc_init_array+0x3c>)
 8002d9a:	1b64      	subs	r4, r4, r5
 8002d9c:	10a4      	asrs	r4, r4, #2
 8002d9e:	2600      	movs	r6, #0
 8002da0:	42a6      	cmp	r6, r4
 8002da2:	d109      	bne.n	8002db8 <__libc_init_array+0x24>
 8002da4:	4d0b      	ldr	r5, [pc, #44]	; (8002dd4 <__libc_init_array+0x40>)
 8002da6:	4c0c      	ldr	r4, [pc, #48]	; (8002dd8 <__libc_init_array+0x44>)
 8002da8:	f000 fc8e 	bl	80036c8 <_init>
 8002dac:	1b64      	subs	r4, r4, r5
 8002dae:	10a4      	asrs	r4, r4, #2
 8002db0:	2600      	movs	r6, #0
 8002db2:	42a6      	cmp	r6, r4
 8002db4:	d105      	bne.n	8002dc2 <__libc_init_array+0x2e>
 8002db6:	bd70      	pop	{r4, r5, r6, pc}
 8002db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dbc:	4798      	blx	r3
 8002dbe:	3601      	adds	r6, #1
 8002dc0:	e7ee      	b.n	8002da0 <__libc_init_array+0xc>
 8002dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dc6:	4798      	blx	r3
 8002dc8:	3601      	adds	r6, #1
 8002dca:	e7f2      	b.n	8002db2 <__libc_init_array+0x1e>
 8002dcc:	080037cc 	.word	0x080037cc
 8002dd0:	080037cc 	.word	0x080037cc
 8002dd4:	080037cc 	.word	0x080037cc
 8002dd8:	080037d0 	.word	0x080037d0

08002ddc <memset>:
 8002ddc:	4402      	add	r2, r0
 8002dde:	4603      	mov	r3, r0
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d100      	bne.n	8002de6 <memset+0xa>
 8002de4:	4770      	bx	lr
 8002de6:	f803 1b01 	strb.w	r1, [r3], #1
 8002dea:	e7f9      	b.n	8002de0 <memset+0x4>

08002dec <siprintf>:
 8002dec:	b40e      	push	{r1, r2, r3}
 8002dee:	b500      	push	{lr}
 8002df0:	b09c      	sub	sp, #112	; 0x70
 8002df2:	ab1d      	add	r3, sp, #116	; 0x74
 8002df4:	9002      	str	r0, [sp, #8]
 8002df6:	9006      	str	r0, [sp, #24]
 8002df8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002dfc:	4809      	ldr	r0, [pc, #36]	; (8002e24 <siprintf+0x38>)
 8002dfe:	9107      	str	r1, [sp, #28]
 8002e00:	9104      	str	r1, [sp, #16]
 8002e02:	4909      	ldr	r1, [pc, #36]	; (8002e28 <siprintf+0x3c>)
 8002e04:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e08:	9105      	str	r1, [sp, #20]
 8002e0a:	6800      	ldr	r0, [r0, #0]
 8002e0c:	9301      	str	r3, [sp, #4]
 8002e0e:	a902      	add	r1, sp, #8
 8002e10:	f000 f868 	bl	8002ee4 <_svfiprintf_r>
 8002e14:	9b02      	ldr	r3, [sp, #8]
 8002e16:	2200      	movs	r2, #0
 8002e18:	701a      	strb	r2, [r3, #0]
 8002e1a:	b01c      	add	sp, #112	; 0x70
 8002e1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e20:	b003      	add	sp, #12
 8002e22:	4770      	bx	lr
 8002e24:	20000014 	.word	0x20000014
 8002e28:	ffff0208 	.word	0xffff0208

08002e2c <__ssputs_r>:
 8002e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e30:	688e      	ldr	r6, [r1, #8]
 8002e32:	429e      	cmp	r6, r3
 8002e34:	4682      	mov	sl, r0
 8002e36:	460c      	mov	r4, r1
 8002e38:	4690      	mov	r8, r2
 8002e3a:	461f      	mov	r7, r3
 8002e3c:	d838      	bhi.n	8002eb0 <__ssputs_r+0x84>
 8002e3e:	898a      	ldrh	r2, [r1, #12]
 8002e40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002e44:	d032      	beq.n	8002eac <__ssputs_r+0x80>
 8002e46:	6825      	ldr	r5, [r4, #0]
 8002e48:	6909      	ldr	r1, [r1, #16]
 8002e4a:	eba5 0901 	sub.w	r9, r5, r1
 8002e4e:	6965      	ldr	r5, [r4, #20]
 8002e50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e58:	3301      	adds	r3, #1
 8002e5a:	444b      	add	r3, r9
 8002e5c:	106d      	asrs	r5, r5, #1
 8002e5e:	429d      	cmp	r5, r3
 8002e60:	bf38      	it	cc
 8002e62:	461d      	movcc	r5, r3
 8002e64:	0553      	lsls	r3, r2, #21
 8002e66:	d531      	bpl.n	8002ecc <__ssputs_r+0xa0>
 8002e68:	4629      	mov	r1, r5
 8002e6a:	f000 fb63 	bl	8003534 <_malloc_r>
 8002e6e:	4606      	mov	r6, r0
 8002e70:	b950      	cbnz	r0, 8002e88 <__ssputs_r+0x5c>
 8002e72:	230c      	movs	r3, #12
 8002e74:	f8ca 3000 	str.w	r3, [sl]
 8002e78:	89a3      	ldrh	r3, [r4, #12]
 8002e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e7e:	81a3      	strh	r3, [r4, #12]
 8002e80:	f04f 30ff 	mov.w	r0, #4294967295
 8002e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e88:	6921      	ldr	r1, [r4, #16]
 8002e8a:	464a      	mov	r2, r9
 8002e8c:	f000 fabe 	bl	800340c <memcpy>
 8002e90:	89a3      	ldrh	r3, [r4, #12]
 8002e92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e9a:	81a3      	strh	r3, [r4, #12]
 8002e9c:	6126      	str	r6, [r4, #16]
 8002e9e:	6165      	str	r5, [r4, #20]
 8002ea0:	444e      	add	r6, r9
 8002ea2:	eba5 0509 	sub.w	r5, r5, r9
 8002ea6:	6026      	str	r6, [r4, #0]
 8002ea8:	60a5      	str	r5, [r4, #8]
 8002eaa:	463e      	mov	r6, r7
 8002eac:	42be      	cmp	r6, r7
 8002eae:	d900      	bls.n	8002eb2 <__ssputs_r+0x86>
 8002eb0:	463e      	mov	r6, r7
 8002eb2:	6820      	ldr	r0, [r4, #0]
 8002eb4:	4632      	mov	r2, r6
 8002eb6:	4641      	mov	r1, r8
 8002eb8:	f000 fab6 	bl	8003428 <memmove>
 8002ebc:	68a3      	ldr	r3, [r4, #8]
 8002ebe:	1b9b      	subs	r3, r3, r6
 8002ec0:	60a3      	str	r3, [r4, #8]
 8002ec2:	6823      	ldr	r3, [r4, #0]
 8002ec4:	4433      	add	r3, r6
 8002ec6:	6023      	str	r3, [r4, #0]
 8002ec8:	2000      	movs	r0, #0
 8002eca:	e7db      	b.n	8002e84 <__ssputs_r+0x58>
 8002ecc:	462a      	mov	r2, r5
 8002ece:	f000 fba5 	bl	800361c <_realloc_r>
 8002ed2:	4606      	mov	r6, r0
 8002ed4:	2800      	cmp	r0, #0
 8002ed6:	d1e1      	bne.n	8002e9c <__ssputs_r+0x70>
 8002ed8:	6921      	ldr	r1, [r4, #16]
 8002eda:	4650      	mov	r0, sl
 8002edc:	f000 fabe 	bl	800345c <_free_r>
 8002ee0:	e7c7      	b.n	8002e72 <__ssputs_r+0x46>
	...

08002ee4 <_svfiprintf_r>:
 8002ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ee8:	4698      	mov	r8, r3
 8002eea:	898b      	ldrh	r3, [r1, #12]
 8002eec:	061b      	lsls	r3, r3, #24
 8002eee:	b09d      	sub	sp, #116	; 0x74
 8002ef0:	4607      	mov	r7, r0
 8002ef2:	460d      	mov	r5, r1
 8002ef4:	4614      	mov	r4, r2
 8002ef6:	d50e      	bpl.n	8002f16 <_svfiprintf_r+0x32>
 8002ef8:	690b      	ldr	r3, [r1, #16]
 8002efa:	b963      	cbnz	r3, 8002f16 <_svfiprintf_r+0x32>
 8002efc:	2140      	movs	r1, #64	; 0x40
 8002efe:	f000 fb19 	bl	8003534 <_malloc_r>
 8002f02:	6028      	str	r0, [r5, #0]
 8002f04:	6128      	str	r0, [r5, #16]
 8002f06:	b920      	cbnz	r0, 8002f12 <_svfiprintf_r+0x2e>
 8002f08:	230c      	movs	r3, #12
 8002f0a:	603b      	str	r3, [r7, #0]
 8002f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f10:	e0d1      	b.n	80030b6 <_svfiprintf_r+0x1d2>
 8002f12:	2340      	movs	r3, #64	; 0x40
 8002f14:	616b      	str	r3, [r5, #20]
 8002f16:	2300      	movs	r3, #0
 8002f18:	9309      	str	r3, [sp, #36]	; 0x24
 8002f1a:	2320      	movs	r3, #32
 8002f1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f20:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f24:	2330      	movs	r3, #48	; 0x30
 8002f26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80030d0 <_svfiprintf_r+0x1ec>
 8002f2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f2e:	f04f 0901 	mov.w	r9, #1
 8002f32:	4623      	mov	r3, r4
 8002f34:	469a      	mov	sl, r3
 8002f36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f3a:	b10a      	cbz	r2, 8002f40 <_svfiprintf_r+0x5c>
 8002f3c:	2a25      	cmp	r2, #37	; 0x25
 8002f3e:	d1f9      	bne.n	8002f34 <_svfiprintf_r+0x50>
 8002f40:	ebba 0b04 	subs.w	fp, sl, r4
 8002f44:	d00b      	beq.n	8002f5e <_svfiprintf_r+0x7a>
 8002f46:	465b      	mov	r3, fp
 8002f48:	4622      	mov	r2, r4
 8002f4a:	4629      	mov	r1, r5
 8002f4c:	4638      	mov	r0, r7
 8002f4e:	f7ff ff6d 	bl	8002e2c <__ssputs_r>
 8002f52:	3001      	adds	r0, #1
 8002f54:	f000 80aa 	beq.w	80030ac <_svfiprintf_r+0x1c8>
 8002f58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f5a:	445a      	add	r2, fp
 8002f5c:	9209      	str	r2, [sp, #36]	; 0x24
 8002f5e:	f89a 3000 	ldrb.w	r3, [sl]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 80a2 	beq.w	80030ac <_svfiprintf_r+0x1c8>
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f72:	f10a 0a01 	add.w	sl, sl, #1
 8002f76:	9304      	str	r3, [sp, #16]
 8002f78:	9307      	str	r3, [sp, #28]
 8002f7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f7e:	931a      	str	r3, [sp, #104]	; 0x68
 8002f80:	4654      	mov	r4, sl
 8002f82:	2205      	movs	r2, #5
 8002f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f88:	4851      	ldr	r0, [pc, #324]	; (80030d0 <_svfiprintf_r+0x1ec>)
 8002f8a:	f7fd f939 	bl	8000200 <memchr>
 8002f8e:	9a04      	ldr	r2, [sp, #16]
 8002f90:	b9d8      	cbnz	r0, 8002fca <_svfiprintf_r+0xe6>
 8002f92:	06d0      	lsls	r0, r2, #27
 8002f94:	bf44      	itt	mi
 8002f96:	2320      	movmi	r3, #32
 8002f98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f9c:	0711      	lsls	r1, r2, #28
 8002f9e:	bf44      	itt	mi
 8002fa0:	232b      	movmi	r3, #43	; 0x2b
 8002fa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fa6:	f89a 3000 	ldrb.w	r3, [sl]
 8002faa:	2b2a      	cmp	r3, #42	; 0x2a
 8002fac:	d015      	beq.n	8002fda <_svfiprintf_r+0xf6>
 8002fae:	9a07      	ldr	r2, [sp, #28]
 8002fb0:	4654      	mov	r4, sl
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	f04f 0c0a 	mov.w	ip, #10
 8002fb8:	4621      	mov	r1, r4
 8002fba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fbe:	3b30      	subs	r3, #48	; 0x30
 8002fc0:	2b09      	cmp	r3, #9
 8002fc2:	d94e      	bls.n	8003062 <_svfiprintf_r+0x17e>
 8002fc4:	b1b0      	cbz	r0, 8002ff4 <_svfiprintf_r+0x110>
 8002fc6:	9207      	str	r2, [sp, #28]
 8002fc8:	e014      	b.n	8002ff4 <_svfiprintf_r+0x110>
 8002fca:	eba0 0308 	sub.w	r3, r0, r8
 8002fce:	fa09 f303 	lsl.w	r3, r9, r3
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	9304      	str	r3, [sp, #16]
 8002fd6:	46a2      	mov	sl, r4
 8002fd8:	e7d2      	b.n	8002f80 <_svfiprintf_r+0x9c>
 8002fda:	9b03      	ldr	r3, [sp, #12]
 8002fdc:	1d19      	adds	r1, r3, #4
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	9103      	str	r1, [sp, #12]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	bfbb      	ittet	lt
 8002fe6:	425b      	neglt	r3, r3
 8002fe8:	f042 0202 	orrlt.w	r2, r2, #2
 8002fec:	9307      	strge	r3, [sp, #28]
 8002fee:	9307      	strlt	r3, [sp, #28]
 8002ff0:	bfb8      	it	lt
 8002ff2:	9204      	strlt	r2, [sp, #16]
 8002ff4:	7823      	ldrb	r3, [r4, #0]
 8002ff6:	2b2e      	cmp	r3, #46	; 0x2e
 8002ff8:	d10c      	bne.n	8003014 <_svfiprintf_r+0x130>
 8002ffa:	7863      	ldrb	r3, [r4, #1]
 8002ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8002ffe:	d135      	bne.n	800306c <_svfiprintf_r+0x188>
 8003000:	9b03      	ldr	r3, [sp, #12]
 8003002:	1d1a      	adds	r2, r3, #4
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	9203      	str	r2, [sp, #12]
 8003008:	2b00      	cmp	r3, #0
 800300a:	bfb8      	it	lt
 800300c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003010:	3402      	adds	r4, #2
 8003012:	9305      	str	r3, [sp, #20]
 8003014:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80030e0 <_svfiprintf_r+0x1fc>
 8003018:	7821      	ldrb	r1, [r4, #0]
 800301a:	2203      	movs	r2, #3
 800301c:	4650      	mov	r0, sl
 800301e:	f7fd f8ef 	bl	8000200 <memchr>
 8003022:	b140      	cbz	r0, 8003036 <_svfiprintf_r+0x152>
 8003024:	2340      	movs	r3, #64	; 0x40
 8003026:	eba0 000a 	sub.w	r0, r0, sl
 800302a:	fa03 f000 	lsl.w	r0, r3, r0
 800302e:	9b04      	ldr	r3, [sp, #16]
 8003030:	4303      	orrs	r3, r0
 8003032:	3401      	adds	r4, #1
 8003034:	9304      	str	r3, [sp, #16]
 8003036:	f814 1b01 	ldrb.w	r1, [r4], #1
 800303a:	4826      	ldr	r0, [pc, #152]	; (80030d4 <_svfiprintf_r+0x1f0>)
 800303c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003040:	2206      	movs	r2, #6
 8003042:	f7fd f8dd 	bl	8000200 <memchr>
 8003046:	2800      	cmp	r0, #0
 8003048:	d038      	beq.n	80030bc <_svfiprintf_r+0x1d8>
 800304a:	4b23      	ldr	r3, [pc, #140]	; (80030d8 <_svfiprintf_r+0x1f4>)
 800304c:	bb1b      	cbnz	r3, 8003096 <_svfiprintf_r+0x1b2>
 800304e:	9b03      	ldr	r3, [sp, #12]
 8003050:	3307      	adds	r3, #7
 8003052:	f023 0307 	bic.w	r3, r3, #7
 8003056:	3308      	adds	r3, #8
 8003058:	9303      	str	r3, [sp, #12]
 800305a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800305c:	4433      	add	r3, r6
 800305e:	9309      	str	r3, [sp, #36]	; 0x24
 8003060:	e767      	b.n	8002f32 <_svfiprintf_r+0x4e>
 8003062:	fb0c 3202 	mla	r2, ip, r2, r3
 8003066:	460c      	mov	r4, r1
 8003068:	2001      	movs	r0, #1
 800306a:	e7a5      	b.n	8002fb8 <_svfiprintf_r+0xd4>
 800306c:	2300      	movs	r3, #0
 800306e:	3401      	adds	r4, #1
 8003070:	9305      	str	r3, [sp, #20]
 8003072:	4619      	mov	r1, r3
 8003074:	f04f 0c0a 	mov.w	ip, #10
 8003078:	4620      	mov	r0, r4
 800307a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800307e:	3a30      	subs	r2, #48	; 0x30
 8003080:	2a09      	cmp	r2, #9
 8003082:	d903      	bls.n	800308c <_svfiprintf_r+0x1a8>
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0c5      	beq.n	8003014 <_svfiprintf_r+0x130>
 8003088:	9105      	str	r1, [sp, #20]
 800308a:	e7c3      	b.n	8003014 <_svfiprintf_r+0x130>
 800308c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003090:	4604      	mov	r4, r0
 8003092:	2301      	movs	r3, #1
 8003094:	e7f0      	b.n	8003078 <_svfiprintf_r+0x194>
 8003096:	ab03      	add	r3, sp, #12
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	462a      	mov	r2, r5
 800309c:	4b0f      	ldr	r3, [pc, #60]	; (80030dc <_svfiprintf_r+0x1f8>)
 800309e:	a904      	add	r1, sp, #16
 80030a0:	4638      	mov	r0, r7
 80030a2:	f3af 8000 	nop.w
 80030a6:	1c42      	adds	r2, r0, #1
 80030a8:	4606      	mov	r6, r0
 80030aa:	d1d6      	bne.n	800305a <_svfiprintf_r+0x176>
 80030ac:	89ab      	ldrh	r3, [r5, #12]
 80030ae:	065b      	lsls	r3, r3, #25
 80030b0:	f53f af2c 	bmi.w	8002f0c <_svfiprintf_r+0x28>
 80030b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030b6:	b01d      	add	sp, #116	; 0x74
 80030b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030bc:	ab03      	add	r3, sp, #12
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	462a      	mov	r2, r5
 80030c2:	4b06      	ldr	r3, [pc, #24]	; (80030dc <_svfiprintf_r+0x1f8>)
 80030c4:	a904      	add	r1, sp, #16
 80030c6:	4638      	mov	r0, r7
 80030c8:	f000 f87a 	bl	80031c0 <_printf_i>
 80030cc:	e7eb      	b.n	80030a6 <_svfiprintf_r+0x1c2>
 80030ce:	bf00      	nop
 80030d0:	08003790 	.word	0x08003790
 80030d4:	0800379a 	.word	0x0800379a
 80030d8:	00000000 	.word	0x00000000
 80030dc:	08002e2d 	.word	0x08002e2d
 80030e0:	08003796 	.word	0x08003796

080030e4 <_printf_common>:
 80030e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030e8:	4616      	mov	r6, r2
 80030ea:	4699      	mov	r9, r3
 80030ec:	688a      	ldr	r2, [r1, #8]
 80030ee:	690b      	ldr	r3, [r1, #16]
 80030f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030f4:	4293      	cmp	r3, r2
 80030f6:	bfb8      	it	lt
 80030f8:	4613      	movlt	r3, r2
 80030fa:	6033      	str	r3, [r6, #0]
 80030fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003100:	4607      	mov	r7, r0
 8003102:	460c      	mov	r4, r1
 8003104:	b10a      	cbz	r2, 800310a <_printf_common+0x26>
 8003106:	3301      	adds	r3, #1
 8003108:	6033      	str	r3, [r6, #0]
 800310a:	6823      	ldr	r3, [r4, #0]
 800310c:	0699      	lsls	r1, r3, #26
 800310e:	bf42      	ittt	mi
 8003110:	6833      	ldrmi	r3, [r6, #0]
 8003112:	3302      	addmi	r3, #2
 8003114:	6033      	strmi	r3, [r6, #0]
 8003116:	6825      	ldr	r5, [r4, #0]
 8003118:	f015 0506 	ands.w	r5, r5, #6
 800311c:	d106      	bne.n	800312c <_printf_common+0x48>
 800311e:	f104 0a19 	add.w	sl, r4, #25
 8003122:	68e3      	ldr	r3, [r4, #12]
 8003124:	6832      	ldr	r2, [r6, #0]
 8003126:	1a9b      	subs	r3, r3, r2
 8003128:	42ab      	cmp	r3, r5
 800312a:	dc26      	bgt.n	800317a <_printf_common+0x96>
 800312c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003130:	1e13      	subs	r3, r2, #0
 8003132:	6822      	ldr	r2, [r4, #0]
 8003134:	bf18      	it	ne
 8003136:	2301      	movne	r3, #1
 8003138:	0692      	lsls	r2, r2, #26
 800313a:	d42b      	bmi.n	8003194 <_printf_common+0xb0>
 800313c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003140:	4649      	mov	r1, r9
 8003142:	4638      	mov	r0, r7
 8003144:	47c0      	blx	r8
 8003146:	3001      	adds	r0, #1
 8003148:	d01e      	beq.n	8003188 <_printf_common+0xa4>
 800314a:	6823      	ldr	r3, [r4, #0]
 800314c:	68e5      	ldr	r5, [r4, #12]
 800314e:	6832      	ldr	r2, [r6, #0]
 8003150:	f003 0306 	and.w	r3, r3, #6
 8003154:	2b04      	cmp	r3, #4
 8003156:	bf08      	it	eq
 8003158:	1aad      	subeq	r5, r5, r2
 800315a:	68a3      	ldr	r3, [r4, #8]
 800315c:	6922      	ldr	r2, [r4, #16]
 800315e:	bf0c      	ite	eq
 8003160:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003164:	2500      	movne	r5, #0
 8003166:	4293      	cmp	r3, r2
 8003168:	bfc4      	itt	gt
 800316a:	1a9b      	subgt	r3, r3, r2
 800316c:	18ed      	addgt	r5, r5, r3
 800316e:	2600      	movs	r6, #0
 8003170:	341a      	adds	r4, #26
 8003172:	42b5      	cmp	r5, r6
 8003174:	d11a      	bne.n	80031ac <_printf_common+0xc8>
 8003176:	2000      	movs	r0, #0
 8003178:	e008      	b.n	800318c <_printf_common+0xa8>
 800317a:	2301      	movs	r3, #1
 800317c:	4652      	mov	r2, sl
 800317e:	4649      	mov	r1, r9
 8003180:	4638      	mov	r0, r7
 8003182:	47c0      	blx	r8
 8003184:	3001      	adds	r0, #1
 8003186:	d103      	bne.n	8003190 <_printf_common+0xac>
 8003188:	f04f 30ff 	mov.w	r0, #4294967295
 800318c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003190:	3501      	adds	r5, #1
 8003192:	e7c6      	b.n	8003122 <_printf_common+0x3e>
 8003194:	18e1      	adds	r1, r4, r3
 8003196:	1c5a      	adds	r2, r3, #1
 8003198:	2030      	movs	r0, #48	; 0x30
 800319a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800319e:	4422      	add	r2, r4
 80031a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031a8:	3302      	adds	r3, #2
 80031aa:	e7c7      	b.n	800313c <_printf_common+0x58>
 80031ac:	2301      	movs	r3, #1
 80031ae:	4622      	mov	r2, r4
 80031b0:	4649      	mov	r1, r9
 80031b2:	4638      	mov	r0, r7
 80031b4:	47c0      	blx	r8
 80031b6:	3001      	adds	r0, #1
 80031b8:	d0e6      	beq.n	8003188 <_printf_common+0xa4>
 80031ba:	3601      	adds	r6, #1
 80031bc:	e7d9      	b.n	8003172 <_printf_common+0x8e>
	...

080031c0 <_printf_i>:
 80031c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031c4:	7e0f      	ldrb	r7, [r1, #24]
 80031c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80031c8:	2f78      	cmp	r7, #120	; 0x78
 80031ca:	4691      	mov	r9, r2
 80031cc:	4680      	mov	r8, r0
 80031ce:	460c      	mov	r4, r1
 80031d0:	469a      	mov	sl, r3
 80031d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80031d6:	d807      	bhi.n	80031e8 <_printf_i+0x28>
 80031d8:	2f62      	cmp	r7, #98	; 0x62
 80031da:	d80a      	bhi.n	80031f2 <_printf_i+0x32>
 80031dc:	2f00      	cmp	r7, #0
 80031de:	f000 80d8 	beq.w	8003392 <_printf_i+0x1d2>
 80031e2:	2f58      	cmp	r7, #88	; 0x58
 80031e4:	f000 80a3 	beq.w	800332e <_printf_i+0x16e>
 80031e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80031f0:	e03a      	b.n	8003268 <_printf_i+0xa8>
 80031f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80031f6:	2b15      	cmp	r3, #21
 80031f8:	d8f6      	bhi.n	80031e8 <_printf_i+0x28>
 80031fa:	a101      	add	r1, pc, #4	; (adr r1, 8003200 <_printf_i+0x40>)
 80031fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003200:	08003259 	.word	0x08003259
 8003204:	0800326d 	.word	0x0800326d
 8003208:	080031e9 	.word	0x080031e9
 800320c:	080031e9 	.word	0x080031e9
 8003210:	080031e9 	.word	0x080031e9
 8003214:	080031e9 	.word	0x080031e9
 8003218:	0800326d 	.word	0x0800326d
 800321c:	080031e9 	.word	0x080031e9
 8003220:	080031e9 	.word	0x080031e9
 8003224:	080031e9 	.word	0x080031e9
 8003228:	080031e9 	.word	0x080031e9
 800322c:	08003379 	.word	0x08003379
 8003230:	0800329d 	.word	0x0800329d
 8003234:	0800335b 	.word	0x0800335b
 8003238:	080031e9 	.word	0x080031e9
 800323c:	080031e9 	.word	0x080031e9
 8003240:	0800339b 	.word	0x0800339b
 8003244:	080031e9 	.word	0x080031e9
 8003248:	0800329d 	.word	0x0800329d
 800324c:	080031e9 	.word	0x080031e9
 8003250:	080031e9 	.word	0x080031e9
 8003254:	08003363 	.word	0x08003363
 8003258:	682b      	ldr	r3, [r5, #0]
 800325a:	1d1a      	adds	r2, r3, #4
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	602a      	str	r2, [r5, #0]
 8003260:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003264:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003268:	2301      	movs	r3, #1
 800326a:	e0a3      	b.n	80033b4 <_printf_i+0x1f4>
 800326c:	6820      	ldr	r0, [r4, #0]
 800326e:	6829      	ldr	r1, [r5, #0]
 8003270:	0606      	lsls	r6, r0, #24
 8003272:	f101 0304 	add.w	r3, r1, #4
 8003276:	d50a      	bpl.n	800328e <_printf_i+0xce>
 8003278:	680e      	ldr	r6, [r1, #0]
 800327a:	602b      	str	r3, [r5, #0]
 800327c:	2e00      	cmp	r6, #0
 800327e:	da03      	bge.n	8003288 <_printf_i+0xc8>
 8003280:	232d      	movs	r3, #45	; 0x2d
 8003282:	4276      	negs	r6, r6
 8003284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003288:	485e      	ldr	r0, [pc, #376]	; (8003404 <_printf_i+0x244>)
 800328a:	230a      	movs	r3, #10
 800328c:	e019      	b.n	80032c2 <_printf_i+0x102>
 800328e:	680e      	ldr	r6, [r1, #0]
 8003290:	602b      	str	r3, [r5, #0]
 8003292:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003296:	bf18      	it	ne
 8003298:	b236      	sxthne	r6, r6
 800329a:	e7ef      	b.n	800327c <_printf_i+0xbc>
 800329c:	682b      	ldr	r3, [r5, #0]
 800329e:	6820      	ldr	r0, [r4, #0]
 80032a0:	1d19      	adds	r1, r3, #4
 80032a2:	6029      	str	r1, [r5, #0]
 80032a4:	0601      	lsls	r1, r0, #24
 80032a6:	d501      	bpl.n	80032ac <_printf_i+0xec>
 80032a8:	681e      	ldr	r6, [r3, #0]
 80032aa:	e002      	b.n	80032b2 <_printf_i+0xf2>
 80032ac:	0646      	lsls	r6, r0, #25
 80032ae:	d5fb      	bpl.n	80032a8 <_printf_i+0xe8>
 80032b0:	881e      	ldrh	r6, [r3, #0]
 80032b2:	4854      	ldr	r0, [pc, #336]	; (8003404 <_printf_i+0x244>)
 80032b4:	2f6f      	cmp	r7, #111	; 0x6f
 80032b6:	bf0c      	ite	eq
 80032b8:	2308      	moveq	r3, #8
 80032ba:	230a      	movne	r3, #10
 80032bc:	2100      	movs	r1, #0
 80032be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032c2:	6865      	ldr	r5, [r4, #4]
 80032c4:	60a5      	str	r5, [r4, #8]
 80032c6:	2d00      	cmp	r5, #0
 80032c8:	bfa2      	ittt	ge
 80032ca:	6821      	ldrge	r1, [r4, #0]
 80032cc:	f021 0104 	bicge.w	r1, r1, #4
 80032d0:	6021      	strge	r1, [r4, #0]
 80032d2:	b90e      	cbnz	r6, 80032d8 <_printf_i+0x118>
 80032d4:	2d00      	cmp	r5, #0
 80032d6:	d04d      	beq.n	8003374 <_printf_i+0x1b4>
 80032d8:	4615      	mov	r5, r2
 80032da:	fbb6 f1f3 	udiv	r1, r6, r3
 80032de:	fb03 6711 	mls	r7, r3, r1, r6
 80032e2:	5dc7      	ldrb	r7, [r0, r7]
 80032e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80032e8:	4637      	mov	r7, r6
 80032ea:	42bb      	cmp	r3, r7
 80032ec:	460e      	mov	r6, r1
 80032ee:	d9f4      	bls.n	80032da <_printf_i+0x11a>
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d10b      	bne.n	800330c <_printf_i+0x14c>
 80032f4:	6823      	ldr	r3, [r4, #0]
 80032f6:	07de      	lsls	r6, r3, #31
 80032f8:	d508      	bpl.n	800330c <_printf_i+0x14c>
 80032fa:	6923      	ldr	r3, [r4, #16]
 80032fc:	6861      	ldr	r1, [r4, #4]
 80032fe:	4299      	cmp	r1, r3
 8003300:	bfde      	ittt	le
 8003302:	2330      	movle	r3, #48	; 0x30
 8003304:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003308:	f105 35ff 	addle.w	r5, r5, #4294967295
 800330c:	1b52      	subs	r2, r2, r5
 800330e:	6122      	str	r2, [r4, #16]
 8003310:	f8cd a000 	str.w	sl, [sp]
 8003314:	464b      	mov	r3, r9
 8003316:	aa03      	add	r2, sp, #12
 8003318:	4621      	mov	r1, r4
 800331a:	4640      	mov	r0, r8
 800331c:	f7ff fee2 	bl	80030e4 <_printf_common>
 8003320:	3001      	adds	r0, #1
 8003322:	d14c      	bne.n	80033be <_printf_i+0x1fe>
 8003324:	f04f 30ff 	mov.w	r0, #4294967295
 8003328:	b004      	add	sp, #16
 800332a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800332e:	4835      	ldr	r0, [pc, #212]	; (8003404 <_printf_i+0x244>)
 8003330:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003334:	6829      	ldr	r1, [r5, #0]
 8003336:	6823      	ldr	r3, [r4, #0]
 8003338:	f851 6b04 	ldr.w	r6, [r1], #4
 800333c:	6029      	str	r1, [r5, #0]
 800333e:	061d      	lsls	r5, r3, #24
 8003340:	d514      	bpl.n	800336c <_printf_i+0x1ac>
 8003342:	07df      	lsls	r7, r3, #31
 8003344:	bf44      	itt	mi
 8003346:	f043 0320 	orrmi.w	r3, r3, #32
 800334a:	6023      	strmi	r3, [r4, #0]
 800334c:	b91e      	cbnz	r6, 8003356 <_printf_i+0x196>
 800334e:	6823      	ldr	r3, [r4, #0]
 8003350:	f023 0320 	bic.w	r3, r3, #32
 8003354:	6023      	str	r3, [r4, #0]
 8003356:	2310      	movs	r3, #16
 8003358:	e7b0      	b.n	80032bc <_printf_i+0xfc>
 800335a:	6823      	ldr	r3, [r4, #0]
 800335c:	f043 0320 	orr.w	r3, r3, #32
 8003360:	6023      	str	r3, [r4, #0]
 8003362:	2378      	movs	r3, #120	; 0x78
 8003364:	4828      	ldr	r0, [pc, #160]	; (8003408 <_printf_i+0x248>)
 8003366:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800336a:	e7e3      	b.n	8003334 <_printf_i+0x174>
 800336c:	0659      	lsls	r1, r3, #25
 800336e:	bf48      	it	mi
 8003370:	b2b6      	uxthmi	r6, r6
 8003372:	e7e6      	b.n	8003342 <_printf_i+0x182>
 8003374:	4615      	mov	r5, r2
 8003376:	e7bb      	b.n	80032f0 <_printf_i+0x130>
 8003378:	682b      	ldr	r3, [r5, #0]
 800337a:	6826      	ldr	r6, [r4, #0]
 800337c:	6961      	ldr	r1, [r4, #20]
 800337e:	1d18      	adds	r0, r3, #4
 8003380:	6028      	str	r0, [r5, #0]
 8003382:	0635      	lsls	r5, r6, #24
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	d501      	bpl.n	800338c <_printf_i+0x1cc>
 8003388:	6019      	str	r1, [r3, #0]
 800338a:	e002      	b.n	8003392 <_printf_i+0x1d2>
 800338c:	0670      	lsls	r0, r6, #25
 800338e:	d5fb      	bpl.n	8003388 <_printf_i+0x1c8>
 8003390:	8019      	strh	r1, [r3, #0]
 8003392:	2300      	movs	r3, #0
 8003394:	6123      	str	r3, [r4, #16]
 8003396:	4615      	mov	r5, r2
 8003398:	e7ba      	b.n	8003310 <_printf_i+0x150>
 800339a:	682b      	ldr	r3, [r5, #0]
 800339c:	1d1a      	adds	r2, r3, #4
 800339e:	602a      	str	r2, [r5, #0]
 80033a0:	681d      	ldr	r5, [r3, #0]
 80033a2:	6862      	ldr	r2, [r4, #4]
 80033a4:	2100      	movs	r1, #0
 80033a6:	4628      	mov	r0, r5
 80033a8:	f7fc ff2a 	bl	8000200 <memchr>
 80033ac:	b108      	cbz	r0, 80033b2 <_printf_i+0x1f2>
 80033ae:	1b40      	subs	r0, r0, r5
 80033b0:	6060      	str	r0, [r4, #4]
 80033b2:	6863      	ldr	r3, [r4, #4]
 80033b4:	6123      	str	r3, [r4, #16]
 80033b6:	2300      	movs	r3, #0
 80033b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033bc:	e7a8      	b.n	8003310 <_printf_i+0x150>
 80033be:	6923      	ldr	r3, [r4, #16]
 80033c0:	462a      	mov	r2, r5
 80033c2:	4649      	mov	r1, r9
 80033c4:	4640      	mov	r0, r8
 80033c6:	47d0      	blx	sl
 80033c8:	3001      	adds	r0, #1
 80033ca:	d0ab      	beq.n	8003324 <_printf_i+0x164>
 80033cc:	6823      	ldr	r3, [r4, #0]
 80033ce:	079b      	lsls	r3, r3, #30
 80033d0:	d413      	bmi.n	80033fa <_printf_i+0x23a>
 80033d2:	68e0      	ldr	r0, [r4, #12]
 80033d4:	9b03      	ldr	r3, [sp, #12]
 80033d6:	4298      	cmp	r0, r3
 80033d8:	bfb8      	it	lt
 80033da:	4618      	movlt	r0, r3
 80033dc:	e7a4      	b.n	8003328 <_printf_i+0x168>
 80033de:	2301      	movs	r3, #1
 80033e0:	4632      	mov	r2, r6
 80033e2:	4649      	mov	r1, r9
 80033e4:	4640      	mov	r0, r8
 80033e6:	47d0      	blx	sl
 80033e8:	3001      	adds	r0, #1
 80033ea:	d09b      	beq.n	8003324 <_printf_i+0x164>
 80033ec:	3501      	adds	r5, #1
 80033ee:	68e3      	ldr	r3, [r4, #12]
 80033f0:	9903      	ldr	r1, [sp, #12]
 80033f2:	1a5b      	subs	r3, r3, r1
 80033f4:	42ab      	cmp	r3, r5
 80033f6:	dcf2      	bgt.n	80033de <_printf_i+0x21e>
 80033f8:	e7eb      	b.n	80033d2 <_printf_i+0x212>
 80033fa:	2500      	movs	r5, #0
 80033fc:	f104 0619 	add.w	r6, r4, #25
 8003400:	e7f5      	b.n	80033ee <_printf_i+0x22e>
 8003402:	bf00      	nop
 8003404:	080037a1 	.word	0x080037a1
 8003408:	080037b2 	.word	0x080037b2

0800340c <memcpy>:
 800340c:	440a      	add	r2, r1
 800340e:	4291      	cmp	r1, r2
 8003410:	f100 33ff 	add.w	r3, r0, #4294967295
 8003414:	d100      	bne.n	8003418 <memcpy+0xc>
 8003416:	4770      	bx	lr
 8003418:	b510      	push	{r4, lr}
 800341a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800341e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003422:	4291      	cmp	r1, r2
 8003424:	d1f9      	bne.n	800341a <memcpy+0xe>
 8003426:	bd10      	pop	{r4, pc}

08003428 <memmove>:
 8003428:	4288      	cmp	r0, r1
 800342a:	b510      	push	{r4, lr}
 800342c:	eb01 0402 	add.w	r4, r1, r2
 8003430:	d902      	bls.n	8003438 <memmove+0x10>
 8003432:	4284      	cmp	r4, r0
 8003434:	4623      	mov	r3, r4
 8003436:	d807      	bhi.n	8003448 <memmove+0x20>
 8003438:	1e43      	subs	r3, r0, #1
 800343a:	42a1      	cmp	r1, r4
 800343c:	d008      	beq.n	8003450 <memmove+0x28>
 800343e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003442:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003446:	e7f8      	b.n	800343a <memmove+0x12>
 8003448:	4402      	add	r2, r0
 800344a:	4601      	mov	r1, r0
 800344c:	428a      	cmp	r2, r1
 800344e:	d100      	bne.n	8003452 <memmove+0x2a>
 8003450:	bd10      	pop	{r4, pc}
 8003452:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003456:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800345a:	e7f7      	b.n	800344c <memmove+0x24>

0800345c <_free_r>:
 800345c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800345e:	2900      	cmp	r1, #0
 8003460:	d044      	beq.n	80034ec <_free_r+0x90>
 8003462:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003466:	9001      	str	r0, [sp, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	f1a1 0404 	sub.w	r4, r1, #4
 800346e:	bfb8      	it	lt
 8003470:	18e4      	addlt	r4, r4, r3
 8003472:	f000 f913 	bl	800369c <__malloc_lock>
 8003476:	4a1e      	ldr	r2, [pc, #120]	; (80034f0 <_free_r+0x94>)
 8003478:	9801      	ldr	r0, [sp, #4]
 800347a:	6813      	ldr	r3, [r2, #0]
 800347c:	b933      	cbnz	r3, 800348c <_free_r+0x30>
 800347e:	6063      	str	r3, [r4, #4]
 8003480:	6014      	str	r4, [r2, #0]
 8003482:	b003      	add	sp, #12
 8003484:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003488:	f000 b90e 	b.w	80036a8 <__malloc_unlock>
 800348c:	42a3      	cmp	r3, r4
 800348e:	d908      	bls.n	80034a2 <_free_r+0x46>
 8003490:	6825      	ldr	r5, [r4, #0]
 8003492:	1961      	adds	r1, r4, r5
 8003494:	428b      	cmp	r3, r1
 8003496:	bf01      	itttt	eq
 8003498:	6819      	ldreq	r1, [r3, #0]
 800349a:	685b      	ldreq	r3, [r3, #4]
 800349c:	1949      	addeq	r1, r1, r5
 800349e:	6021      	streq	r1, [r4, #0]
 80034a0:	e7ed      	b.n	800347e <_free_r+0x22>
 80034a2:	461a      	mov	r2, r3
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	b10b      	cbz	r3, 80034ac <_free_r+0x50>
 80034a8:	42a3      	cmp	r3, r4
 80034aa:	d9fa      	bls.n	80034a2 <_free_r+0x46>
 80034ac:	6811      	ldr	r1, [r2, #0]
 80034ae:	1855      	adds	r5, r2, r1
 80034b0:	42a5      	cmp	r5, r4
 80034b2:	d10b      	bne.n	80034cc <_free_r+0x70>
 80034b4:	6824      	ldr	r4, [r4, #0]
 80034b6:	4421      	add	r1, r4
 80034b8:	1854      	adds	r4, r2, r1
 80034ba:	42a3      	cmp	r3, r4
 80034bc:	6011      	str	r1, [r2, #0]
 80034be:	d1e0      	bne.n	8003482 <_free_r+0x26>
 80034c0:	681c      	ldr	r4, [r3, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	6053      	str	r3, [r2, #4]
 80034c6:	4421      	add	r1, r4
 80034c8:	6011      	str	r1, [r2, #0]
 80034ca:	e7da      	b.n	8003482 <_free_r+0x26>
 80034cc:	d902      	bls.n	80034d4 <_free_r+0x78>
 80034ce:	230c      	movs	r3, #12
 80034d0:	6003      	str	r3, [r0, #0]
 80034d2:	e7d6      	b.n	8003482 <_free_r+0x26>
 80034d4:	6825      	ldr	r5, [r4, #0]
 80034d6:	1961      	adds	r1, r4, r5
 80034d8:	428b      	cmp	r3, r1
 80034da:	bf04      	itt	eq
 80034dc:	6819      	ldreq	r1, [r3, #0]
 80034de:	685b      	ldreq	r3, [r3, #4]
 80034e0:	6063      	str	r3, [r4, #4]
 80034e2:	bf04      	itt	eq
 80034e4:	1949      	addeq	r1, r1, r5
 80034e6:	6021      	streq	r1, [r4, #0]
 80034e8:	6054      	str	r4, [r2, #4]
 80034ea:	e7ca      	b.n	8003482 <_free_r+0x26>
 80034ec:	b003      	add	sp, #12
 80034ee:	bd30      	pop	{r4, r5, pc}
 80034f0:	200001a4 	.word	0x200001a4

080034f4 <sbrk_aligned>:
 80034f4:	b570      	push	{r4, r5, r6, lr}
 80034f6:	4e0e      	ldr	r6, [pc, #56]	; (8003530 <sbrk_aligned+0x3c>)
 80034f8:	460c      	mov	r4, r1
 80034fa:	6831      	ldr	r1, [r6, #0]
 80034fc:	4605      	mov	r5, r0
 80034fe:	b911      	cbnz	r1, 8003506 <sbrk_aligned+0x12>
 8003500:	f000 f8bc 	bl	800367c <_sbrk_r>
 8003504:	6030      	str	r0, [r6, #0]
 8003506:	4621      	mov	r1, r4
 8003508:	4628      	mov	r0, r5
 800350a:	f000 f8b7 	bl	800367c <_sbrk_r>
 800350e:	1c43      	adds	r3, r0, #1
 8003510:	d00a      	beq.n	8003528 <sbrk_aligned+0x34>
 8003512:	1cc4      	adds	r4, r0, #3
 8003514:	f024 0403 	bic.w	r4, r4, #3
 8003518:	42a0      	cmp	r0, r4
 800351a:	d007      	beq.n	800352c <sbrk_aligned+0x38>
 800351c:	1a21      	subs	r1, r4, r0
 800351e:	4628      	mov	r0, r5
 8003520:	f000 f8ac 	bl	800367c <_sbrk_r>
 8003524:	3001      	adds	r0, #1
 8003526:	d101      	bne.n	800352c <sbrk_aligned+0x38>
 8003528:	f04f 34ff 	mov.w	r4, #4294967295
 800352c:	4620      	mov	r0, r4
 800352e:	bd70      	pop	{r4, r5, r6, pc}
 8003530:	200001a8 	.word	0x200001a8

08003534 <_malloc_r>:
 8003534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003538:	1ccd      	adds	r5, r1, #3
 800353a:	f025 0503 	bic.w	r5, r5, #3
 800353e:	3508      	adds	r5, #8
 8003540:	2d0c      	cmp	r5, #12
 8003542:	bf38      	it	cc
 8003544:	250c      	movcc	r5, #12
 8003546:	2d00      	cmp	r5, #0
 8003548:	4607      	mov	r7, r0
 800354a:	db01      	blt.n	8003550 <_malloc_r+0x1c>
 800354c:	42a9      	cmp	r1, r5
 800354e:	d905      	bls.n	800355c <_malloc_r+0x28>
 8003550:	230c      	movs	r3, #12
 8003552:	603b      	str	r3, [r7, #0]
 8003554:	2600      	movs	r6, #0
 8003556:	4630      	mov	r0, r6
 8003558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800355c:	4e2e      	ldr	r6, [pc, #184]	; (8003618 <_malloc_r+0xe4>)
 800355e:	f000 f89d 	bl	800369c <__malloc_lock>
 8003562:	6833      	ldr	r3, [r6, #0]
 8003564:	461c      	mov	r4, r3
 8003566:	bb34      	cbnz	r4, 80035b6 <_malloc_r+0x82>
 8003568:	4629      	mov	r1, r5
 800356a:	4638      	mov	r0, r7
 800356c:	f7ff ffc2 	bl	80034f4 <sbrk_aligned>
 8003570:	1c43      	adds	r3, r0, #1
 8003572:	4604      	mov	r4, r0
 8003574:	d14d      	bne.n	8003612 <_malloc_r+0xde>
 8003576:	6834      	ldr	r4, [r6, #0]
 8003578:	4626      	mov	r6, r4
 800357a:	2e00      	cmp	r6, #0
 800357c:	d140      	bne.n	8003600 <_malloc_r+0xcc>
 800357e:	6823      	ldr	r3, [r4, #0]
 8003580:	4631      	mov	r1, r6
 8003582:	4638      	mov	r0, r7
 8003584:	eb04 0803 	add.w	r8, r4, r3
 8003588:	f000 f878 	bl	800367c <_sbrk_r>
 800358c:	4580      	cmp	r8, r0
 800358e:	d13a      	bne.n	8003606 <_malloc_r+0xd2>
 8003590:	6821      	ldr	r1, [r4, #0]
 8003592:	3503      	adds	r5, #3
 8003594:	1a6d      	subs	r5, r5, r1
 8003596:	f025 0503 	bic.w	r5, r5, #3
 800359a:	3508      	adds	r5, #8
 800359c:	2d0c      	cmp	r5, #12
 800359e:	bf38      	it	cc
 80035a0:	250c      	movcc	r5, #12
 80035a2:	4629      	mov	r1, r5
 80035a4:	4638      	mov	r0, r7
 80035a6:	f7ff ffa5 	bl	80034f4 <sbrk_aligned>
 80035aa:	3001      	adds	r0, #1
 80035ac:	d02b      	beq.n	8003606 <_malloc_r+0xd2>
 80035ae:	6823      	ldr	r3, [r4, #0]
 80035b0:	442b      	add	r3, r5
 80035b2:	6023      	str	r3, [r4, #0]
 80035b4:	e00e      	b.n	80035d4 <_malloc_r+0xa0>
 80035b6:	6822      	ldr	r2, [r4, #0]
 80035b8:	1b52      	subs	r2, r2, r5
 80035ba:	d41e      	bmi.n	80035fa <_malloc_r+0xc6>
 80035bc:	2a0b      	cmp	r2, #11
 80035be:	d916      	bls.n	80035ee <_malloc_r+0xba>
 80035c0:	1961      	adds	r1, r4, r5
 80035c2:	42a3      	cmp	r3, r4
 80035c4:	6025      	str	r5, [r4, #0]
 80035c6:	bf18      	it	ne
 80035c8:	6059      	strne	r1, [r3, #4]
 80035ca:	6863      	ldr	r3, [r4, #4]
 80035cc:	bf08      	it	eq
 80035ce:	6031      	streq	r1, [r6, #0]
 80035d0:	5162      	str	r2, [r4, r5]
 80035d2:	604b      	str	r3, [r1, #4]
 80035d4:	4638      	mov	r0, r7
 80035d6:	f104 060b 	add.w	r6, r4, #11
 80035da:	f000 f865 	bl	80036a8 <__malloc_unlock>
 80035de:	f026 0607 	bic.w	r6, r6, #7
 80035e2:	1d23      	adds	r3, r4, #4
 80035e4:	1af2      	subs	r2, r6, r3
 80035e6:	d0b6      	beq.n	8003556 <_malloc_r+0x22>
 80035e8:	1b9b      	subs	r3, r3, r6
 80035ea:	50a3      	str	r3, [r4, r2]
 80035ec:	e7b3      	b.n	8003556 <_malloc_r+0x22>
 80035ee:	6862      	ldr	r2, [r4, #4]
 80035f0:	42a3      	cmp	r3, r4
 80035f2:	bf0c      	ite	eq
 80035f4:	6032      	streq	r2, [r6, #0]
 80035f6:	605a      	strne	r2, [r3, #4]
 80035f8:	e7ec      	b.n	80035d4 <_malloc_r+0xa0>
 80035fa:	4623      	mov	r3, r4
 80035fc:	6864      	ldr	r4, [r4, #4]
 80035fe:	e7b2      	b.n	8003566 <_malloc_r+0x32>
 8003600:	4634      	mov	r4, r6
 8003602:	6876      	ldr	r6, [r6, #4]
 8003604:	e7b9      	b.n	800357a <_malloc_r+0x46>
 8003606:	230c      	movs	r3, #12
 8003608:	603b      	str	r3, [r7, #0]
 800360a:	4638      	mov	r0, r7
 800360c:	f000 f84c 	bl	80036a8 <__malloc_unlock>
 8003610:	e7a1      	b.n	8003556 <_malloc_r+0x22>
 8003612:	6025      	str	r5, [r4, #0]
 8003614:	e7de      	b.n	80035d4 <_malloc_r+0xa0>
 8003616:	bf00      	nop
 8003618:	200001a4 	.word	0x200001a4

0800361c <_realloc_r>:
 800361c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003620:	4680      	mov	r8, r0
 8003622:	4614      	mov	r4, r2
 8003624:	460e      	mov	r6, r1
 8003626:	b921      	cbnz	r1, 8003632 <_realloc_r+0x16>
 8003628:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800362c:	4611      	mov	r1, r2
 800362e:	f7ff bf81 	b.w	8003534 <_malloc_r>
 8003632:	b92a      	cbnz	r2, 8003640 <_realloc_r+0x24>
 8003634:	f7ff ff12 	bl	800345c <_free_r>
 8003638:	4625      	mov	r5, r4
 800363a:	4628      	mov	r0, r5
 800363c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003640:	f000 f838 	bl	80036b4 <_malloc_usable_size_r>
 8003644:	4284      	cmp	r4, r0
 8003646:	4607      	mov	r7, r0
 8003648:	d802      	bhi.n	8003650 <_realloc_r+0x34>
 800364a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800364e:	d812      	bhi.n	8003676 <_realloc_r+0x5a>
 8003650:	4621      	mov	r1, r4
 8003652:	4640      	mov	r0, r8
 8003654:	f7ff ff6e 	bl	8003534 <_malloc_r>
 8003658:	4605      	mov	r5, r0
 800365a:	2800      	cmp	r0, #0
 800365c:	d0ed      	beq.n	800363a <_realloc_r+0x1e>
 800365e:	42bc      	cmp	r4, r7
 8003660:	4622      	mov	r2, r4
 8003662:	4631      	mov	r1, r6
 8003664:	bf28      	it	cs
 8003666:	463a      	movcs	r2, r7
 8003668:	f7ff fed0 	bl	800340c <memcpy>
 800366c:	4631      	mov	r1, r6
 800366e:	4640      	mov	r0, r8
 8003670:	f7ff fef4 	bl	800345c <_free_r>
 8003674:	e7e1      	b.n	800363a <_realloc_r+0x1e>
 8003676:	4635      	mov	r5, r6
 8003678:	e7df      	b.n	800363a <_realloc_r+0x1e>
	...

0800367c <_sbrk_r>:
 800367c:	b538      	push	{r3, r4, r5, lr}
 800367e:	4d06      	ldr	r5, [pc, #24]	; (8003698 <_sbrk_r+0x1c>)
 8003680:	2300      	movs	r3, #0
 8003682:	4604      	mov	r4, r0
 8003684:	4608      	mov	r0, r1
 8003686:	602b      	str	r3, [r5, #0]
 8003688:	f7fd ff2a 	bl	80014e0 <_sbrk>
 800368c:	1c43      	adds	r3, r0, #1
 800368e:	d102      	bne.n	8003696 <_sbrk_r+0x1a>
 8003690:	682b      	ldr	r3, [r5, #0]
 8003692:	b103      	cbz	r3, 8003696 <_sbrk_r+0x1a>
 8003694:	6023      	str	r3, [r4, #0]
 8003696:	bd38      	pop	{r3, r4, r5, pc}
 8003698:	200001ac 	.word	0x200001ac

0800369c <__malloc_lock>:
 800369c:	4801      	ldr	r0, [pc, #4]	; (80036a4 <__malloc_lock+0x8>)
 800369e:	f000 b811 	b.w	80036c4 <__retarget_lock_acquire_recursive>
 80036a2:	bf00      	nop
 80036a4:	200001b0 	.word	0x200001b0

080036a8 <__malloc_unlock>:
 80036a8:	4801      	ldr	r0, [pc, #4]	; (80036b0 <__malloc_unlock+0x8>)
 80036aa:	f000 b80c 	b.w	80036c6 <__retarget_lock_release_recursive>
 80036ae:	bf00      	nop
 80036b0:	200001b0 	.word	0x200001b0

080036b4 <_malloc_usable_size_r>:
 80036b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036b8:	1f18      	subs	r0, r3, #4
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	bfbc      	itt	lt
 80036be:	580b      	ldrlt	r3, [r1, r0]
 80036c0:	18c0      	addlt	r0, r0, r3
 80036c2:	4770      	bx	lr

080036c4 <__retarget_lock_acquire_recursive>:
 80036c4:	4770      	bx	lr

080036c6 <__retarget_lock_release_recursive>:
 80036c6:	4770      	bx	lr

080036c8 <_init>:
 80036c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ca:	bf00      	nop
 80036cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ce:	bc08      	pop	{r3}
 80036d0:	469e      	mov	lr, r3
 80036d2:	4770      	bx	lr

080036d4 <_fini>:
 80036d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d6:	bf00      	nop
 80036d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036da:	bc08      	pop	{r3}
 80036dc:	469e      	mov	lr, r3
 80036de:	4770      	bx	lr
